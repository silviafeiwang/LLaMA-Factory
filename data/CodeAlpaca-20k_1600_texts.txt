arr = [2, 4, 6, 8, 10]
Create an array of length 5 which contains all even numbers between 1 and 10.


Height of triangle = opposite side length * sin (angle) / side length
Formulate an equation to calculate the height of a triangle given the angle, side lengths and opposite side length.


def replace(self, replace_with):
    new_string = ""
    for char in self:
        if char == " ":
            new_string += replace_with
        else:
            new_string += char
    return new_string
Write a replace method for a string class which replaces the given string with a given set of characters.
string = "Hello World!"
replace_with = "Greetings!"

arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]
Create an array of length 15 containing numbers divisible by 3 up to 45.


def find_num_distinct_states(matrix):
    states = set()
    for row in matrix:
        state = "".join([str(x) for x in row])
        states.add(state)
    return len(states)
Write a function to find the number of distinct states in a given matrix.
matrix = [[1, 0, 0],
          [1, 0, 1],
          [1, 1, 1]]

for i in range(10):
    for j in range(10):
        print(i, j)
Create a nested loop to print every combination of numbers between 0-9


def max_difference(arr):
    max_diff = 0
    for i in range(len(arr)-1):
        diff = arr[i+1] - arr[i]
        if diff > max_diff:
            max_diff = diff
    return max_diff
Write a function to find the maximum difference between two numbers in a given array.
arr = [5, 3, 17, 11, 9]

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-2) + fib(n-1)
Write a function to generate the nth Fibonacci number.
< noinput >

class Point:
    def __init__(self, x, y):
        self.x = x 
        self.y = y 
   
    def __str__(self): 
        return "({0},{1})".format(self.x, self.y)
Write a class to represent a 2D point with x and y coordinates.


def remove_spaces(string): 
    return "".join(string.split())
Write code that removes spaces from a given string.
string = " A B C D "

def is_even(n):
    if n%2 == 0:
        return True  
    else:
        return False
Write a function that checks if a give number is even or odd.


def find_primes(n): 
    prime_list = [2] 
    for number in range(2, n + 1): 
        is_prime = True
        for k in range(2, number): 
            if number % k == 0: 
                is_prime = False 
        if is_prime: 
            prime_list.append(number) 
    return prime_list
Write code to create a list of all prime numbers between 2 and 100.


for i in range(1,11):
    if i % 2 == 0:
        print(i)
Edit the following code to print out all even numbers from 1 to 10.
for i in range(1,11):
    print(i)

sum = 0
for i in range(1,11):
    sum += i
print(sum)
Write code to find the sum of all numbers between 1 and 10.


def area_circle(radius):
    return 3.14 * (radius**2)
Create a function to calculate the area of a given circle.


# This program prints a conversion table from Fahrenheit to Celsius

# Print a heading for the table
print("Fahrenheit to Celsius Conversion Table")

# Print the column headings
print("Fahrenheit \t Celsius")

# Calculate and print the table body
for fahr in range(-50 , 121):
  celsius = (fahr - 32) * 5 / 9
  print("%3d \t\t %.2f" % (fahr, celsius))
Follow the comments in the code to complete the program which prints a conversion table from Fahrenheit to Celsius.
# This program prints a conversion table from Fahrenheit to Celsius

# Print a heading for the table
# TODO

# Print the column headings
# TODO

# Calculate and print the table body
# TODO

import pandas as pd
import numpy as np

# Define features
features = ["wing_shape", "size", "tails_length", "color_pattern"] 

# Load the data
data = pd.read_csv("birds.csv")

# Preprocess the data to generate feature vectors
X = np.array(data[features]) 

# Make a target vector 
y = np.array(data["species"]) 

# Divide the data into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a classification model
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Generate evaluation metrics
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)

print("Model accuracy: %.2f" % accuracy)
Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon.


public static long factorial(int n) {
    if (n == 0) {
        return 1;
    }
    long result = 1;
    for (int i = 1; i <= n; i++) {
        result *= i;
    }
    return result;
}
Create a function in Java for computing the factorial of a positive integer number.


#include <iostream>
#include <algorithm>
#include <random>

void shuffleArray(int array[], int size) {
	std::random_device rd;
	std::mt19937 g(rd()); 
	std::shuffle(array, array+size, g); 
}

int main() 
{ 
	int array[] = {1, 2, 3, 4, 5, 6, 7, 8}; 
	int size = sizeof(array) / sizeof(array[0]); 

    // Print original array
    std::cout << "Original array: ";
    for (int i : array)
        std::cout << i << " ";
    std::cout << "\n";

    // Shuffle array
	shuffleArray(array, size); 

    // Print shuffled array
    std::cout << "Shuffled array: ";
    for (int i : array)
        std::cout << i << " ";
    std::cout << "\n";

	return 0; 
}
Create a C++ program for randomly shuffling an array of integers.


#include <stdio.h>

int main() {
    int array[] = {1, 2, 3, 4, 5};
    int n = 5;
    int i;
    // Limit loop size to the length of the array
    for (i = 0; i < n; i++) {
        printf("%d\n", array[i]);
    }
    return 0;
}
Use the function to debug the given program and prevent the segmentation fault.
#include <stdio.h>

int main() {
    int array[] = {1, 2, 3, 4, 5};
    int n = 5;
    int i;
    // TODO
    for (i = 0; i <= n; i++) {
        printf("%d\n", array[i]);
    }
    return 0;
}

for i in range(1, n+1):
    print(i)
Replace the placeholder with a for loop for iterating over the numbers from 1 to n and printing them.
for i in range(n):
    # TODO

try:
    for i in range(n):
        x = 1/i
except ZeroDivisionError:
    print("Zero division error encountered!")
Use try-except statements to detect and handle exceptions in the code.
for i in range(n):
    x = 1/i

numbers = [i for i in range(10) if i % 2 == 0]
Re-write the code segment as a list comprehension.
numbers = []
for i in range(10):
    if i % 2 == 0:
        numbers.append(i)

import random

# Generate 10 random numbers
for i in range(10):
    print(random.randrange(1, 101))
Remove the boilerplate code from the program for printing 10 random numbers.
import random

# Generate 10 random numbers
for i in range(10):
    # TODO

# Calculate x to the power of y
x_pow_y = x**y
Modify the code to perform the mathematical expression “x to the power of y”.
# Calculate x to the power of y
# TODO

string = "hello world"
letter_counts = {}

for letter in string:
    if letter in letter_counts:
       letter_counts[letter] += 1
    else:
        letter_counts[letter] = 1

print(letter_counts)
Create a dictionary for counting the occurrence of each letter in the given string.
string = "hello world"
#TODO

# Find the maximum value in an array
arr = [4, 5, 2, 8, 7]

max_value = arr[0]
for i in range(1, len(arr)):
    if arr[i] > max_value:
        max_value = arr[i]

print(max_value)
Follow the comments to complete the code that finds the maximum value in an array.
# Find the maximum value in an array
arr = [4, 5, 2, 8, 7]
# TODO

<table>
  <tbody>
    <% for (let i = 0; i < n; i++) { %>
      <tr>
        <% for (let j = 0; j < m; j++) { %>
          <td>Cell Content</td>
        <% } %>
      </tr>
    <% } %>
  </tbody>
</table>
Write a function in HTML for creating a table of n rows and m columns.


.login-form {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
Create a CSS script that centers the login form on the webpage.


public class SumOfArray {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3 , 4, 5};
        int sum = 0;
        for(int i=0; i < numbers.length;i++) {
            sum = sum + numbers[i];
        }
        System.out.println("The sum of numbers in the given array is: " + sum);
    }
}
Create a Java program that prints out the sum of the numbers in the array.
int[] numbers = {1, 2, 3 , 4, 5};

SELECT COUNT(*) AS "Total Number of Orders" 
FROM orders;
Write a SQL query to calculate the total number of orders in the "orders" table.


def to_lowercase(string):
    return string.lower()

string = "FOO"
print(to_lowercase(string))
Write a Python function to convert a given string to lowercase.
string = "FOO"

#include <stdio.h>

int main()
{
    int i, num, first=0, second=1, next;
    printf("Enter the number of elements: ");
    scanf("%d", &num);
    printf("Fibonacci Series: ");
    for (i = 0; i < num; i++)
    {
        if (i <= 1)
            next = i;
        else
        {
            next = first + second;
            first = second;
            second = next;
        }
        printf("%d ", next);
    }
    return 0;
}
Create a C program that prints out the Fibonacci sequence.


function countVowels(string) {
    let vowelCount = 0;
    const vowels = ["a","e","i","o","u"];
  
    for (let i = 0; i < string.length; i++) {
      if (vowels.includes(string[i])) {
        vowelCount++;
      }
    }
  
    return vowelCount;
}

const string = "abcdefg";
console.log(countVowels(string));
Write a function in JavaScript to count the number of vowels in a given string.
const string = "abcdefg"

import React from "react";

function App() {
  return (
    <div>
      <h1>Hello, World!</h1>
    </div>
  );
}

export default App;
Create a JSX code that renders a "Hello, World!" message in the browser.


SELECT category, AVG(price) as "Average Order Price"
FROM orders
GROUP BY category;
Write an SQL query to calculate the average order price for each product category in the "orders" table.


public class TwoDArray {

    public static void main(String[] args) {
        int[][] arr = {{1,2},{3,4},{5,6}};

        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
Create a Java program that prints out the contents of a given two-dimensional array.
int[][] arr = {{1,2},{3,4},{5,6}}

#include<iostream>
using namespace std;
 
int main()
{
    int array[] = {6, 3, 8, 12, 9, 4};
    int arraySize = sizeof(array)/sizeof(array[0]);
 
    //ascending order sorting
    for(int i = 0; i < arraySize; i++)
    {
        // find the position of smallest element
        int small = i;
        for(int j = i+1; j < arraySize; j++)
        {
            if(array[j] > array[small])
                small = j;
        }
 
        // swap the position of smallest element
        int temp = array[i];
        array[i] = array[small];
        array[small] = temp;
    }
 
    // print the sorted array
    cout << "Sorted array : ";
    for(int i = 0; i < arraySize; i++)
        cout << array[i] << " ";
 
    return 0;
}
Create a C++ program that sorts a given array in descending order.
int array[] = {6, 3, 8, 12, 9, 4};

list = [1, 2, 3, 4, 5]
print("Total number of elements in the list: ", len(list))
Edit the Python code so that it prints out the total number of elements in the list.
list = [1, 2, 3, 4, 5]

let month = 5
let daysEndingInth = [3, 0, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3]
let daysInMonth = daysEndingInth[month - 1] 
print("The number of days in the month of \(month) is \(daysInMonth).")
Create a Swift code that show the number of days in the given month.
int month = 5

<form action="">
    <label for="street">Street</label>
    <input type="text" name="street" id="street">
    <label for="city">City</label>
    <input type="text" name="city" id="city">
    <label for="state">State</label>
    <input type="text" name="state" id="state">
    <label for="zip">Zip Code</label>
    <input type="text" name="zip" id="zip"> 
    <input type="submit" value="Submit">
</form>
Write a HTML code that create a form for user to fill out their current address.


SELECT COUNT(*)
FROM orders
WHERE order_date BETWEEN '2020-01-01' AND '2020-02-01';
Write a SQL query to find the total number of orders placed between two given dates.
start_date = '2020-01-01'
end_date = '2020-02-01'

nums = [1, 7, 3, 6]
sorted_nums = nums.sort

# Calculation of median 
if sorted_nums.length % 2 == 0
  mid_index = sorted_nums.length/2
  median = (sorted_nums[mid_index] + sorted_nums[mid_index - 1])/2.to_f
else
  mid_index = sorted_nums.length/2
  median = sorted_nums[mid_index]
end

puts median
Create a Ruby code that prints out the median of a given array of numbers.
nums = [1, 7, 3, 6]

<?php
$input_array = array(1,2,3,4,5);
$item_to_check = 3;

if(in_array($item_to_check, $input_array)) {
  echo "Array contains the given item.";
} else {
  echo "Array doesn't contain the given item.";
}
?>
Create a PHP code to check if an array contains a given item.
$input_array = array(1,2,3,4,5);
$item_to_check = 3;

try:
    a = 5
    b = 0

    ans = a/b
except ZeroDivisionError:
    print("Cannot divide by zero.")
Edit the code to create a try-except block to handle the exception.
a = 5
b = 0

ans = a/b

#!/bin/bash

string="Hello World!"
vowels=("a" "e" "i" "o" "u" "A" "E" "I" "O" "U")

for i in "${vowels[@]}"
do
    string="${string//$i/0}"
done

echo $string #H0ll0 W0rld!
Write a script using Bash that replaces all vowels with a number.


x = "Hello World!"
Change the variable `x` to the data type desired.
x = 'Hello World!'

def arraySum(arr):
    total = 0
    for num in arr:
        total += num
    return total
Create a function that takes an array as an argument and returns the sum of all the elements in the array.
arr = [1, 2, 3, 4, 5]

arr.sort() # [1, 2, 3, 4, 5]
Sort the array in ascending order.
arr = [3, 2, 1, 5, 4]

import random
x = random.randint(4, 8)
Generate a random integer between 4 and 8 (inclusively).


arr = [x**2 for x in arr] # [1, 4, 9, 16, 25]
Write a list comprehension to square each number in the list.
arr = [1, 2, 3, 4, 5]

def reverseWords(text):
    return ' '.join(text.split()[::-1])

reverseWords(text) # "World! Hello"
Write a function that takes a string and reverses the words.
text = "Hello World!"

SELECT SUM(salary)
FROM employees;
Write a SQL query to return the sum of all salaries.


def multiply(x, y):
    return x*y
Create a function that takes in two numbers as arguments and returns the product of the two.


let sum = arr.reduce((total, num) => total + num);
console.log(sum); // 15
Sum up the numbers in the array in Javascript.
arr = [1,2,3,4,5]

for (let i = 0; i < 10; i++){
    printNum(i);
}
Using the given function, create a loop that counts from 0 to 9.
function printNum(num){
  console.log(num)
}

{
  "firstName": "John",
  "lastName": "Doe",
  "age": 30
}
Create a JSON object with three key-value pairs.


len(text) # 12
Count the number of characters in the string.
text = "Hello World!"

Math.random(); // a random number between 0 and 1 (inclusively)
Generate a random number between 0 and 1 (inclusively).


def average_list(nums):
    return sum(nums)/len(nums)
Compose a function named average_list which takes a list of numbers as its argument and computes the average.


import re

string = "This string contains some urls such as https://www.google.com and https://www.facebook.com."

urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) 

print(urls)
Generate a snippet of code to extract all the URLs from the given string.
This string contains some urls such as https://www.google.com and https://www.facebook.com.

import csv
import json

def csv_to_json():
    # Path of csv file
    file_csv = 'mycsvfile.csv'
    
    # Path of json file
    file_json = 'myjsonfile.json'
    
    with open(file_csv, 'r') as input_file:
        reader = csv.DictReader(input_file)
        data = list(reader)
    
    with open(file_json, 'w') as output_file:
        json.dump(data, output_file)

csv_to_json()
Write a code to convert a given spredsheet in csv format to json format.


list_of_multiples_of_3 = [x*3 for x in range(8)]
Create a list comprehension to generate a list of multiples of 3 from 0 to 23.


def longest_element(list):
  max_length = 0
  max_length_item = None

  for item in list:
    if len(item) > max_length:
      max_length = len(item)
      max_length_item = item

  return max_length_item

list = [10, 100, 200, 500, 400]
longest_element(list) # 500
Design a program to find the longest element in the given list.
[10, 100, 200, 500, 400]

def print_prime_numbers_in_range(start, end):
  # start = starting number
  # end = ending number

  for num in range(start, end+1):
    # Prime numbers are greater than 1
    if num > 1:
      for i in range(2, num):
        if (num % i) == 0:
          break
      else:
        print(num)
---

11. Instruction: Generate a snippet of code to reverse given string
11. Input:
<noinput>
11. Output:
def reverse_string(input_string):
  string_length = len(input_string)
  reversed_string = ""
  
  for i in range(string_length-1,-1,-1):
    reversed_string += input_string[i]
  
  return reversed_string
Write a function to print all prime numbers between two given numbers.


A Java function consists of a function name, return type, parameters (arguments), and body. The syntax of a Java function is as follows: 
public <return type> <function name>(<list of parameters>) { 
    // function body 
    <statements> 
}
Describe the basic syntax of a Java function?


You can reverse a list in C++ using the std::reverse algorithm. To reverse the list, pass the list as the first parameter and the beginning and end of the list as the second and third parameter, respectively. Alternatively, you can also reverse the list using a for loop and the operator [] to access each element of the list.
How to reverse a list in C++?


UPDATE payments 
SET amount = 5 
WHERE payments.amount IS NOT NULL;
Write a SQL query to update a value x in a column y in a table z.
x = 5, y = 'amount' and z = 'payments'.

def is_even(num): 
    if num % 2 == 0: 
        return True 
    else: 
        return False
Write an algorithm in Python to determine if a number is even or odd.


The purpose of a constructor in a class in Java is to initialize an object of that class. A constructor is a special kind of method that is used to create an object of its associated class. When an object of the class is created, the constructor is used to set the initial state of the object.
What is the purpose of a constructor in a class in Java?


var currentURL = window.location.href;
console.log(currentURL);
Write a JavaScript code to get the current browser URL.


int arr[3] = {1,2,3};
int sum = 0;
int* ptr = arr;
for (int i = 0; i < 3; i++) 
{
    sum += *(ptr+i); 
}
Rewrite the following C++ code using only pointer references instead of array subscripts:
int arr[3] = {1,2,3};
int sum = 0;
for (int i = 0; i < 3; i++) 
{
    sum += arr[i];
}

SELECT column_name FROM information_schema.columns WHERE table_name = 'employees';
Write a MySQL query to print the column names of a table named 'employees'.


/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/
Generate a regular expression to match a valid email address.


To delete a particular row in an SQLite database table, you can use the DELETE statement with a WHERE clause to specify the row to be deleted. For example: DELETE FROM table_name WHERE condition;
How to delete a particular row in an SQLite database table?


Yes, it is possible to set a breakpoint that is not associated with any source code line in a GDB program. For example, you can set a breakpoint on a function or a memory address. You can do this by using the break command with '*' prefix followed by the address of the breakpoint.
Is it possible to set a breakpoint that is not associated with any source code line in a GDB program?


#include <iostream>

int calculateAverage(int array[], int n){
    int sum = 0; 
    for (int i=0; i<n; i++){
        sum += array[i]; 
    } 
    int average = sum/n;
    return average;
}
Write a C++ code to find the average of an array of integers.


We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string.
How can we encrypt a string in Python?


The purpose of declaring a function as static in C++ is to restrict its visibility to only the translation unit in which it is declared. A static function can only be called from within the same translation unit and thus, it cannot be accessed from outside of that translation unit.
What is the purpose of declaring a function as static in C++?


We can use nested loops to print the elements of a two-dimensional array in C. The outer loop iterates over the rows, while the inner loop iterates over the columns. For example, the following code snippet prints the elements of a two-dimensional array: 
 
int array[3][3] = {{1,2,3},{4,5,6},{7,8,9}};
for (int i=0; i<3; i++)
{   
    for(int j=0; j<3; j++) 
    {
        printf("%d ", array[i][j]); 
    }
    printf("\n");
}
How to print the elements of a two-dimensional array in C?


def example_func(lst):
   output_lst = []
   for element in lst:
      if (type(element) == int):
         output_lst.append(element + 5)
   return output_lst
 
example_func([1, 2, "hello"])
Using the following code, clean up the bugs and make sure the output functions correctly.
def example_func(lst):
   for element in lst:
      if (type(element) == int):
         lst.append(element + 5)
   return lst
 
example_func([1, 2, "hello"])

#include <iostream> 
#include <cstdlib> 
#include <ctime> 
using namespace std; 

int randomIntGenerator() 
{ 
   // Setting the seed 
   srand(time(0)); 

   // Generating random integer 
   return (rand()%11); 
}
Write a C++ function to generate a random integer between 0 and 10.


CREATE TABLE customers (
   id int NOT NULL AUTO_INCREMENT,
   name varchar(100) NOT NULL,
   email varchar(100) NOT NULL,
   phone varchar(20) NOT NULL,
   address varchar(200) NOT NULL,
   PRIMARY KEY (id)
);
Create a table to store customer information.


public class Puppy { 
   // Instance Variables 
   String name; 
   int age; 
  
   // Constructor 
   public Puppy(String name, int age){ 
      this.name = name; 
      this.age = age; 
   } 
  
   // Methods 
   public void bark(){ 
      System.out.println("Woof Woof!"); 
   } 
  
   public void sleep(){ 
      System.out.println("Zzzzzz..."); 
   } 
}
Create a class in Java named Puppy that has two instance variables, age and name and two methods, bark and sleep.


int count = 0;
for (int i = 0; i < StringInput.length(); i++) {
  if ((StringInput.charAt(i) >= 'a' && StringInput.charAt(i) <= 'z') || (StringInput.charAt(i) >= 'A' && StringInput.charAt(i) <= 'Z')) {
   count++;
  }
}
System.out.println("Number of unique alphabets: " + count);
Parse the string and return the number of unique alphabets in the string.
StringInput = "apple"

#!/bin/bash
# Store all commands used in the last hour in command_list.
history | tail -$(($(date +%H) * 60)) -n $(($(date +%M)+1)) | cut -d ' ' -f 5 > command_list
# Create frequency database and store them in frequency.dat
cat command_list | sort | uniq -c | sort -rn > frequency.dat
# Print top 3 commands
head -3 frequency.dat
Write a shell script to print the top 3  most frequently used commands.


import json

jsonObject = json.loads(jsonString)
dictionary = dict(jsonObject)
print(dictionary)
Read the JSON string below and convert it into a dictionary.
jsonString = '{"name": "John", "age": 30, "city": "New York"}'

def find_max_element(arr): 
    max_element = arr[0] 
    for index in range(1, len(arr)): 
        if arr[index] > max_element: 
            max_element = arr[index] 
    return max_element
  
arr = [45, 7, 0, 82, 23]
max_element = find_max_element(arr) 
print(max_element)
Implement a function that finds the maximum element in a given array.
arr = [45, 7, 0, 82, 23]

def check_string_alphabets(myString):
    for character in myString:
        if (not character.isalpha()):
            return False
    return True

myString = "abc123"
if (check_string_alphabets(myString)):
    print("String contains only alphabets")
else:
    print("String contains numbers")
Validate whether the string contains only alphabets or not.
myString = "abc123"

num1 = 5
num2 = 10

print("num1 is smaller than num2") if (num1 < num2) else print("num1 is greater than or equal to num2")
Rewrite the following code using ternary operator.
num1 = 5
num2 = 10

if num1 < num2:
    print("num1 is smaller than num2")
else:
    print("num1 is greater than or equal to num2")

# Function to check whether the inputNumber is palindrome or not
def is_palindrome(inputNumber):

   # negative numbers are not palindrome
   if inputNumber < 0:
       return False

   # find the number of digits in the inputNumber
   div = 1
   while (inputNumber / div >= 10):
       div *= 10

   # check if the most significant and least significant digits match
   while (inputNumber != 0):
       # compare first and last digits
       firstdigit = inputNumber // div
       lastdigit =  inputNumber % 10
       if firstdigit != lastdigit:
           return False

       # remove the most and least significant digit of inputNumber
       inputNumber = (inputNumber % div) // 10

       # reduce div by a factor of 2,  since 2 digits
       # were removed
       div = div // 100
   return True

# Driver code to test above
inputNumber = 121
if is_palindrome(inputNumber) :
  print("Yes")
else:
  print("No")
Write a script to check if a given number is a palindrome or not.
inputNumber = 121

def reverse_string(user_string): 
  reversed_string = ''
  if len(user_string) == 0: 
    return "" 
  else: 
    reversed_string = reverse_string(user_string[1:]) + user_string[0] 
    return reversed_string

user_string = 'test'
print(reverse_string(user_string))
Edit the following code to remove the bugs.
def reverse_string(user_string): 
  if len(user_string) == 0: 
    return "" 
  else: 
    return reverse_string(user_string[1:]) + user_string[0] 
    
print(reverse_string(“test”))

a
bb
ccc
What is the output of the following code?
list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]

for x, y in zip(list1, list2):
    print(x * y)

def remove_whitespaces(myString):
    return ''.join(myString.split())

myString = "Hello   World    "
print(remove_whitespaces(myString))
Write a function to remove all whitespace characters from a given string.
myString = "Hello   World    "

x = "5"
y = "2"
try:
   sum = int(x) + int(y)
   print("Sum of x and y is", sum)
except:
   print("Error: Invalid input")
Edit the following code to add try catch block.
x = "5"
y = "2"
sum = int(x) + int(y)
print("Sum of x and y is", sum)

def list_dict(list_one, list_two):
    """Create a dictionary of elements in the two lists which have the same index."""
    assert len(list_one) == len(list_two), "lists must be same length"
    dict = {}
    for i in range(len(list_one)):
        dict[list_one[i]] = list_two[i]
    return dict
Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.
list_one = [1, 2, 3, 4]
list_two = ["a", "b", "c", "d"]

def quick_sort(arr):
    """Sort a list of numbers in ascending order using the Quick-Sort algorithm"""
    if len(arr) == 0:
        return []

    pivot = arr[0]
    left_arr = [x for x in arr if x < pivot]
    right_arr = [x for x in arr if x > pivot]
    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)
Create a quick-sort algorithm in Python.


def nth_fibonacci_number(n):
    """Find the value of n where n is the index of the Fibonacci Sequence.""" 
    if n < 2:
        return n 
    elif n == 2:
        return 1
    else:
        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)
Develop an algorithm to find the value of n where n is the index of the Fibonacci sequence.


def find_primes(num):
    """Find all the prime numbers less than or equal to a given number."""
    primes = []
    for i in range(2, num + 1):
        is_prime = True
        for j in range(2, int(i ** 0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes
Create a program that finds all the prime numbers less than or equal to a given number.


def find_greatest(list):
    """Print out the greatest number from a list of numbers."""
    greatest = list[0]
    for num in list:
        if num > greatest:
            greatest = num
    print('The greatest number is: ', greatest)
Write a function that takes in a list of numbers and prints out the greatest number.
list = [8, 2, 14, 25]

def find_longest(list):
    """Return the longest string from a list of strings.""" 
    longest = list[0]
    for item in list:
        if len(item) > len(longest):
            longest = item
    return longest
Design an algorithm that takes a list of strings and returns the longest string.
list = ["cat", "dog", "lion", "bird"]

def reverse_matrix(matrix):
    """Reverse the order of the rows and columns in a matrix of numbers."""
    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            reversed_matrix[j][i] = matrix[i][j]
    return reversed_matrix
Write a function that takes in a matrix of numbers and reverses the order of the rows and columns.
matrix = [[1, 2, 3], 
          [4, 5, 6], 
          [7, 8, 9]
         ]

def generate_password():
    """Generate a random password of 8 characters."""
    import random
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'
    password = ''
    for i in range(8):
        password += random.SystemRandom().choice(chars)
    return password
Design an algorithm that creates a random password of 8 characters.


def std_dev(list):
    """Print the standard deviation of elements in a given list."""
    numerator = 0
    mean = sum(list) / len(list)
    for num in list:
        numerator += (num - mean) ** 2
    sd = (numerator / (len(list) - 1)) ** 0.5
    return sd
FOr a given list, create a program that prints out the standard deviation of the elements in the list.
list = [1, 4, 9, 16]

def filter_string(string, character):
    """Filter out words of a string that contain a specific character."""
    words = string.split(' ')
    filtered_words = []
    for word in words:
        if character not in word:
            filtered_words.append(word)
    return ' '.join(filtered_words)
Create a program that can filter out words of a string that contain a specific character.
string = "This is a sentence"
character = 's'

def dist_points_3d(point1, point2):
    """Calculate the distance between two points in three-dimensional space."""
    distance = ((point1[0] - point2[0]) ** 2 + 
                (point1[1] - point2[1]) ** 2 + 
                (point1[2] - point2[2]) ** 2) ** 0.5
    return distance
Create a program that can calculate the distance between two points in three-dimensional space.
point1 = (1, 5, 9)
point2 = (4, 2, 8)

def caesar_cipher(text, key):
    """Cipher a given text using the Caesar Cipher."""
    ciphertext = ""
    for char in text: 
        if not char.isalpha():
            ciphertext += char
            continue
        offset = ord('a') if char.islower() else ord('A')
        new_char = (ord(char) - offset + key) % 26
        ciphertext += chr(offset + new_char)
    return ciphertext
Create a program that ciphers a given text using the caesar cipher.
text = "This is a secret message"
key = 3

def second_smallest(array):

smallest = min(array)
second_smallest = float('inf')

for num in array:
    if num > smallest and num < second_smallest:
        second_smallest = num
        
return second_smallest
Find the second smallest element in an integer array of size n.
array = [4, 5, 8, 2, 9, 13]

SELECT * FROM users WHERE age > 25
Write a SQL query to find all the users in a database with age greater than 25.


def max_of_two(x, y):
    if x > y:
        return x
    else:
        return y
Create a function to calculate the maximum of two numbers.


def split(mystring, separator):
    return mystring.split(separator)
Write a Python program to split a string on a given character separator.
mystring = "Hello, World!"
separator = ","

from datetime import datetime

def get_day_of_week(date):
    return date.strftime("%A")
Write a Python program to get the day of week from a given date and time.
from datetime import datetime
date = datetime(2020, 4, 20, 19, 15, 0)

function isEven(num) {
return num % 2 === 0;
}
Write a Javascript function to determine if the given number is an even number or not.


def draw_word(word):
    art = """
                 __
           _   /  \\
           \\_/\_/\_/
           /    |
           \___/
          \\\\_//
           \/ \/
            \/
        """
    for letter in word:
        art += "  " + letter
    print(art)
Write a Python program to print out an ASCII art of a given word.
word = "happy"

function isValidURL(url) {
    const regex = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/;
    return regex.test(url);
}
Write a JavaScript function to validate a given URL.


public void Maximum_Minimum(int num1, int num2, int num3)
{
    int max = Math.Max(Math.Max(num1, num2),num3);
    int min =  Math.Min(Math.Min(num1,num2),num3);
    Console.WriteLine("Maximum Number is : " + max);
    Console.WriteLine("Minimum Number is : " + min);
}
Write a C# program to find the maximum and minimum of three numbers.


public class ReverseString
{ 

    public static void main(String[] args) 
    { 
        String input = "Hello"; 
        StringBuilder input1 = new StringBuilder(); 
  
        // append a string into StringBuilder input1 
        input1.append(input); 
  
        // reverse StringBuilder input1 
        input1 = input1.reverse(); 
  
        // print reversed String 
        System.out.println(input1); 
    } 
}
Write a Java program to reverse a given string.


<html>
	<head>
		<title>Greeting Message</title>
	</head>
	<body>
		<h1>Hello, {{ username }}!</h1>
	</body>
</html>
Write an HTML template to display a greeting message. The message should include the name of the user who visits the website.
username = "John"

def list_to_string(input_list, separator):
    return separator.join(input_list)
Write a Python program to concatenate all elements in a list into a string separated by a given separator.
input_list = ["Python", "is", "a", "programming", "language"]
separator = "-"

#include <stdio.h>

int getSumOfDigits(int num) {
    // Initialize sum
    int sum = 0;

    // Find the sum of digits
    while(num > 0) {
        sum += num % 10;
        num /= 10;
    }

    return sum;
}

int main() {
    int num;
    scanf("%d", &num);

    printf("Sum of digits of %d is %d\n", num, getSumOfDigits(num));

    return 0;
}
Write a C program to find the sum of all digits of a given number


import java.util.Random; 
  
public class GenerateRandom { 
  
    public static void main(String[] args) 
    { 
  
        Random rand = new Random(); 
  
        // Generate random integers in range 0 to 999 
        int x = rand.nextInt(1000); 
        System.out.println("Random Integers: " + x); 
  
        // Generate Random doubles 
        double y = rand.nextDouble(); 
        System.out.println("Random Doubles: " + y); 
  
        // Generate Random Boolean 
        boolean z = rand.nextBoolean(); 
        System.out.println("Random Boolean: " + z); 
    } 
}
Write a Java program to generate random numbers


for i in range(11):
    print(i)
Rewrite the following Python code using a for-loop.
i = 0
while i <= 10:
    print(i)
    i += 1

from datetime import datetime

date_time_obj = datetime.now()

print(date_time_obj.isoformat()) # prints "2020-07-29T15:10:01.584131"
Write a code to print the current date and time in ISO format.


import os

# create 'data' folder in the current working directory
current_directory = os.getcwd()
new_directory = os.path.join(current_directory, 'data')
os.mkdir(new_directory)
Create a new folder called 'data' within the current working directory.


# sorting array using insertion sort
arr = [10, 2, 7, 8, 32, 4] 

# traverse through all array elements 
for i in range(1, len(arr)):
    key = arr[i]

    # move elements of arr[0..i-1], that are greater than key,
    # to one position ahead of their current position
    j = i-1
    while j >= 0 and key < arr[j] : 
            arr[j + 1] = arr[j] 
            j -= 1
    arr[j + 1] = key
  
#print the sorted array
print(arr)
Write a code to sort the following array in increasing order.
[10, 2, 7, 8, 32, 4]

function findMax(arr) {
    let max = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}
Create a function in JavaScript that takes an array of integers and returns the largest number.


# Regular expression to validate a URL string
^(http:\/\/|https:\/\/|ftp:\/\/)?(www\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\.)+[\w]{2,5}(\/\S*)?$
Create a regular expression to validate a URL string.


# calculate the mean of given array
arr = [1,2,3,4]

def calc_mean(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum / len(arr)

print(calc_mean(arr)) # prints 2.5
Write a Python code to calculate the mean of a given array.
[1,2,3,4]

public static void reverseString(String str) { 
    StringBuilder sb = new StringBuilder(); 
  
    for (int i = str.length() - 1; i >= 0; i--) { 
        sb.append(str.charAt(i)); 
    } 
  
    System.out.print(sb.toString()); 
}
Create a function in Java that takes a string and prints the reversed version.


from datetime import datetime

def time_difference(date1, date2):
    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')
    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')

    return (date2_obj - date1_obj).total_seconds() // 3600

print(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00')) # prints 33.0
Write a code to get the time difference between two date-time objects.
date1: 2019-05-11 21:00:00
date2: 2019-05-13 10:00:00

import psycopg2

conn = psycopg2.connect(host="100.10.0.10", database="mydb", user="john", password="john123")
Write a code to connect to a remote database.
username: john
password: john123
IP: 100.10.0.10

<form>
  <input type="text" id="textbox">
  <input type="submit" value="Submit">
  <input type="radio" name="choice" value="yes">Yes
  <input type="radio" name="choice" value="no">No
</form>
Create an HTML form with a textbox, a submit button, and two radio buttons.


# defining the Node class
class Node: 
	def __init__(self, data): 
		self.data = data 
		self.next = None

def getNthElement(head, n): 
	current = head 
	count = 0

	# looping through the linked list
	while(current is not None): 
		if (count == n): 
			return current.data 
		count += 1
		current = current.next
	return -1
Write a code to access the nth element of a linked list.


function findOccurrences(word, letter) {
    let count = 0;
    for (let i = 0; i < word.length; i++) {
        if (word.charAt(i) === letter) {
            count++;
        }
    }
    return count;
}
Create a function in JavaScript to find the number of occurrences of a letter in a word.
word: hello
letter: l

# adding two linked lists
class Node: 
	def __init__(self, data): 
		self.data = data 
		self.next = None

def addTwoLists(first, second):
    # defining current and prev variables
    prev = None
    carry = 0
    temp = None

    # looping until one list has all nodes added
    while(first is not None or second is not None): 
        Node = Node() 		# Node data

        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) 
		
        # update carry
        if Node.data >= 10: 
            Node.data = Node.data % 10
            carry = 1
        else: 
            carry = 0
 
        temp = Node
        # Move first, second pointers ahead
        if first is not None: 
            first = first.next
        if second is not None: 
            second = second.next

        # Attach the previous node to the current node
        if prev is not None: 
            prev.next = Node 
        prev = Node
		
    if carry > 0: 
        temp.next = Node 
        temp.data = carry 
    return result
Write a code to add two linked lists of different sizes.
list1 = [2->4->3]
list2 = [5->6->4->1]

public static String[][] convertTo2DArray(List<String> strings) {
    int n = strings.size();
    String[][] array = new String[n][1];
    for (int i = 0; i < n; i++) {
        array[i][0] = strings.get(i);
    }
    return array;
    
}
Create a function in Java to convert a list of strings to a 2D array.
list: ["aa", "bb", "cc"]

num = 5
sum = 0
for i in range(1, num+1):
  sum += i
Modify the code below to make it calculate the sum of all the numbers from 1 to n.
num = 5
sum = 0
for i in range(num):
  sum += i

import matplotlib.pyplot as plt

values = [3, 4, 2, 5, 8, 1, 2, 6]

plt.hist(values, bins= 10, edgecolor='black', color='b')

plt.xlabel('Values')
plt.ylabel('Frequency')

plt.title('Histogram')

plt.show()
Create a program to generate a histogram using data from a set of numbers.
values = [3, 4, 2, 5, 8, 1, 2, 6]

def celsius_to_fahrenheit(c):
    f = c * (9/5) + 32
    return f
Create a function to convert Celsius to Fahrenheit.


def count_occurrences(arr, element):
    count = 0
    for e in arr:
        if e == element:
            count += 1
    return count

print(count_occurrences(arr, 40)) # Outputs: 3
Write a function to find the number of occurrences of an element in a list.
arr = [10, 20, 10, 40, 40, 40, 50]

for (let i = 1; i <= 10; i++) {
  console.log(i);
}
Write a JavaScript code snippet to print the numbers from 1 to 10.


import random

d = dict()

keys = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]

for key in keys:
    d[key] =  random.randint(1,100)

print(d)
Generate a dictionary of 10 key-value pairs, where the key is a string and the values are random numbers from 1 to 100.


function mostFrequentChar(string) {
    let charMap = {};
    let maxCount = 0;
    let freqChar = '';
  
    for (let char of string) {
        if (charMap[char]) {
            charMap[char]++;
        } else {
            charMap[char] = 1;
        }
    }
  
    for (let char in charMap) {
        if (charMap[char] > maxCount) {
            maxCount = charMap[char];
            freqChar = char;
        }
    }
  
    return freqChar;
}
Create a JavaScript function which takes a string as a parameter and returns the most frequent character in the string.
'Hello World!'

string ConcatenateStrings(string str1, string str2)
{
   return str1 + str2;
}
Write a C# function which takes 2 strings as parameters and returns a new string which is a concatenation of the two parameters.
'Hello', 'World!'

<!DOCTYPE html>
<html>
   <head>
      <title>RandomBackground</title>
      <script>
         window.addEventListener("load",function(){
            var randomColor = "#"+((1<<24)*Math.random()|0).toString(16);
            document.querySelector("body").style.background = randomColor;
         });
      </script>
   </head>
   <body>
   </body>
</html>
Create an HTML page where the main content area has a random background color when the page is loaded.


public int[] SortIntegerArray(int[] nums)
{
    Arrays.sort(nums);
    return nums;
}
Create a Java program which takes an integer array as a parameter, sorts the array in ascending order, and returns the sorted array.
[3, 5, 9, 1, 6]

SELECT department, COUNT(employee_ID)
FROM employees
GROUP BY department
ORDER BY department ASC;
Write an SQL query to select the number of employees in each department, sorted by the department name in ascending order.


def remove_value(nums, val):
    res = []
    for num in nums:
        if num != val:
            res.append(num)
    return res
Write a Python program to remove all instances of a given value from a given list.
[1, 2, 3, 2, 3, 4], 2

public String ReplaceLetters(String str, char oldChar, char newChar) {
    return str.replace(oldChar, newChar);
}
Create a Java program to take a given string and replace all occurrences of a given letter with another given letter
'bbac', 'b', 'a'

SELECT ROUND(AVG(salary))
FROM employees;
Write an SQL query to calculate the average salary of all employees in a table, rounded to the nearest integer.


function capitalizeSentence(str) {
    let words = str.split(' ');
    let res = [];
  
    for (let word of words) {
        res.push(word[0].toUpperCase() + word.slice(1));
    }
  
    return res.join(' ');
}
Create a JavaScript function that takes a given sentence as a parameter and capitalizes the first letter of each word.
'hello world'

def generate_fibonacci_numbers(n):
   if n==1:
       return [0]
   elif n==2:
       return [0,1]
   else:
       fib_list = [0,1]
       for i in range(2,n):
           fib_list.append(fib_list[i-1]+fib_list[i-2])
       return fib_list
Write a Python program to generate the first n Fibonacci numbers.


bool AreAnagrams(string s1, string s2)
{
    if (s1.Length != s2.Length)
        return false;
 
    int[] a = new int[256];
    int n = s1.Length;
    for (int i = 0; i < n; i++)
    {
        int c1 = (int)s1[i];
        int c2 = (int)s2[i];
 
        a[c1]++;
        a[c2]--;
    }
 
    for (int i = 0; i < 256; i++)
    {
        if (a[i] != 0)
            return false;
    }
 
    return true;
}
Create a C# program which takes two strings as parameters, and returns true if the two strings are anagrams of each other.
'listen', 'silent'

SELECT SUM(CASE WHEN gender = 'female' THEN salary ELSE 0 END) - SUM(CASE WHEN gender = 'male' THEN salary ELSE 0 END)
FROM employees;
Write an SQL query to calculate the difference between the total salaries of male and female employees in a table.


function reverseArrayInPlace(nums) {
    let left = 0;
    let right = nums.length - 1;
  
    while (left < right) {
        let temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
  
        left++;
        right--;
    }
    return nums;
}
Create a JavaScript program which takes an array of integers as a parameter and reverses the array in-place.
[3, 5, 9, 1, 6]

This line of code assigns the remainder of a divided by b to a, so that the resulting value of a is the remainder of a divided by b. For example, if a is 10 and b is 3, the value of a after executing this line of code would be 1 (the remainder of 10 divided by 3).
Explain what the following line of code does.
a %= b

if n % 2 == 0:
    return 'even'
else:
    return 'odd'
Construct an if-else statement that returns ‘even’ if the given number is even and ‘odd’ if the given number is odd.


[5, 8, 9, 8, 5]
Multiply two vectors of size 5 and return the output.
a = [1, 2, 3, 4, 5] 
b = [5, 4, 3, 2, 1]

[x*2 for x in list_one]
Create a list comprehension that takes all the elements of list_one and creates a new list where all the elements are doubled.
list_one = [1, 2, 3, 4, 5]

def transpose(matrix):
    m = len(matrix)
    n = len(matrix[0])

    transpose_matrix = [[0] * m for _ in range(n)]
    for i in range(m):
        for j in range(n):
            transpose_matrix[j][i] = matrix[i][j]

    return transpose_matrix
You are given a matrix of m rows and n columns. Write a function that calculates the transpose of the given matrix.
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

difference = max(list_of_numbers) - min(list_of_numbers)
print(difference)
Given a list of numbers, print the difference between the largest and the smallest number.
list_of_numbers = [10, 7, 5, 12, 4]

for word in list_of_words:
    if word == "example":
        print("success")
    else:
        print("failure")
Create a for loop that goes through every element of list_of_words and prints ‘success’ if an element is equal to “example” and prints ‘failure’ in any other case.
list_of_words = ["hello", "example", "world"]

def average_temperature(temperatures):
    num_items = len(temperatures)
    sum_items = 0
    for temperature in temperatures:
        sum_items += temperature
    return sum_items / num_items
Create a function that takes in a list of temperatures and returns the average temperature
list_of_temperatures = [20, 24, 26, 18]

def remove_duplicates(numbers):
    new_list = []
    for num in numbers:
        if num not in new_list:
            new_list.append(num)
    return new_list
You are given a list of numbers. Create a function that returns a new list with duplicates removed
list_of_numbers = [3, 6, 5, 5, 7, 6, 3]

def longest_consecutive(string):
    character_list = []
    max_length = 0
    max_sequence = ''
    for char in string:
        if char in character_list:
            continue
        else:
            character_list.append(char)
            current_length = 1
            for i in range(1, len(string)):
                if string[i-1] == char and string[i] == char:
                    current_length += 1
            if current_length>max_length:
                max_length = current_length
                max_sequence = char*max_length
    return max_sequence
In a given string, create a function that returns the longest consecutive sequence of characters.
my_string = “abccdeefghj"

def count_vowels(string):
    vowels = ["a", "e", "i", "o", "u"]
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count
Create a function that takes in a string and counts the number of vowels in it


def long_words(string):
    words = string.split()
    long_words_list = []
    for word in words:
        if len(word) > 5:
            long_words_list.append(word)
    return long_words_list
Write a function that takes in a string and returns a list of all the words that have more than 5 characters


import string

def replace_punctuation(string):
    for char in string:
        if char in string.punctuation:
            string = string.replace(char, " ")
    return string
Create a function that takes in a string and replaces all punctuation with a space


def is_positive_number(numbers):
    for num in numbers:
        if num > 0:
            return True
    return False
Create a function that takes in a list of numbers and returns true if the list contains at least one positive number
list_of_numbers = [-2, -5, 0, 3]

public class Fibonacci { 
  
    public static void FibonacciN(int n) { 
        int i, f=0, s=1; 
  
        if (n == 1) 
            System.out.print(f+ " "); 
  
        else { 
            System.out.print(f+" "+s+" "); 
  
            for (i = 2; i < n; i++) { 
                int next = f + s; 
                System.out.print(next+" "); 
                f= s; 
                s = next; 
            } 
        } 
    } 
}
Write code in Java to generate the Fibonacci sequence up to N numbers.
N = 10

// Algorithm to find the largest element in an array

// Step 1: Create a variable 'max' and initialize it with value of the first element in the array
int max = arr[0];

// Step 2: Iterate through the array and compare each element with 'max'
for (int i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
        max = arr[i];
    }
}

// Step 3: Return the value of 'max'
return max;
Write an algorithm to find the largest element in an array.
[8, 11, 12, 5, 3]

public static void sortAscending(int[] arr) {
    for(int i = 0; i < arr.length - 1; i++) {
        int min = i;
        for (int j = i + 1; j < arr.length; j++) {
            if (arr[j] < arr[min]) {
                min = j;
            }
        }
        int tmp = arr[i];
        arr[i] = arr[min];
        arr[min] = tmp;
    }
}
Write code in Java to sort an array of integers in ascending order.
[5, 2, 8, 10, 4, 9]

<button>My Button</button>
Create a new button using HTML.


ALTER TABLE Employees
ADD COLUMN age INT;
Write a SQL query to add a new column "age" in the employees table.


def remove_duplicates(list): 
      
    unique_list = [] 
      
    for x in list: 
        if x not in unique_list: 
            unique_list.append(x) 
    return unique_list 
  
list = [2, 3, 2, 4, 5, 5, 6] 
print ("Original List: ", list) 
print ("Unique List: ", remove_duplicates(list)) 

Output: 
Original List: [2, 3, 2, 4, 5, 5, 6]
Unique List: [2, 3, 4, 5, 6]
Design a function in Python to delete duplicates from a list.
The list is: [2, 3, 2, 4, 5, 5, 6]

// Algorithm to calculate the sum of all the elements in an array

// Step 1: Initialize a variable 'sum' and set it equal to 0
int sum = 0;

// Step 2: Iterate through the array and add each element to 'sum'
for (int i = 0; i < arr.length; i++) {
    sum += arr[i];
}

// Step 3: Return the value of sum
return sum;
Implement an algorithm to find the sum of all the elements in an array.
The array is: [3, 5, 8, 10, 4]

SELECT name, job, salary 
FROM employees;
Write a MySQL query to display the name, job and salary of all employees.


int  result = 123 + 456;
Console.WriteLine(result); //Output: 579
Find the sum of two numbers using C#.
The two numbers are: 123 and 456

<html>
   <head>
      <title>Div Example</title>
   </head>
   <body>
      <div>Hello, welcome to my website!</div>
   </body>
</html>
Create a web page using HTML and CSS that displays a div with some text.


function capitalizeFirstLetter(str) {
    return str.replace(/\w\S*/g, function(txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
}
capitalizeFirstLetter('This is an example');
Write a JavaScript function to capitalize the first letter of each word in a string.
String: "This is an example".

my_list = [1, 2, 3, 4, 5, 6]
for item in my_list:
    print(item)
Write a Python program to loop through all the items in a given list.
List: [1, 2, 3, 4, 5, 6]

SELECT name, address FROM Employee
Write a SQL query to select the name and address from a given table.
Table: Employee

@keyframes rotate {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}
Create a new CSS animation rule to rotate an object a full circle.


BEGIN
  FOR i IN 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE(i);
  END LOOP;
END;
Write a PL/SQL program to print out all numbers from 1 to 10.


let array = [1, 2, 3, 4, 5];
array.pop(); // remove the last element
console.log(array); // [1, 2, 3, 4]
Write a JavaScript code snippet to remove the last element from an array.
Array: [1, 2, 3, 4, 5]

19 (10011 = 2^4 + 2^3 + 2^1 = 16 + 8 + 1 = 25)
Convert the following binary number to a decimal number.
Binary Number: 10011

public static int addIntegers(int a, int b) {
    int sum = a + b;
    return sum;
}

public static void main(String[] args) {
    int x = 4, y = 9;
    int sum = addIntegers(x, y);
    System.out.println("Sum is: "+sum);
}
Write a Java program to calculate the sum of the two given integers.
Integers: 4 and 9

The largest prime factor of 885 is 5.
What is the largest prime factor of the number 885?


def product(a, b):
    return a*b
Create a function in Python which takes two parameters and returns their product.


for i in range(1, 11):
    print(i)
Construct a for loop that prints out the numbers from 1 to 10


<form> 
    First Name:<br> 
    <input type="text" name="firstName"><br> 
    Last Name:<br> 
    <input type="text" name="lastName"><br> 
    Age:<br> 
    <input type="number" name="age"><br><br> 
    <input type="submit" value="Submit"> 
</form>
Create an HTML form with three input fields: firstName, lastName and age.


public boolean isSubstring(String s1, String s2) 
{ 
    int M = s1.length(); 
    int N = s2.length(); 
  
    for (int i = 0; i <= N - M; i++) { 
        int j; 
  
        for (j = 0; j < M; j++) 
            if (s2.charAt(i + j) != s1.charAt(j)) 
                break; 
  
        if (j == M) 
            return true; 
    } 
  
    return false; 
}
Write a function in Java that takes two strings as parameters and returns true if the first string is a substring of the second.


int count = 0; 
int i = 0; 
while(i < 100)
{
     if(i % 3 == 0)
          count++; 
     i++;
}
Construct a while loop that increments a counter every time a number is divisible by 3.


\b[abc]+\w*\b
Create a Regular Expression pattern to find words that contain the letters "a", "b", and "c".


class Person:
    # Constructor 
    def __init__(self, name, age): 
         
        # instance attributes 
        self.name = name 
        self.age = age 
  
    # instance method 
    def greeting(self): 
        print("My name is", self.name) 
  
# construct an object 
person1 = Person("John", 36) 
  
# call a method of the object 
person1.greeting()
Create a class in Python to represent a Person.


"""
Write a code to check whether the input string is a palindrome or not
"""

def check_palindrome(input_string):
    rev_str = input_string[::-1]
 
    # Checking if both string are equal or not
    if rev_str == input_string:
        return True
    return False
  
# main function
if __name__ == "__main__":
    str = "a man a plan a canal panama"
    if check_palindrome(str):
        print("String is Palindrome")
    else:
        print("String is not Palindrome")
Write a code to check whether the input string is a palindrome or not.
a man a plan a canal panama

"""
Write a code to remove the duplicates from a given list
"""

# List containing the elements
mylist = [1,2,3,1,2]

# Creating a new list with unique elements
unique_list = list(set(mylist))

# Printing the new list
print("New list with unique elements is {}".format(unique_list))
Write a code to remove the duplicates from a given list.
mylist = [1,2,3,1,2]

"""
Create a dictionary containing the key-value pair of a given string
"""

# Given string
string = "test string"

# Initialising an empty dictionary
my_dict = {}

# Looping through the given string
for char in string:
    # If the character is not already in dictionary
    if char not in my_dict:
        # Adding the character to the dictionary
        my_dict[char] = 1
    # If the character already exists in dictionary
    else:
        # Incrementing the frequency
        my_dict[char] += 1
        
# Printing the dictionary
print(my_dict)
Create a dictionary containing the key-value pair of a given string.
string = "test string"

"""
Write a code to generate a random number between 1 to 10
"""

import random

# Generate random number between 1 to 10 
random_number = random.randint(1,10)

# Printing the random number
print(random_number)
Write a code to generate a random number between 1 to 10.


"""
Write a code to create a 3 x 3 matrix containing all 0s
"""

# Creating an empty 3 x 3 matrix
matrix = [[0 for x in range(3)] for y in range(3)] 
  
# Printing the matrix
print(matrix)
Write a code to create a 3 x 3 matrix containing all 0s.


"""
Write a code to check whether two strings are anagrams or not
"""

# Strings to be checked
first = "listen"
second = "silent"

# Sorting the strings
first_sorted = "".join(sorted(first))
second_sorted = "".join(sorted(second))

# Checking if both sorted strings are equal or not
if first_sorted == second_sorted:
    print("Strings are Anagrams")
else:
    print("Strings are not Anagrams")
Write a code to check whether two strings are anagrams or not.
first = "listen"
second = "silent"

"""
Write a code to delete all the vowels from a given string
"""

# Given string
string = "hello world"

# Removing all the vowels from the string
no_vowels = "".join([letter for letter in string if letter not in "aeiouAEIOU"])

# Printing the new string
print("String without vowels is", no_vowels)
Write a code to delete all the vowels from a given string.
string = "hello world"

"""
Write a code to convert a given list of strings to uppercase
"""

# List containing the strings
mylist = ["hello","world"]

# Converting the list of strings to uppercase
upper_list = [string.upper() for string in mylist]
 
# Printing the new list
print("List with strings in uppercase is", upper_list)
Write a code to convert a given list of strings to uppercase.
mylist = ["hello","world"]

"""
Write a code to find the maximum in a given list of integers
"""

# List containing the elements
mylist = [1,2,3,4,5]

# Finding the maximum element
max = mylist[0]

# Looping through each element to find if it is the maximum
for i in range(1,len(mylist)):
    # Comparing the element with the maximum
    if mylist[i] > max:
        max = mylist[i]

# Printing the maximum element
print("Maximum element of the list is", max)
Write a code to find the maximum in a given list of integers.
mylist = [1,2,3,4,5]

"""
Write a code to generate the multiplication table of a given integer
"""

# Number for which multiplication table will be generated
x = 5

# Generating the multiplication table
for i in range(1,11):
    # Printing each row of the table
    print("{} x {} = {}".format(x,i,x*i))
Write a code to generate the multiplication table of a given integer.
x = 5

"""
Write a code to merge two given lists of equal size
"""

# Given lists
list1 = [1,2,3]
list2 = [4,5,6]

# Initialising an empty list
merged_list = []

# Merging the lists
for i in range(len(list1)):
    merged_list.append(list1[i])
    merged_list.append(list2[i])

# Printing the merged list
print("Merged list is", merged_list)
Write a code to merge two given lists of equal size.
list1 = [1,2,3]
list2 = [4,5,6]

"""
Write a code to compute the mean of an input list of numbers
"""

# List containing the elements
mylist = [1,2,3,4,5]

# Computing the sum and number of elements
sum = 0
num_elements = len(mylist)

# Looping through each element
for i in mylist:
    sum += i

# Computing the mean
mean = sum/num_elements

# Printing the mean
print("Mean of the list is", mean)
Write a code to compute the mean of an input list of numbers.
mylist = [1,2,3,4,5]

"""
Create a program to convert the input sentence to Pig Latin.
"""

def pig_latin(sentence):
    words = sentence.split()
    new_words = []
    for word in words:
        if word[0] in 'aeiou':
            new_words.append(word + 'ay')
        else:
            new_words.append(word[1:] + word[0] + 'ay')
    return ' '.join(new_words)

if __name__ == '__main__':
    print(pig_latin('I am a computer programmer'))
Create a program to convert the input sentence to Pig Latin.
I am a computer programmer

"""
Create a program to write an overwriting if-else logic for the following switch statement
"""

def switch_to_if_else(a):
  if a == 1:
    func1()
  elif a == 2:
    func2()

if __name__ == '__main__':
    switch_to_if_else(a)
Create a program to write an overwriting if-else logic for the following switch statement
switch(a) {
  case 1: 
    func1();
    break;
  case 2: 
    func2();
    break;
}

"""
Write a function that sorts the given list of numbers in descending order
"""

def sort_list_descending(numbers):
    numbers.sort(reverse = True)
    return numbers

if __name__ == '__main__':
    print(sort_list_descending([1, 2, 3, 5, 8, 10]))
Write a function that sorts the given list of numbers in descending order
[1, 2, 3, 5, 8, 10]

"""
Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3
"""

def divisible_by_three():
    divisible_by_three_list = []
    for i in range(1, 11):
        if i % 3 == 0:
            divisible_by_three_list.append(i)
    return divisible_by_three_list

if __name__ == '__main__':
    print(divisible_by_three())
Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3


"""
Rewrite the following for-loop as a while-loop
"""

i = 0
while i < 5:
    print(i)
    i += 1
rewrite the following for-loop as a while-loop
for i in range(0, 5):
    print(i)

"""
Create a program to compute the checksum of a given data packet
"""

def compute_checksum(data_packet):
    checksum = 0
    for x in data_packet:
        checksum += x
    return checksum

if __name__ == '__main__':
    data_packet = [0xff, 0x0a, 0x1b, 0x3f]
    print(compute_checksum(data_packet))
Create a program to compute the checksum of a given data packet
data_packet = [0xff, 0x0a, 0x1b, 0x3f]

"""
Create a program to parse a given string and return a dictionary with all the words and their frequency
"""

def parse_string(string):
    words = string.split()
    word_dict = {}
    for word in words:
        if word in word_dict:
            word_dict[word] += 1
        else:
            word_dict[word] = 1
    return word_dict

if __name__ == '__main__':
    print(parse_string("this is a practice string to learn the parsing of strings"))
Create a program to parse a given string and return a dictionary with all the words and their frequency
"this is a practice string to learn the parsing of strings"

"""
Create a program to classify whether the given number is even or odd
"""

def even_or_odd(number: int) -> str:
    if number % 2 == 0:
        return 'even'
    else:
        return 'odd'

if __name__ == '__main__':
    print(even_or_odd(5))
Create a program to classify whether the given number is even or odd
5

"""
Create a program to generate the sum of all the elements in a given list
"""

def sum_list(nums):
    total = 0
    for num in nums:
        total += num
    return total

if __name__ == '__main__':
    print(sum_list([1, 2, 3, 4, 5]))
Create a program to generate the sum of all the elements in a given list
[1, 2, 3, 4, 5]

"""
Create a program to find all the factors of a given number 
"""

def find_factors(num):
    factors = []
    for i in range(1, num+1):
        if num % i == 0:
            factors.append(i)
    return factors

if __name__ == '__main__':
    print(find_factors(24))
Create a program to find all the factors of a given number
24

"""
Create a program to check if a given string is a palindrome
"""

def is_palindrome(string):
    n = len(string)
    for i in range(n // 2):
        if string[i] != string[n-i-1]:
            return False
    return True

if __name__ == '__main__':
    print(is_palindrome("racecar"))
Create a program to check if a given string is a palindrome
"racecar"

"""
Create a program to generate all possible pairs of a given list of numbers
"""

def generate_pairs(nums):
    pairs = []
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            pairs.append((nums[i], nums[j]))
    return pairs

if __name__ == '__main__':
    print(generate_pairs([1, 2, 3]))
Create a program to generate all possible pairs of a given list of numbers
[1, 2, 3]

"""
Create a program that extracts a given pattern from a given string
"""

def extract_pattern(text, pattern):
    result = []
    for i in range(len(text)):
        if text[i] == pattern:
            result.append(i)
    return result

if __name__ == '__main__':
    text = "Hello world!"
    pattern = "l"
    print(extract_pattern(text, pattern))
Create a program that extracts a given pattern from a given string
text = "Hello world!", pattern = "l"

string = "Hello @# World"
Write a Python program to split special characters with a given string.
string = "Hello@#World"

regex = r"(C|D|E){3}"
Create a regex to match the characters "CDE" in any order.


words = ["How", "are", "you", "doing", "today"]
Convert the following string to a list of strings.
words = "How are you doing today"

arr = [[1,1,1,1,1],
       [1,1,1,1,1],
       [1,1,1,1,1],
       [1,1,1,1,1],
       [1,1,1,1,1]]
Generate a 5x5 array with all its elements equal to 1.


index = 4
Given a list of numbers, find the index of the greatest value.
lst = [3, 5, 6, 8, 9]

Negative sentiment.
Classify the following sentence as positive or negative sentiment.
This is the worst experience ever.

<!DOCTYPE html>
<html>
    <head>
        <title>My First Web Page</title>
    </head>
    <body>
        <div class="main">
            <h1 align="center">My First Web Page</h1>
            <p align="center">This is my first web page. It is an amazing experience!</p>
        </div>
    </body>
</html>
Create a web page with a centered title and paragraph in HTML.
title = "My First Web Page"
paragraph = "This is my first web page. It is an amazing experience!"

function findShortestWord(sentence) { 
    let words = sentence.split(" "); 
    let shortestWord = words[0]; 
  
    for (let i = 0; i < words.length; i++) { 
        if (words[i].length < shortestWord.length) 
            shortestWord = words[i]; 
    } 
  
    return shortestWord; 
}
Create a JavaScript function that finds the shortest word in a string.
sentence = "I'm so excited to begin this journey"

Total number of elements = 4
Find the total number of elements in the following array.
my_array = [[1,2], 3, 4]

SELECT c.name
FROM customers c, orders o
WHERE o.customer_id = c.id
Write a SQL query to find the names of customers who have ordered products.


Question.
Classify the following sentence as a question or a statement.
Have you ever tried eating a brussel sprout?

if (num % 3 == 0):
    print("The number is divisible by 3")
else:
    print("The number is not divisible by 3")
Write a Python program that tests if a given number is divisible by 3.
num = 51

for i in range(1,51):
    if i % 2 != 0:
        print(i)
Edit the following code so it outputs the odd numbers between 1 and 50.
for i in range(1,51):
    print(i)

def anagram(str1, str2): 

    # Get lenghts of both strings 
    n1 = len(str1) 
    n2 = len(str2) 
  
    # If lengths are not same, then strings   
    # are not anagrams 
    if n1 != n2:
        return False
    str1 = ''.join(sorted(str1))
    str2 = ''.join(sorted(str2))
    # Comparing sorted strings 
    for i in range(0, n1): 
        if str1[i] != str2[i]: 
            return False

    return True

print(anagram(str1, str2))
Write a function to compare two strings and return True if they are anagrams.
str1 = 'silent'
str2 = 'listen'

def sum_square_even(lst):
    result = 0
    for num in lst:
        if (num % 2 == 0):
            result += num ** 2
    return result

print(sum_square_even(lst))
Write a function that takes a list of integers as inputs and returns the sum of the square of all the even numbers.
lst = [2, 8, 9, 5, 3, 10]

string = "Hello World!"
string = string.replace("!", "?")
print(string)
Using the input string, write a code to replace the "!" with a "?".
string = "Hello World!"

def alternate_char(str1, str2):
    # get the length of string
    n = len(str1)

    # initialize the output string
    output_str = ''

    # generate the output string
    for i in range(n):
        output_str += str1[i] + str2[i]
    
    return output_str

print(alternate_char(str1, str2))
Write a code to take two string inputs and generate the output string containing alternate characters from each string.
str1 = 'abc'
str2 = '123'

# initial max length
max_length = 0
# empty string to store the max length string
max_str = ''

# iterate through the list
for string in lst:
    # get the length
    length = len(string)
    # update the max length
    if length > max_length:
        # get the string
        max_str = string
        # update max length
        max_length = len(string)

print(max_str)
Given a list of strings, write a code to find the longest string.
lst = ['one', 'two', 'three', 'four', 'five']

SELECT SUM(amount)
FROM orders
WHERE status = 'completed';
Write a SQL query to get the total amount from orders table where status is "complete".


def mean(lst):
    # calculate the sum
    total = 0
    for item in lst:
        total += item
    
    # calculate the mean
    mean = total / len(lst)
    return mean

print(mean(lst))
Write a function to get the mean of the given list of numbers.
lst = [1, 4, 5, 9, 3]

from django.db import models

class BlogPost(models.Model):
    # post title
    title = models.CharField(max_length = 200)
    # post status (draft / published)
    status = models.CharField(max_length = 20)
    # post publish date
    published = models.DateTimeField(auto_now_add = True)
Write a Django Model API to store status and published date for a blog post.


def find_common(list1, list2):
    # initial list to store common elements
    result = []

    # iterate through the list
    for num in list1:
        # check if the number is in list2
        if num in list2:
            # append the element
            result.append(num)

    return result
    
print(find_common(list1, list2))
Write a code to compare two lists and find the common elements.
list1 = [3, 6, 9, 12]
list2 = [2, 4, 5, 6, 8, 9]

def check_value(arr, value):
    for item in arr:
        if item == value:
            return True
    return False
Write an algorithm to check if an array contains a given value
arr = [1, 7, 5, 8, 44]
value = 5

public static void printPrimeNumbers(int n) 
    { 
        int num; 
        int count=0;
        for (int i = 2; i <= n;) 
        { 
            num=0; 
            for (int j = 2; j <= i / 2; j++)  
            { 
                if (i % j == 0) 
                { 
                    num++; 
                    break; 
                } 
            } 
            if (num == 0) 
            { 
                System.out.print(i+" "); 
                count++; 
            } 
            i++; 
        } 
    }
Write a Java program to print out the first n prime numbers


SELECT e.name 
FROM employee e 
JOIN department d ON e.departmentid = d.id 
WHERE d.name = 'given department'
Write a SQL query to find the names of all employees working at a given department


def are_anagrams(str1, str2):
    if len(str1) != len(str2):
        return False

    freq1 = {}
    freq2 = {}

    for char in str1:
        if char not in freq1:
            freq1[char] = 1
        else:
            freq1[char] += 1

    for char in str2:
        if char not in freq2:
            freq2[char] = 1
        else:
            freq2[char] += 1

    for key in freq1:
        if key not in freq2 or freq2[key] != freq1[key]:
            return False
    
    return True
Write a function to determine if two strings are anagrams of each other


function factorial(n){
    if (n == 0){
        return 1;
    }
    else{
        return n * factorial(n - 1);
    }
}
Write a JavaScript code to calculate the factorial of a number


int maxSubarraySum(int arr[], int n) { 
    int max_so_far = 0, max_ending_here = 0; 
  
    for (int i = 0; i < n; i++) { 
        max_ending_here = max_ending_here + arr[i]; 
        if (max_so_far < max_ending_here) 
            max_so_far = max_ending_here; 
  
        if (max_ending_here < 0) 
            max_ending_here = 0; 
    } 
    return max_so_far; 
}
Write C++ code to find the maximum subarray sum


def fibonacci(n):  
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b
Write an algorithm to generate the Fibonacci series up to the nth term


import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="",
  passwd="",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("SELECT * FROM customers WHERE phone > 1000")

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
Connect to a MySQL database and select all rows from Customers where Phone is greater than 1000.


def is_palindrome(string):
    rev = ''.join(reversed(string))
    if rev == string:
        return True
    else:
        return False
Write a function that checks if a string is a palindrome or not.
string = "ana"

array.sort()
Change the following array so that it orders in ascending order
array = [3, 7, 1, 8, 4]

A is an integer and B is a string.
Read a code and identify the data type of the variables a and b
a = 8
b = "Hello"

def calculator():
    number1 = int(input("Please enter first number: "))
    number2 = int(input("Please enter second number: "))
    print("Please choose operation -\n" \
          "1. Add\n" \
          "2. Subtract\n" \
          "3. Multiply\n" \
          "4. Divide\n") 

    choice = int(input("Enter your choice: "))
    if choice == 1:
        ans = number1 + number2
        print("Answer={}".format(ans))
    elif choice == 2:
        ans = number1 - number2
        print("Answer={}".format(ans))
    elif choice == 3:
        ans = number1 * number2
        print("Answer={}".format(ans))
    elif choice == 4:
        ans = number1 / number2
        print("Answer={}".format(ans))
    else:
        print("Invalid Choice")
Write a simple calculator program.


my_list = string.split('[')
my_list = [item.replace(']', '') for item in my_list]
my_list = [int(item) for item in my_list[1::2]]
Parse the string "Hello[1]World[4]123[3]" into a list.
string = "Hello[1]World[4]123[3]"

import json

json1 = json.loads(json1)
json2 = json.loads(json2)
merged_json = {**json1, **json2}
Read the following two JSON strings and merge them
json1 = {
    "name": "John",
    "age": 20
}

json2 = {
    "address": "123 Street"
}

mylist[:3]
Write a code to return the first 3 elements in a list.
mylist = [1,4,3,6,7,2,4]

mylist = [x for x in mylist if x % 3 == 0]
Change the following array so that it only contains numbers divisible by 3
mylist = [2, 4, 5, 6, 7, 11, 12, 22]

def remove_duplicates(mylist):
    return set(mylist)
Write a function to remove duplicate items in a list.
mylist = [2, 3, 3, 4, 5, 6, 4, 7]

The two function calls made are "my_function()" and "my_function2(2, 3)".
Read a code and find all the function calls that are made.
print('Hello world!')
my_function()
my_function2(2, 3)

mylist = [item for item in mylist if item != 3]
Write a code to delete all items from a list with a value of 3.
mylist = [2, 3, 3, 4, 5, 6, 4, 7]

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

mydoc = mycol.find({})

for x in mydoc:
  print(x)
Connect to a MongoDB database and select all documents from the collection ‘customers’.


arr = [x for x in arr if x % 2 == 0]
Create a new array that contains only the even numbers from a given array.
arr = [1, 2, 3, 4, 5, 6, 7, 8]

count = string.count(letter)
Find the number of times a letter appears in a string.
string = "Hello World"
letter = 'l'

for i in range(1, 101):
    print(i)
Create a for loop to print the numbers from 1 to 100.


O(n^2)
Estimate the time complexity of the following algorithm.
for i in range(n):
    for j in range(n):
        print(i + j)

key = max(d, key = d.get) 
val = d[key]
return (key, val)
Write a code snippet to return the item with the highest value in a given dictionary.
d = {'a':20, 'b':10, 'c':15}

intersect_arr = [] 
for i in arr1:
    if i in arr2:
        intersect_arr.append(i)
return intersect_arr
For the following two arrays, create a code snippet to return the intersecting element.
arr1 = [1, 9, 4, 10]
arr2 = [2, 4, 7, 8]

iden_matrix = numpy.identity(3) 
print(iden_matrix)
Using the numpy library, create a 3x3 Identity Matrix.


class Node: 
  
  # Function to initializaee the node object 
  def __init__(self, data): 
    self.data = data # Assign data 
    self.next = None # Initialize next as null
Create a Linked List Node with the data of type integer.


import random 
characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'
password = random.choices(characters, k = 16) 
print("".join(password))
Generate a unique and random password for a user using python.


def listDescendantLeaves(root):
    if not root: 
        return
    elif not root.left and not root.right: 
        print(root.val) 
    listDescendantLeaves(root.left) 
    listDescendantLeaves(root.right)
Given a binary tree, write a code snippet to list all of its descendant leafs.


def remove_duplicates(string): 
    new_string = "" 
    for char in string:
        if char not in new_string:
            new_string += char 
    return new_string
Given a string, write a function to remove all the duplicate characters.
string = "apple"

"""
Classify the following sentence using a sentiment analysis model.
Sentence: The movie is awesome.
"""

from textblob import TextBlob

sentence = "The movie is awesome."

# convert the sentence to a TextBlob object
blob = TextBlob(sentence)

# get the sentiment
sentiment = blob.sentiment

if sentiment.polarity > 0:  # positive sentiment
    print("This sentence is classified as Positive.")
elif sentiment.polarity == 0:  # neutral sentiment
    print("This sentence is classified as Neutral.")
else:  # negative sentiment
    print("This sentence is classified as Negative.")
classify the following sentence using a sentiment analysis model.
The movie is awesome.

"""
Convert all words in a sentence to camelCase

Input: The quick brown fox jumps over the lazy dog

Output: theQuickBrownFoxJumpsOverTheLazyDog
"""

def toCamelCase(sentence):
    words = sentence.split(" ")
    result = ""
    for index, word in enumerate(words):
        if index > 0:
            small_word = word.capitalize()
            result += small_word
        else:
            result += word
    return result

sentence = "The quick brown fox jumps over the lazy dog"
print(toCamelCase(sentence))
convert all words in a sentence to camelCase
The quick brown fox jumps over the lazy dog

def get_average(numbers):
    """
    Calculate and return the average of a list of numbers
    :param numbers: the list of numbers
    :return: the average of the numbers
    """
    total = 0
    for number in numbers:
        total += number
    return total / len(numbers)
Write a function to calculate the average score of a list of numbers.


def find_longest_string(strings):
    """
    Find and return the longest string in a list of strings.
    :param strings: the list of strings
    :return: the longest string
    """
    longest = ""
    for string in strings:
        if len(string) > len(longest):
            longest = string
    return longest
Write a function to find the longest string in a list of strings.


def get_last_two_words(string):
    """
    Extract and return the last two words from a string of words
    :param string: the input string
    :return: the last two words
    """
    words = string.split(" ")
    return words[-2:]
Implement a function to extract the last two words from a string of words


def find_intersection(list1, list2):
    """
    Find the intersection of two sorted lists
    :param list1: the first sorted list
    :param list2: the second sorted list
    :return: a list with elements found in both lists
    """
    intersection = []
    p1 = p2 = 0
    while p1 < len(list1) and p2 < len(list2):
        if list1[p1] == list2[p2]:
            intersection.append(list1[p1])
            p1 += 1
            p2 += 1
        elif list1[p1] < list2[p2]:
            p1 += 1
        else:
            p2 += 1
    return intersection

list1 = [1, 3, 4, 6]
list2 = [1, 2, 5, 6]
print(find_intersection(list1, list2))
Write code to find the intersection of two sorted lists
list1 = [1, 3, 4, 6]
list2 = [1, 2, 5, 6]

def flatten_list(list):
    """
    Flatten a nested list
    :param list: the nested list to flatten
    :return: a flattened list
    """
    flattened_list = []
    for item in list:
        if isinstance(item, list):
            flattened_list.extend(flatten_list(item))
        else:
            flattened_list.append(item)
    return flattened_list
Write code to flatten a nested list


def remove_element(list, element):
    """
    Remove all occurrences of a given element from a list
    :param list: the list
    :param element: the element to remove
    :return: the filtered list
    """
    filtered_list = [item for item in list if item != element]
    return filtered_list
Write code to remove all occurrences of a given element from a list


"""
Generate pseudocode for a matrix multiplication algorithm.
"""

# Create an NxN matrix result, initialized to 0
result = zeros(NxN)

# loop through matrix A and B
for i in range(N):
    for j in range(N):
        for k in range(N):
            # multiply the elements of A and B
            result[i][j] += A[i][k] * B[k][j]

# return the result matrix
return result
Generate pseudocode for a matrix multiplication algorithm.


import random

def generate_password(n):
    """
    Create a function to generate a random password of length n
    :param n: the length of the password
    :return: a random password of length n
    """ 
    # create a character list of symbols, alphabets, and numbers
    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='
    # create a list of length n with random characters
    password = [random.choice(characters) for _ in range(n)] 
    # convert the list to a string
    password = ''.join(password)  
    # return the password
    return password
Create a function to generate a random password of length n


"""
Debug the following Python code

def f(x):
    if x > 0:
        return -1
    else:
        return 1
"""

# incorrect indentation of the else statement
def f(x):
    if x > 0:
        return -1
    else:
        return 1   # correct indentation
Debug the following Python code
def f(x):
    if x > 0:
        return -1
    else:
        return 1

"""
Generate a data structure that can efficiently store an array of words
"""

# create a trie (a node with 26 references to other nodes)
class TrieNode:
    def __init__(self):
        self.children = dict()
        self.end = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]
        node.end = True

# create an empty array
word_array = []

# create a new trie
trie = Trie()

# iterate over the array and insert the words into the trie
for word in word_array:
    trie.insert(word)
Generate a data structure that can efficiently store an array of words


def find_substring(string, substring):
    """
    Find the position of a substring in a string
    :param string: the string
    :param substring: the substring to find
    :return: the position of the substring in the string
    """
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            return i
    return -1  # substring not found
Create a function to find the position of a substring in a string


def reorder_array(arr):
    """
    Reorder a given array in specialized order
    :param arr: the input array to reorder
    :return: the reordered array
    """
    # determine the size of the array
    n = len(arr)
    
    # create a new array to store the reordered results
    reordered = [0] * n
    
    # loop through the array 
    for i in range(n):
        # calculate the position of the current element
        pos = 2 * (arr[i] % (1 + n // 2))
        # find the first vacant position in the new array
        while reordered[pos] != 0:
            pos += 1
        # assign the current element to the vacant position
        reordered[pos] = arr[i]
    
    return reordered
Reorder a given array in specialized order


<hr>
Write an HTML code to create a horizontal line.


def median(arr):
  sortedArr = sorted(arr)
  length = len(arr)
  if length % 2 == 0:
    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)
  else:
    return sortedArr[length//2]
Design a function in Python that returns the median of an array of integers.


function validatePassword(password) {
  // Minimum 8 characters, one uppercase letter, one lowercase letter, one number, and one special character
  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})/;
  if (password.match(re)) {
    return true;
  }
  return false;
}
Write a JavaScript code to valid a password based on the following rules:


list1.reverse() # [9, 7, 5, 3, 1]
Write a code to reverse the order of a data structure such as array, list, or stack.
list1 = [1, 3, 5, 7, 9]

#include <iostream>
using namespace std;

int main() 
{
  int num1 = 50;
  int num2 = 40;
  int absDiff = abs(num1 - num2);
  cout << "The absolute difference between two numbers is: " << absDiff;
  return 0;
}
Create a program in C++ that calculates the absolute difference between two numbers.
num1 = 50;
num2 = 40;

<form> 
  <label> First Name: </label> 
  <input type="text" name="firstname" required> 
  <label> Last Name: </label> 
  <input type="text" name="lastname" required> 
  <label> Age: </label> 
  <input type="number" name="age" min="18" required> 
  <label> Phone Number: </label> 
  <input type="tel" name="phone" required> 
  <label> Address: </label> 
  <input type="text" name="address" required> 
  <input type="submit" value="Submit"> 
</form>
Design an HTML form with the following fields: first name, last name, age, phone number and address.


def is_even(number)
  number % 2 == 0
end
Create a Ruby program to check if a number is even or odd.


def sum_of_list(my_list):
  sum = 0
  for number in my_list:
    sum = sum + number
  return sum

my_list = [5, 10, 15, 20]
result = sum_of_list(my_list)
Redesign the following Python program with functions.
my_list = [5, 10, 15, 20]
sum = 0
for number in my_list:
sum = sum + number

<table>
  <tr>
    <td>Column 1</td>
    <td>Column 2</td>
    <td>Column 3</td>
  </tr>
  <tr>
    <td>Row 1</td>
    <td>Row 1</td>
    <td>Row 1</td>
  </tr>
  <tr>
    <td>Row 2</td>
    <td>Row 2</td>
    <td>Row 2</td>
  </tr>
  <tr>
    <td>Row 3</td>
    <td>Row 3</td>
    <td>Row 3</td>
  </tr>
</table>
Create an HTML page displaying a table of 3 rows and 3 columns.


arr = [2, 3, 4, 5]
sum = 0
for (i = 0; i < arr.length; i++) {
  sum += arr[i];
}
average = sum / arr.length;
console.log(average);
Debug the following JavaScript code which calculates the average of an array of integers:
arr = [2, 3, 4, 5]
sum = 0
for (i = 0; i < arr.length; i++) {
sum += arr[i]}
average = sum / arr.length

Math.floor(Math.random() * 6) + 1;
Generate an random integer between 1 and 6.


"""
Print the first ten Fibonacci numbers
"""

def print_first_ten_fibonacci_numbers():
    """Print the first ten Fibonacci numbers."""

    n1, n2 = 0, 1
    num = 0
    while num < 10:
        print(n1)
        nth= n1 + n2
        n1 = n2
        n2 = nth
        num += 1
        
if __name__ == '__main__':
    print_first_ten_fibonacci_numbers()
Create a program that prints the first 10 Fibonacci numbers.


24
Calculate the sum of an array of integers
[3, 5, 7, 9]

1
Find the smallest element in a given array.
[6, 8, 1, 4, 5]

A prime number is a number that is only divisible by 1 and itself. To check if a given number is a prime number, first use a loop to check all the numbers from 1 to the given number. If any of the numbers evenly divide the given number, then the number is not a prime. Otherwise, the number is a prime number.
How would you determine if a given number is a prime number?


if a > b:
    print(a)
else:
    print(b)
Compare two integers and print the larger one.
a = 3, b = 5

# Print date in dd/mm/yyyy format
print("{:02d}/{:02d}/{:04d}".format(day, month, year))
Edit the program to print the given date in the format "dd/mm/yyyy".
year = 2020
month = 5
day = 3

"""
Reverse string
"""

def reverse_string(s):
    """Reverse a given string.
    
    Args:
        s (str): The string to reverse.
        
    Returns:
        str: The reversed string.
    """
    return s[::-1]
    
if __name__ == '__main__':
    s = "hello world"
    print(reverse_string(s))
Create a function to reverse a string.
s = "hello world"

[0.15, 0.0, 0.45, 0.3]
Normalize a given array such that it adds up to 1.
[3, 0, 9, 5]

"""
Find the longest common substring between two strings
"""

def longest_common_substring(s1, s2):
    """Find the longest common substring between two strings.
    
    Args:
        s1 (str): The first string.
        s2 (str): The second string.
        
    Returns:
        str: The longest common substring.
    """
    max_length = 0
    longest_substring = ""
    len1, len2 = len(s1), len(s2)
    for i in range(len1): 
        for j in range(len2):
            length = 0
            while i + length < len1 and j + length < len2:
                if s1[i + length] != s2[j + length]:
                    break 
                length += 1
            if length > max_length:
                max_length = length
                longest_substring = s1[i : i + length]
    return longest_substring
    
if __name__ == '__main__':
    s1 = "Tangible"
    s2 = "Non-Tangible"
    print(longest_common_substring(s1, s2))
Find the longest common substring between two strings.
s1 = "Tangible"
s2 = "Non-Tangible"

"""
Find the top 5 most common words in a given string
"""

from collections import Counter

def get_top_five_words(s):
    """Get the top five most common words in a given string.
    
    Args:
        s (str): The string to process.
        
    Returns:
        list: A list of (word, count) tuples sorted in descending order
            of the most common words.
    """
    words = s.split()
    counts = Counter(words).most_common(5)
    return counts
    
if __name__ == '__main__':
    s = "Hello world, this is a sample string for the task"
    print(get_top_five_words(s))
Find the top 5 most common words in a given string.
s = "Hello world, this is a sample string for the task"

The given sentence is a request intention.
Classify a given sentence based on the intention behind it.
sentence = "I want to buy a car"

[x**2 for x in lst]
Use the list comprehension syntax to make a new list whose elements are the square of the first list.
lst = [1, 2, 3, 4]

def factorial(num):
    """
    Calculates factorial of a given number.
    """
    # Base case
    if num == 0:
        return 1
    # Recursion
    else:
        return num * factorial(num-1)
Write a Python function to calculate the factorial of a number (a non-negative integer).


def is_palindrome(str):
    """
    Checks if the given input string is a palindrome or not.
    """
    return str == str[::-1]
Write a function that takes a string and returns a boolean based on whether the string is a palindrome or not.


def is_leap_year(year):
    """
    Checks if the given year is a leap year or not.
    """
    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  
        return True  
    else:  
        return False
Write a code to check whether a given year is a leap year or not


def greet_user(name):
    """
    Greet the user with a custom message depending on the supplied name.
    """
    if name == 'John':
        print('Hey there John! Welcome back!')
    elif name == 'Mary':
        print('Good morning Mary! How are you doing today?')
    else:
        print('Hi there! Welcome to our service!')
Create a program which will take the user's name and output a custom message depending on the supplied name
name = 'John'

def find_smallest_number(arr):
    """
    Finds the smallest number in an array of numbers.
    """
    min_num = arr[0]
    for num in arr[1:]:
        if num < min_num:
            min_num = num
    return min_num
Write code to find the smallest number in an array of numbers.
arr = [5, 8, 2, 4, 7, 10]

def calculate_mean(arr):
    """
    Calculate the arithmetic mean of an array of numbers.
    """
    if len(arr) == 0:
        return 0
    
    return sum(arr) / len(arr)
Write a function to calculate the arithmetic mean of an array of numbers
arr = [5, 8, 2, 4, 7, 10]

def bubble_sort(arr):
    """
    Implementation of the Bubble Sort algorithm.
    """
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
Write code to implement Bubble Sort.
arr = [5, 8, 2, 4, 7, 10]

def find_longest_substring(string):
    """
    Finds the longest substring of unique characters in a given string.
    """
    longest_substring = ''
    current_substring = ''
    for ch in string:
        if ch not in current_substring:
            current_substring += ch
            if len(current_substring) > len(longest_substring):
                longest_substring = current_substring
        else:
            current_substring = ch
    return longest_substring
Write code to find the longest substring of unique characters in a given string.
string = 'abcabcbb'

def find_index(arr, item):
    """
    Finds the index of a given item in an array
    """
    for i, num in enumerate(arr):
        if num == item:
            return i
    return -1
Find the index of a given item in an array
arr = [1, 4, 6, 8, 9]
item = 8

def most_frequent_item(arr):
    """
    Finds the most frequent item in an array.
    """
    dictionary = {}
    for i in arr:
        if i in dictionary:
            dictionary[i] += 1
        else:
            dictionary[i] = 1

    max_count = 0
    max_item = 0

    for k, v in dictionary.items():
        if v > max_count:
            max_item = k
            max_count = v
    return max_item
Write code to find the most frequent item in an array
arr = [1, 4, 6, 8, 9, 1, 4, 6]

def concatenate(str1, str2):
    """
    Concatenates two given strings.
    """
    return str1 + str2
Write code to concatenate two given strings.
str1 = 'hello'
str2 = 'world'

def prime_numbers_in_range(a, b):
    """
    Displays all prime numbers between a given range.
    """
    for num in range(a, b+1):
        if is_prime(num):
            print(num,' is prime.')

def is_prime(num):
    """
    Checks if a number is prime or not.
    """
    if num == 1:
        return False
    else:
        for i in range(2, num):
            if num % i == 0:
                return False 
    return True
Create a program to display all prime numbers between a given range.
a, b = 2, 8

Big O notation is a way to measure the efficiency of algorithms and to compare them based on how their running time or space complexity grows relative to the size of the input.
Explain the concept of Big O notation in one sentence.


def remove_old_elements(lst):
  for i in range(len(lst) - 10):
    lst.pop(0)
  return lst

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
print(remove_old_elements(list)) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Write a code to remove the oldest elements from a list until the list contains at most 10 elements.
list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which can contain data and code: data in the form of fields and code in the form of procedures. OOP is used to design objects which contain both data and functions as one unit and help in creating reusable code.
Explain the concept of object-oriented programming.


def is_in_list(lst, val):
    return val in lst
Write a Python function to check if a value exists in a list.


In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1.
How do you declare a variable in Python?


def multiply(x,y):
  if(y == 0):
    return 0
  return x + multiply(x,y-1)

multiply(5,4) # 20
Write a code to multiple two numbers without using the multiplication operator.


def remove_duplicates(s):
  seen = []
  res = ""
  for char in s:
    if(char in seen):
      continue
    else:
      seen.append(char)
      res += char
  return res

string = 'Keeep Learning'
print(remove_duplicates(string)) # Keep Larning
Given a string, create a function that takes out all the duplicated characters in the string.
string = 'Keeep Learning'

function isPrimeNumber(num) {
  for(var i = 2; i < num; i++){
    if(num % i === 0) {
      return false;
    }
  }
  return num > 1;
}
Write a Javascript code to check if the given number is a prime number.


Treemaps are used to represent hierarchical data visually. They are used to visualize large datasets by dividing them into rectangles proportional to their values. This makes it easier to quickly compare values and identify patterns across datasets.
What is the purpose of treemaps in data visualization?


SELECT TOP 3 salary FROM employees ORDER BY salary DESC;
Write a SQL query to select the top 3 highest salaries in a employees table.


Data transformation is the process of converting data from one format to another format. It is mainly used for cleaning and normalizing data before it is used for further analysis or machine learning. Data transformation involves a range of operations from removing outliers and duplicates, performing calculations to creating new columns and more.
What is data transformation and how is it used?


function getMedian(arr) {
  arr.sort(function (a, b) {
    return a - b;
  });
  
  let mid = Math.floor(arr.length / 2);
  
  if (arr.length % 2 === 0) {
    return (arr[mid - 1] + arr[mid]) / 2;
  } else {
    return arr[mid];
  }
}
Create a JavaScript function that takes an array of numbers and returns the median value from the array.


#include <string>
#include <algorithm>

using namespace std;

string longestCommonSubstring(const string& s1, const string& s2) 
{ 
    int n1 = s1.length(); 
    int n2 = s2.length(); 
  
    int maxlen = 0;
    int endingIndex = n1;
            
    int dp[n1 + 1][n2 + 1]; 
  
    for (int i = 0; i <= n1; i++) { 
        for (int j = 0; j <= n2; j++) { 
            if (i == 0 || j == 0) { 
                dp[i][j] = 0; 
            } else if (s1[i - 1] == s2[j - 1]) { 
                dp[i][j] = dp[i - 1][j - 1] + 1; 
  
                if (dp[i][j] > maxlen) { 
                    maxlen = dp[i][j]; 
                    endingIndex = i; 
                } 
            } else { 
                dp[i][j] = 0; 
            } 
        } 
    } 
  
    return s1.substr(endingIndex - maxlen, maxlen); 
}
Write a C++ code to find the longest common substring in two strings.


def binarySearch(array, item):
  low = 0
  high = len(array) - 1

  while low <= high:
    mid = (low + high) // 2
    guess = array[mid]
    if guess == item:
      return mid
    if guess > item:
      high = mid - 1
    else:
      low = mid + 1
  return None
Write an algorithm to perform binary search on a sorted array.


def first_non_repeating_char(input_str): 
 
    char_count = {}
 
    for ch in input_str: 
 
        if ch in char_count: 
 
            char_count[ch] += 1
 
        else: 
 
            char_count[ch] = 1
 
    for ch in input_str: 
 
        if char_count[ch] == 1: 
            return ch 
 
    return None

print(first_non_repeating_char(input_str))
Given a string, write a Python program to find the first non-repeating character in it.
input_str = "aaaaabbbbccc"

function contains(arr, element) {
  return arr.indexOf(element) > -1;
}

console.log(contains(arr, 2)); //true
Write a JavaScript function to check if an array contains a specific element.
var arr = [1,2,3,4];

var regex = /\b[qQ]\w+\b/g;
 
var result = input_str.match(regex);

console.log(result); //['quick']
Construct a regular expression to extract all words from a given string that start with a specific letter.
input_str = "The quick brown fox jumped over the lazy dog"

// C++ program to find maximum in arr[] of size n 

int arr[] = {10, 324, 45, 90, 9808}; 

int n = sizeof(arr)/sizeof(arr[0]); 

int max = arr[0];

// Traverse array elements from second and 
// compare every element with current max   
for (int i = 1; i < n; i++) 
    if (arr[i] > max) 
        max = arr[i]; 

printf("Maximum element = %d", max);
Write a C++ function to find the maximum element in an array.


function concatenate(str1, str2) {
  return str1 + str2;
}

console.log(concatenate('Hello', 'World')); //HelloWorld
Create a Node.js function to concatenate two strings.


//String begins with substring
var regex = /^substring/;

if (input_str.match(regex)) {
  console.log('The string begins with the substring.');
}
Construct a regular expression to check if a string begins with a given substring.


def search_array(array, item) 
  return array.include?(item)
end
  
puts search_array(array, "Mango") #true
Write a Ruby program to search for a specific item in an array of strings.
array = ["Apple","Banana","Mango","Orange"]

<?php
 
function sum_array($arr) {
    $sum = 0;
    foreach ($arr as $val) {
        $sum += $val;
    }
    return $sum;
}
 
$arr = array(5, 10, 25);
echo sum_array($arr); //40
?>
Write a PHP program to find the sum of all elements of an array.


<form>
  <label>Gender:</label><br>
  <input type="radio" name="gender" value="male"> Male<br>
  <input type="radio" name="gender" value="female"> Female<br> 
</form>
Create an HTML form with radio buttons for selecting gender.


public class Largest { 
  
    static int getLargest(int[] inputArray){ 
        int largest = inputArray[0]; 
        for(int i = 1; i < inputArray.length; i++){ 
            if(inputArray[i] > largest){ 
                largest = inputArray[i]; 
            } 
        } 
        return largest; 
    } 
      
    public static void main(String[] args){ 
        int[] arr = {10,4,20,5,89}; 
        System.out.println("Largest element in the array is: "+getLargest(arr)); 
    } 
}
Write a Java program to find the largest element in a given array.


SELECT * FROM customers WHERE firstName = 'John';
Construct a SQL query to find all columns in a table called "customers" where the first name is equal to 'John'.


while (true) {
    // Code to run
}
What is the correct syntax for an infinite loop in C++?


public static int max(int num1, int num2, int num3) {
int max = num1;
if (num2 > max) {
 max = num2;
}
if (num3 > max) {
 max = num3;
}
return max;
}
Create a method in Java to return the largest of three numbers.


8
Count the number of words in this sentence using Python.
This sentence has a total of eight words.

SELECT * FROM Books;
Write a query in SQL to select all the rows from table Books.


import random

random.randint(100000000000000, 999999999999999)
Generate a 15-digit random number using Python.


int diff = 0;

for (int i=0; i < Math.min(str1.length(), str2.length()); i++) {
    if (str1.charAt(i) != str2.charAt(i)) {
        diff++;
    }
}
return diff;
Compare the two strings character-by-character and return the number of differences using Java.
String 1: Hello
String 2: Halle

"invalid"
Classify the following transaction as valid or invalid using Python.
Transaction ID: 101
Transaction Amount: -200

db.Books.find({})
Write a query in MongoDB to find all the documents in the collection "Books".


function avg(arr) {
    let sum = 0;
    for (const val of arr) {
        sum += val;
    }
    return sum/arr.length;
}

console.log(avg([2,3,9])); // 4.666
Implement a function in JavaScript to calculate the average of all elements in an array.
[2, 3, 9]

import string
import random

''.join(random.choices(string.ascii_letters + string.digits, k=12))
Generate a random string of 12 characters using Python.


for i in range(12):
    print("Hello World")
What is the command to print "Hello World" twelve times in Python?


def is_palindrome(s):
    s = s.lower().replace(' ', '').replace(',', '').replace(':', '').replace('!', '')

    return s == ''.join(reversed(s))
Given a string s, write a function to check if the string is a palindrome.
s = "A man, a plan, a canal: Panama!"

[2, 4, 6]
Generate a list of the first three even numbers


List<Person> persons = new ArrayList<>();

for (Person person : persons) {
    if (person.getAge() >= 18) {
        System.out.println(person.getName());
    }
}
Edit the Java code to filter out the persons whose age is less than 18.
List<Person> persons = new ArrayList<>();

for (Person person : persons) {
    System.out.println(person.getName());
}

def find_largest_subset(arr, target):
    curr_sums, max_sum_list = [], []
    for num in arr:
        for curr_sum in curr_sums[:]:
            new_sum = curr_sum + num
            if new_sum == target:
                if new_sum > sum(max_sum_list):
                    max_sum_list = curr_sum + [num]
            else:
                curr_sums.append(new_sum)
    return max_sum_list
You need to find the largest subset of an array that sums up to a given value.
arr = [1, 2, 3, 4, 5], target = 8

Imperative programming is a programming paradigm that describes computation in terms of statements that change a program’s state. Imperative programming focuses on describing how a program operates. It describes lists of instructions that the computer should execute, describing the steps from start to finish. Contrast this with functional programming, which describes what the program must do. In imperative programming, instructions are typically presented using decision-making (conditional) and looping (iteration) constructs. Examples of imperative programming languages are C, Java, and Python.
Can you explain what is imperative programming?


You can use the count() method in Python to count the number of specific characters in a given string. For example:

s = 'My name is John'

num_of_char = s.count('o')

print(num_of_char) #Output: 2
How do you count the number of specific characters in a given string?


[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
Generate an array with the first 10 even numbers


freq = {}

for el in arr:
    if el in freq:
        freq[el] += 1
    else:
        freq[el] = 1
        
max_el, max_freq = None, 0
for el, freq in freq.items():
    if freq > max_freq:
        max_el = el
        max_freq = freq
        
print(max_el, max_freq)  # Output: 2 2
Write a codde fragment to print out the most frequent element in an array.
arr = [1, 2, 2, 3, 4, 4, 5]

function getFirstNEvens(n) {
    let arr = [];
    for (let i = 0; i < n; i++) {
        arr.push(2 * i);
    }
    return arr;
}

let firstNEvens = getFirstNEvens(n);
console.log(firstNEvens); // Output: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
Write a JS program that takes a number n and prints out the first n even numbers.
n = 10

Merging two sorted arrays in O(n) time can be done using a two-pointer technique. Starting from the beginning of both the arrays, we keep track of the pointers and compare the elements at these positions. The smaller element is added to the merged array, and the pointer is then incremented. This is repeated until both arrays have been iterated over, with the remaining elements of the larger array being added to the merged array.
How do you merge two sorted arrays in O(n) time?


Imperative Programming
Classify whether the following is an imperative or functional programming language.
Java

<body>
    <div class="container"></div>
    <h1>My First Webpage</h1>
</body>
Update the existing HTML structure to add a new div class named "container".
<body>
    <h1> My First Webpage </h1>
</body>

Number.
Determine the type of the given variable.
var age = 20

{"name": "", "date": ""}
Design a JSON structure including a "name" field and a "date" field.


for(var i=0; i<nums.length; i++){
   console.log(nums[i]);
}
Construct a for loop to iterate through an array of numbers.
var nums = [1,2,3,4,5]

for(var i=nums.length-1; i>=0; i--){
   console.log(nums[i]);
}
Modify the following for loop to loop backwards.
for(var i=0; i<nums.length; i++){
   console.log(nums[i]);
}

The purpose of this function is to calculate the average of two given numbers and return the result.
Describe the purpose of the given function.
function avg(a,b){
   return (a+b)/2;
}

.sample{
   background-color: #fff;
}
Create a CSS style to set the background color of a div class "sample".


Bubble sort is an algorithm that compares adjacent elements and swaps positions if they are out of order. It continues in this manner with loops until all elements of the array are in their correct order. Quick sort is very similar in its approach, but chooses a "pivot" element and divides the remaining array into two parts based on whether the elements are less than or greater than the pivot element. Bubble sort is simpler but has worse time complexity than Quick sort, which is more efficient.
Compare and contrast  two sorting algorithms: Bubble sort and Quick sort.


189.
Convert the given binary string to its corresponding decimal number.
10111101

The try-catch statement is used to handle errors in JavaScript code. It allows the code to continue running even if there is an error. The try clause contains the code that may throw an error, and the catch clause contains code that will execute when an error is thrown.
Explain the purpose of try-catch statement in JavaScript.


j4xdu6.
Generate a unique 6 character alphanumeric string.


[
  {
    "name": "",
    "age": 
  },
  {
    "name": "",
    "age": 
  },
  ...
]
Construct an array of objects with the fields "name" and "age".


7.
Find the index of the given word in the sentence.
Word: music
Sentence: I love listening to music.

*   
   ***
  *****
 *******
Write a Python code snippet to print the pyramid structure with the given number of lines.
4

Ada Lovelace was born in 1815 to Lord Byron and Lady Byron and is widely acknowledged as the world’s first computer programmer. She was fascinated by mathematics and was able to learn about Charles Babbage’s Analytical Engine from him. In 1843, she wrote a detailed description of the machine and how it could be used for complex calculations.
Summarize the given paragraph in < 100 words.
Ada Lovelace is widely considered to be the world's first computer programmer. She was born to the poet Lord Byron and Lady Byron in 1815. She was fascinated by mathematics and charmed Charles Babbage, who is known as the father of computers, into teaching her about his Analytical Engine. Lovelace wrote a detailed description of the machine in 1843, and also outlines how it could be used to carry out complex calculations.

switch(grade){
   case "A+":
      console.log("Excellent job!");
      break;
   case "A":
      console.log("Well done!");
      break;
   case "B":
      console.log("Good job!");
      break;
   case "C":
      console.log("Keep up the good work!");
      break;
   default: 
      console.log("Keep up the hard work!");
      break;
}
Construct a switch statement to log different grades messages based on the grade variable.
var grade = "A+";

def reverse_string(input_str): 
    new_string = "" 
    for char in input_str: 
        new_string = char + new_string
  
    return new_string 
  
input_str = "Hello world!"

print(reverse_string(input_str))
##
5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.
5. Input:
<noinput>
5. Output:
for i in range(1, 11): 
    for j in range(1, 11): 
        product = i * j
        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') 
    print()
Reverse a string using Python code.
input_str = "Hello world!"

^(https?:\/\/)([\da-zA-Z\.-]+)\.([a-zA-Z\.]{2,6})([\/\w \.-]*)*\/?$
Create a regex expression that captures a valid URL.


class Date 
{
private:
    int day;
    int month;
    int year;

public:
    Date(int day, int month, int year); 

    int getDay() const; 
    int getMonth() const;
    int getYear() const;

    void setDay(int day);
    void setMonth(int month);
    void setYear(int year);
};
Write a C++ class to represent a date.


SELECT name, city, country
FROM stores;
Write an SQL statement to select the name, city and country of all stores.


[('apple', 'bear'), ('apple', 'cat'), ('apple', 'dog'), ('bear', 'cat'), ('bear', 'dog'), ('cat', 'dog')]
Create a list of two-word phrases using each of the four words ('apple', 'bear', 'cat', 'dog').


min_el = 0
max_el = 9
Given a list of numbers, find the minimum and maximum elements.
[3, 4, 8, 1, 5, 0, 9]

message = "Hello World"
Assign the value 'Hello World' to the variable 'message'.


sqrt(25) = 5
Calculate the square root of the given number.
25

let a = 0, b = 1, c, limit = 10;

console.log("Fibonacci Series of "+limit+" numbers:");

for(var i=0; i < limit; i++){
    if(i<=1){
        c=i;
    }
    else{
        c=a+b;
        a=b;
        b=c;
    }
    
    console.log(c);
}
Write a JavaScript code to print the first 10 terms of the Fibonacci series.


CREATE TABLE employees (
    name VARCHAR(255) NOT NULL,
    age INT NOT NULL,
    department VARCHAR(255) NOT NULL,
    salary DOUBLE NOT NULL
);
Create a MySQL table 'employees' with columns name, age, department and salary.


largest_number = 11
Find the largest number from the given list of numbers.
[7, 9, 11, 5]

for i in range(1,6):
  for j in range(1,i+1):
    print("*", end=" ")
  print()
Write a Python program to print the following pattern.


import random

characters = "abcdefghijklmnopqrstuvwxyz"

random_string = ""
for i in range(5):
    random_string += random.choice(characters)

print(random_string)
Generate a random 5-character string using the letters a-z.


def is_anagram(word1, word2):
 return sorted(word1) == sorted(word2)
Write a Python function to check if a given string is an anagram of another or not.
word1 = "cat"
word2 = "tac"

def create_2D_array(rows, columns):
 arr = [[] * columns] * rows
 return arr
Write a Python function to create a two-dimensional array of specified dimensions.


def replace_substring(string, substring, replacement):
 return string.replace(substring, replacement)
Write a Python function to replace all the occurrences of a given substring with another.
string = "Hello World"
substring = "World"
replacement = "Universe"

def max_values(d):
 return {key: max(d.values()) for key in d}
Write a Python function to compute the maximum value for each key in a given dictionary.
d = {'a':10, 'b':20, 'c':30}

def count_chars(string):
 char_occurrences = {}
 for char in string:
  if char not in char_occurrences:
   char_occurrences[char] = 1
  else:
   char_occurrences[char] += 1
 return char_occurrences
Write a Python script to count the number of occurances of each character in a given string.
string = "Mississippi"

def generate_powerset(list):
 powerset = []
 for i in range(2**len(list)):
  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]
  powerset.append(subset)
 return powerset

def is_bit_set(num, bit):
 return (num & (1 << bit)) != 0
Write a Python function to generate the powerset of a given list.
list = [2, 4, 6]

Debugging a C++ program using GDB involves running the program with the ‘gdb’ command and then setting breakpoints and examining variables. This can be done by typing in ‘break’ followed by the line number, or ‘b’ followed by the function name, where the program should halt. Once the program is halted, variables and registers can be inspected to determine what is causing the program to fail. Finally, the ‘continue’ or ‘c’ command can be used to resume normal execution.
Describe how to debug a C++ program using GDB.


db.books.find({"title" : "Harry Potter and The Sorcerer's Stone"});
Create a MongoDB query for finding a record in the collection that contains a specific value for a given field.
The collection is named 'books' and contains the fields 'title', 'author', and 'pub_date'. We would like to find a record where the title is "Harry Potter and The Sorcerer's Stone".

Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn.
Name a few Python libraries used for data analysis.


class Node{
    int data; 
    Node next; 
        
    Node(int d){
        data = d; 
        next = null; 
    } 
} 

class LinkedList{ 
    Node head; 
        
    public void insert(int data){ 
        Node node = new Node(data); 
        if (head == null) { 
            head = node; 
        } 
        else { 
            Node n = head; 
            while (n.next != null) { 
                n = n.next; 
            } 
            n.next = node; 
        } 
    } 
}
Write code in Java to create a linked list.


Inheritance in Python allows a class to inherit attributes and behavior from another class, called the parent class. Inheritance enables code reuse, making it an important part of object-oriented programming (OOP). A class that inherits attributes and behavior from a parent is called a child class or derived class. The parent class is also known as the base class or superclass.

In Python, inheritance is specified by placing classes in parentheses after the class name: class DerivedClass(BaseClass):. This syntax allows the DerivedClass to inherit all attributes and methods from the BaseClass. It also allows the DerivedClass to override methods of the BaseClass, and add new attributes and methods.
Explain the concept of inheritance in Python?


public class ArraySort { 
    public static int[] sortArray(int[] arr) { 
        int n = arr.length; 
        for (int i = 0; i < n - 1; i++) { 
            int min_idx = i; 
            for (int j = i + 1; j < n; j++) 
                if (arr[j] < arr[min_idx]) 
                    min_idx = j; 
            int temp = arr[min_idx]; 
            arr[min_idx] = arr[i]; 
            arr[i] = temp; 
        } 
        return arr; 
    } 
}
Construct a Java program for sorting a given array in ascending order.


h1 {
  font-weight: bold;
}
Create a CSS rule that sets the font-weight of all h1 headings to bold.


db.users.find({"age": { $gt: 21 }});
Write a query for filtering an array of objects in a MongoDB collection by their 'age' field.
The collection is named 'users' and the filter should return objects with age greater than 21

A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points.
Name the components of a typical machine learning pipeline.


Steps to creating a Flask application include importing the Flask module, creating an instance of Flask, creating an HTML template file, and creating a route for the app that renders the HTML template. The next step is to create a file containing the code to execute on each route; this could include performing a database query, calling a web API, running functions, etc. Once the application has been built, it can be run using a Flask client, such as the flask command line interface.
Describe the steps of creating an application using the Flask framework.


The best practice for minimizing the risk of SQL injection attacks is to use parameterized inputs and prepared statements. This enables the database to identify the data as separate values and thus renders SQL injection attacks ineffective. Additionally, input should be validated to ensure only valid data is accepted and to avoid any malicious manipulation of the input.
Suggest the best practice for minimizing the risk of SQL injection attacks.


A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container.
Describe how to create a 'dockerfile'


SELECT customer FROM orders WHERE date = '2020-06-25';
Construct a query in SQL to find the names of the customers who made purchase on a given date.
The table name is 'Orders' and the given date is '2020-06-25'.

import pandas as pd 

data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], 
'Age': [20, 22, -18, 24]} 

df = pd.DataFrame(data)

df = df[df['Age'] >= 0]
Purge all rows from the following dataframe that have a negative value in the Age column.
import pandas as pd 

data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], 
'Age': [20, 22, -18, 24]} 

df = pd.DataFrame(data)

s1 = "Hello World!".lower()
s2 = "HELLO WORLD!".lower()
Convert the following strings to lower case.
s1 = "Hello World!"
s2 = "HELLO WORLD!"

import random

random_int = random.randint(0, 10)
Change the following code snippet to generate a random integer from 0 to 10.


my_set = set(my_list)
Convert the following list to a set.
my_list = [2, 3, 5, 7]

for elem in my_list[:5]:
    print(elem)
Print the first 5 elements of the following list.
my_list = [2, 4, 6, 8, 10, 12, 14]

def is_odd(num):
    if num % 2 != 0:
        return True
    else:
        return False
Define a function to check if a number is odd.


my_str_split = my_str.split(",")
Split the following string at the comma.
my_str = "Hello,World"

my_dict = dict()
Create a new empty dictionary.


import pandas as pd

df = pd.DataFrame(data)
Create a pandas dataframe from the following dictionary.
data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], 
'Age': [20, 22, 18, 24]}

my_list.sort(reverse=True)
Sort the following list in descending order.
my_list = [1, 5, 3, 7]

my_list = [x * 10 for x in my_list]
Multiply each element in the following list with 10.
my_list = [2, 4, 6]

unique_count = len(set(my_list))
Count the number of unique elements in the following list.
my_list = [1, 2, 3, 1]

primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
Using Python, create a list containing the first 20 prime numbers.


sorted_numbers = [1, 2, 3, 5, 7]
Sort the given list of numbers in ascending order using Python.
numbers = [3, 5, 7, 1, 2]

def gcd(a, b):
     while b != 0:
        a, b = b, a % b
     return a
Create a function to find the greatest common divisor of two numbers in Python.


def common_elements(list1, list2):
    common_ele = []   
    for i in list1:
        for j in list2:
            if i==j:
                common_ele.append(i)
    return common_ele
Write a Python script to find the common elements in two given lists.
list1 = [1, 2, 3, 5, 7]
list2 = [2, 3, 4, 5, 6]

result = 17
Compute the result of the following mathematical expression in Python.
(4 + 5 * 7 - 9) / 2

def contains_uppercase(text):
  for char in text:
    if char.isupper():
      return True
  return False
Using Python, create a function to check if a given string contains an uppercase letter.


binary = "0b1100"
Convert the following number into binary representation using Python.
12

def limit_char(string):
    if len(string) > 6 :
        return string[:6]
    else:
        return string
Write a Python function to format a specified string to limit the number of characters to 6.
string = "Hello world"

def longest_palindrome(string):
    palindrome = ''
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            substring = string[i:j]
            if substring == substring[::-1] and len(substring) > len(palindrome):
                palindrome = substring
    return palindrome
Find the longest palindrome in a given string using Python.
string = "My name is John"

sum_list = 15
Calculate the sum of all elements in a given list using Python.
list1 = [1, 2 ,3, 4, 5]

def remove_odd_index(string):
    result = "" 
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result
Write a Python function to remove the characters which have odd index values of a given string.
string = "Hello World"

def dec_to_binary(num):
    binary = ""
    while num > 0:
        binary+= str(num % 2)
        num = num // 2
    return binary[::-1]
Create a function to convert a given number from decimal to binary representation using Python.


def intersection(list1, list2):
    result = []
    for i in list1:
        for j in list2:
            if i==j:
                result.append(i)
    return result
Write a Python function to find the intersection between two lists.
list1 = [1, 2, 3, 5, 7]
list2 = [3, 4, 5, 6]

public int binarySearch(int[] arr, int val){
    int left = 0;
    int right = arr.length - 1;
    while (left <= right) {
        int mid = left + (right - left) /2 ;
        if (arr[mid] == val) 
            return mid;
        else if (arr[mid] < val) 
            left = mid + 1;
        else 
            right = mid - 1;
    }  
    return -1;
}
Implement a Java program for finding the index of an element in a sorted array.


int count_unique(int array[], int n) 
{ 
    int count = 0; 
    int visited[n]; 
    for (int i = 0; i < n; i++) 
        visited[i] = 0; 

    for (int i = 0; i < n; i++) { 
        if (!visited[i]) { 
            visited[i] = 1; 
            count++; 
            for (int j = i + 1; j < n; j++) 
                if (array[i] == array[j]) 
                    visited[j] = 1; 
        } 
    } 
    return count; 
}
Modify the following function to return the number of unique elements in a given array.
int count_unique(int array[], int n) 
{ 
    int count = 0; 
    int i; 
    for (i = 0; i < n; i++) { 
        int j; 
        for (j = 0; j < i; j++) { 
            if (array[i] == array[j]) 
                break; 
        } 
        if (i == j) 
            count++; 
    } 
    return count; 
}

Node insert(int x, Node root) 
{ 
    if (root == NULL) { 
        root = new Node; 
        root->key = x; 
        root->left = root->right = NULL; 
    } 
    else    if (x < root->key) 
        root->left = insert(x, root->left); 
    else 
        root->right = insert(x, root->right); 
    root = balance(root); 
    return root; 
} 

Node balance(Node root) 
{ 
    int left_height = height(root->left); 
    int right_height = height(root->right); 
    if (abs(left_height - right_height) > 1) { 
        if (right_height > left_height) 
            root = leftRotate(root); 
        else
            root = rightRotate(root); 
    } 
    return root; 
}
Improve the following code in order to create a balanced binary search tree.
Node insert(int x, Node root) 
{ 
    if (root == NULL) { 
        root = new Node; 
        root->key = x; 
        root->left = root->right = NULL; 
    } 
    else    if (x < root->key) 
        root->left = insert(x, root->left); 
    else 
        root->right = insert(x, root->right); 
    return root; 
}

def find_max(arr): 
    max_val = arr[0] 
    for i in range(len(arr)): 
        if max_val < arr[i]: 
            max_val = arr[i] 
    return max_val 

arr = [2, 4, 5, 7, 8] 
max_val = find_max(arr) 
print(max_val)
Create a Python program to find the maximum value in the given array.
[2, 4, 5, 7, 8]

const eliminateSymbols = str => str.replace(/[^\w\s]/gi, "");
Write a JavaScript code to eliminate any symbols from a given string.


#include <iostream> 
using namespace std; 
  
float avg(int n, int arr[]) 
{  
    float sum, avg; 
  
    for (int i = 0; i < n; i++) 
    {
        sum = sum + arr[i]; 
    }
    avg = sum / n; 
    return avg; 
}
Create a C++ code to find the average of n numbers.


<?php 

// Function to get the addition of two numbers 
function addition($num1, $num2){ 
	$sum = $num1 + $num2; 
	echo "Result of addition is: " . $sum; 
} 

// Function to get the subtraction of two numbers 
function subtraction($num1, $num2){ 
	$diff = $num1 - $num2; 
	echo "Result of subtraction is: " . $diff; 
}

// Function to get the multiplication of two numbers 
function multiplication($num1, $num2){ 
	$prod = $num1 * $num2; 
	echo "Result of multiplication is: " . $prod; 
}

// Function to get the division of two numbers 
function division($num1, $num2){ 
	$quot = $num1 / $num2; 
	echo "Result of division is: " . $quot; 
} 

?>
Design a PHP code snippet to create a simple calculator.


SELECT table1.id, table1.name, table1.age, table2.class, table2.marks FROM table1 INNER JOIN table2 ON table1.id = table2.id WHERE table1.age > 18;
Write a SQL query to join two tables on a specified conditions.
Table 1:
id  name  age
1     a     15
2     b     18
3     c     20
Table 2:
id  class  marks
1    10      80
2    10      75
3    11      70

public class Palindrome {  
    public static boolean isPalindrome(String str){ 
        // Pointers pointing to the beginning 
        // and the end of the string 
        int i = 0, j = str.length() - 1; 
  
        // While there are characters toc compare 
        while (i < j) { 
  
            // If there is a mismatch 
            if (str.charAt(i) != str.charAt(j)) 
                return false; 
  
            // Increment first pointer and 
            // decrement the other 
            i++; 
            j--; 
        } 
  
        // Given string is a palindrome 
        return true; 
    } 
}
Create a Java program to check for a palindrome.


import React from 'react'; 

class Link extends React.Component { 
	render() { 
		return ( 
			<div> 
				<a href="#">Visit us Here</a> 
			</div> 
		); 
	} 
} 
export default Link;
Improve the following React component to render a link with the text "Visit us Here".


#!/bin/bash
read -p "Enter your name: " name
echo "Hello $name, welcome to our website!"
Write a shell script to prompt a user for their name and display a personalized message.


def isArmstrongNumber(num):
 sum = 0
 temp = num
 while temp > 0:
  digit = temp % 10
  sum += digit ** 3
  temp //= 10
 if num == sum:
  return True
 else:
  return False
Write a Python program to determine if a given number is an Armstrong number.


def findAreaOfTriangle(base, height):
 return 0.5 * base * height
Create a function to find the total area of a triangle, given its base and height.


def countEvens(arr):
 count = 0
 for num in arr:
  if num % 2 == 0:
   count += 1
 return count
Edit the following function so that it counts the even numbers in the given array.
arr = [1, 2, 3, 4]

def print_str_list(in_list):
    """This function takes a list and returns a stringified version of it"""
    return " ".join(str(x) for x in in_list)
Create a function in Python that prints out a stringified version of a list.
[1, 4, 6, 8]

class Employee:
    """A class for representing an employee"""
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary
Create a python class called "Employee" that contains 3 instance variables.


def check_list_contains(item_list, item):
    """This function checks if an item is in a list"""
    return item in item_list
Create a function to check if an item is in a list


None is a special constant in Python and is of type NoneType.
What type of object is "None" in Python?


for item in my_list:
    print(item)
Create some code that iterates through a list and prints out each element.
my_list = [1, 4, 6, 8]

def min_integer(a, b):
    """This function returns the minimum of two integers"""
    return min(a, b)
Implement a function that takes two integers and returns the smaller one.


from math import e

def calc_e():
    """This function calculates the value of e to 4 decimal places"""
    return round(e, 4)
Write a function in Python to calculate the value of "e" to 4 decimal places.


You can use the built-in function len() to get the length of a list in Python.
How can you get the length of a list in Python?


unique_list = list(set(my_list))
Given a list of integers, create code to remove the duplicates.
my_list = [1, 4, 4, 6, 6, 8]

def factorial(n):
    """This function returns the factorial of a given integer"""
    if n == 0:
        return 1
    else: 
        return n * factorial(n-1)
Create a function in Python to calculate the factorial of a number.


The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the "try" block and the code that is executed if an exception is raised is placed in the "except" block. The "Except" block is also used to catch a specific exception and handle it accordingly.
Describe the details of the try-except statement in Python.


def get_divisors(num):
    """This function returns a list that contains the divisors of a given number"""
    return [x for x in range(1, num + 1) if num % x == 0]
Given a number, create a function that returns a list that contains its divisors.
num = 20

if num % 2 == 0:
    print("The number is even")
else:
    print("The number is odd")
Create an if-else statement in Python that checks if an integer is even or odd.


SELECT d.name, MAX(e.salary)
FROM Department d
INNER JOIN Employee e
ON d.department_id = e.department_id
GROUP BY d.name;
Write a MySQL query to find the highest salary of each department.


<script> 
function blink() { 
    var text = document.getElementById('blink');
    text.style.visibility = (text.style.visibility == 'hidden' ? '' : 'hidden');
    setTimeout("blink()", 500); 
} 
blink();
</script> 
<span id="blink">Text to blink</span>
Create a function in HTML to display a blinking text on the webpage.


SELECT * FROM Products WHERE product_id NOT IN (SELECT product_id FROM Sales);
Write a SQL query to display all products in the database which have not been sold yet.


function validateEmail(email) 
{
	var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	return re.test(String(email).toLowerCase());
}
Write a JavaScript code to check if a string is a valid email address.


int findFirstRepeating(int arr[], int n) 
{ 
    unordered_set<int> s; 
  
    for (int i = 0; i < n; i++) { 
        if (s.find(arr[i]) != s.end()) 
            return arr[i];         
        s.insert(arr[i]); 
    }  
  
    return -1; 
}
Given an array of integers, write an algorithm to find the first repeating element.
[2, 5, 1, 2, 3, 5]

<form>
  <input type="text" name="name" placeholder="Name" required><br>
  <input type="email" name="email" placeholder="Email" required><br>
  <input type="tel" name="phone" placeholder="Phone Number" required><br>
  <textarea name="address" placeholder="Address" required></textarea><br>
  <input type="submit">
</form>
Create an HTML form to accept the user's name, email, phone number and address.


def n_sum(n):
    sum = 0
    for i in range(n+1):
        sum += i
    return sum
Write a Python code to calculate the sum of natural numbers up to n.


SELECT MAX(Salary) 
FROM Employee 
WHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee);
Write an SQL query to find the second highest salary of an employee.


The output of the given Python code is [1, 2, 6, 4, 5].
Determine the output of the given Python code.
x = [1, 2, 3, 4, 5] 
y = x 
y[2] = 6

SELECT Name, COUNT(*) 
FROM Employees
GROUP BY Name
HAVING COUNT(*) > 1;
Debug the given SQL query.
SELECT Name, COUNT(*) 
FROM Employees
GROUP BY Name

The given code is an example of functional programming.
Classify the given code as either functional programming or object-oriented programming.
def double(x):
  return x * 2

The purpose of the CSS selector ".main a" is to select all links (anchor tags, "a") that are descendants of the element with class name "main".
Explain the purpose of the following CSS selector.
.main a

db.collection. find({"name": "John"})
Write a MongoDB query that returns all the records that have a “name” field set to “John”


int age = 25;
Convert the following code from Swift to Java.
let age = 25

function getString(num) { 
  return "The number is " + num; 
}
Write a JavaScript function that takes a single parameter and returns a string.
Parameter: num (integer) = 3

let evenArray = [3,7,10,6,23].filter(num => num % 2 == 0); 
//evenArray: [10,6]
Create a new array in JavaScript containing only even numbers from the given input array.
Array: [3,7,10,6,23]

The CSS rule will assign a font size of 20px and a font weight of bold to all paragraph elements. It will make the text in any "p" element display in a bold font with a font size of 20px.
Explain the following CSS rule.
p {
  font-size: 20px;
  font-weight: bold;
}

for (int i = 0; i < arr.length; i++) { 
  System.out.println(arr[i]); 
}
Create a for loop in Java that iterates over the given array and prints the values.
Array: int[] arr = {1, 2, 3, 4, 5};

db.customers.find({"age" : {"$gt": 30}})
Convert the following SQL query to MongoDB.
SELECT * FROM Customers WHERE age > 30

<h2 style="text-align: center;">Heading Text</h2>
Edit the given HTML so that it renders as a centered, level-two heading.
<h1>Heading Text</h1>

array = [0,1,2,3]
new_array = list(map(lambda item: item + 3, array))
Rewrite the given JavaScript code in Python.
let array = [0,1,2,3];
  const newArray = array.map(item => item + 3);

SELECT books.type, COUNT(*) AS book_count
FROM books
GROUP BY books.type;
Create a SQL query to calculate the count of each type of book in a library.
Noinput

public class Fibonacci {

  public static void main(String[] args) {
    int n1=0,n2=1,n3,i,count=10;
    System.out.print(n1+" "+n2);
    
    for(i=2;i<count;++i) {
      n3=n1+n2;
      System.out.print(" "+n3);
      n1=n2;
      n2=n3;
    }   
  }
}
Create a program in Java to print out the Fibonacci sequence of numbers up to 10.


def mmddyyyy2ddmmyyyy(date_string):
    if len(date_string) != 10:
        raise ValueError('Invalid date format')
    mm, dd, yyyy = date_string.split('/')
    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)
    return new_date_string
Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY.
"02/20/2020"

public static int max(int x, int y) {
    if (x > y)
      return x;
    else 
      return y;
}
Create a function in Java to find the larger of two integers.


def maxSubArraySum(arr): 
    n = len(arr) 
  
    max_so_far = -float('inf') 
    max_ending_here = 0
  
    for i in range(0, n): 
        max_ending_here = max_ending_here + arr[i] 
        if (max_so_far < max_ending_here): 
            max_so_far = max_ending_here 
  
        if max_ending_here < 0: 
            max_ending_here = 0   
    return max_so_far
Write a code to find the maximum subarray sum in an array using dynamic programming.


def is_prime(num):
    if num <= 1: 
        return False
    for i in range(2, num//2 + 1): 
        if num % i == 0: 
            return False
    return True
Create a function in Python to evaluate if a given number is prime.


DELETE FROM table_name;
Construct a query in PostgreSQL to delete all the rows from a table.


SELECT name, email
FROM users
WHERE email LIKES '%google.com%';
Construct a query in PostgreSQL to find the names and emails of all users who have "google.com" in their emails.


// Function to check if two strings are anagrams
const isAnagram = (string1, string2) => {
  // Check if string lengths are the same
  let string1Arr = string1.split('').sort();
  let string2Arr = string2.split('').sort();
  if (string1Arr.length !== string2Arr.length) return false;
  
  // Compare each character in the strings
  for (let i = 0; i < string1Arr.length; i++) {
    if (string1Arr[i] !== string2Arr[i]) return false;
  }
  
  // Return true if all characters match
  return true;
}
Create a program in JavaScript to check if two strings are anagrams.


class Car:
    
    def __init__(self, type, year, color):
        self._type = type
        self._year = year
        self._color = color
Design a class Car with a constructor to initialize the variables _type, _year and _color


DELETE FROM Customer;
Write the SQL query to delete all records from the table 'Customer'


import json 

# parse the JSON string
data = json.loads(input_json)

# extract the value of the price variable
price = data['price']
Parse the following JSON and extract the value of the variable 'price'.
`{
 "item": "Shoes",
 "price": 125
}`

def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

# Driver Program 
print("Fibonacci sequence:") 
for i in range(20): 
    print(fibonacci(i))
Write a Python program to print out the Fibonacci sequence up to 20 numbers


<html>
  <head>
    <title>My Site</title>
  </head>
  <body>
    <h1>Welcome!</h1>
    <p>My website</p>
  </body>
</html>
Correct the following HTML code to remove mistakes and indentation errors
`<html><head><title>My Site</title></head>
 <body>
   <h1>Welcome!</h1><p>My website
 </body>
 </html>`

# Define the array
arr = [1, 5, 7, 10]

# Calculate the sum
sum = sum(arr)

# Print the result
print("The sum of the numbers in the array is " + str(sum) + ".")
Calculate the sum of the numbers in the array [1, 5, 7, 10]


# Define an array
arr = [1, 2, 3, 4]

# Initialize the index
i = 0

# Iterate over the array and print each element
while i < len(arr):
    print(arr[i])
    i += 1
Update the following code to use a while loop instead of a for loop
`# Define an array
arr = [1, 2, 3, 4]

# Iterate over the array and print each element
for i in arr:
    print(i)`

public class SelectionSort {
    public static void sort(int[] arr) {
        int n = arr.length;
 
        // One by one move boundary of unsorted subarray
        for (int i = 0; i < n-1; i++)
        {
            // Find the minimum element in unsorted array
            int min_idx = i;
            for (int j = i+1; j < n; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;
 
            // Swap the found minimum element with the first
            // element
            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }
}
Write a code to implement Selection Sort in Java


SELECT MAX(salary)
FROM Employees;
Write a query to find out the maximum salary earned by an employee


class Employee {
    
    private String _name;
    private int _age;
    
    public Employee(String name, int age) {
        this._name = name;
        this._age = age;
    }
    
    public String getName() {
        return _name;
    }
    
    public int getAge() {
        return _age;
    }
}
Create a class Employee with constructor to initialize the instance variables _name and _age


def remove_duplicates(arr):
    # Stores the unique elements
    unique = []

    # Iterate through the array
    for elem in arr:
        # If the element is not already in the unique list
        if elem not in unique:
            # Add it to the unique list
            unique.append(elem)

    # Return the array without duplicates
    return unique
Design a function to remove duplicates from an array


#include<iostream>

using namespace std;

int gcd(int first, int second) {
    // Base case
    if (second == 0)
        return first;
    
    return gcd(second, first % second);
}

int main() {
    // Define two integers
    int first = 10;
    int second = 20;
    
    cout << "The greatest common divisor of " << first << " and " << second << " is " << gcd(first, second) << endl;

    return 0;
}
Write a C++ code to find the greatest common divisor of two integers


def get_largest_value(lst):
    max_value = lst[0]
    for num in lst:
        if num > max_value:
            max_value = num
    return max_value

print(get_largest_value(lst))
Given a list of numbers, write a function to find the largest value in the list.
lst = [1, 5, 9, 12, 8]

def sort_list_ascending(lst):
    # Traverse through all array elements 
    for i in range(len(lst)): 
  
        # Find the minimum element in remaining  
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(lst)): 
            if lst[min_idx] > lst[j]: 
                min_idx = j 
          
        # Swap the found minimum element with  
        # the first element         
        lst[i], lst[min_idx] = lst[min_idx], lst[i] 
  
    return lst
  
# Driver code to test above 
lst = [2, 5, 1, 7, 4] 
print(sort_list_ascending(lst))
Create an algorithm to sort a list of numbers in ascending order.
lst = [2, 5, 1, 7, 4]

def check_if_sum_zero(arr): 
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if (arr[i] + arr[j] == 0): 
                return True
    return False

print(check_if_sum_zero([-3, -2, 1, 2, 3]))
Given an array, write a program that checks if any two numbers sum to 0.
arr = [-3, -2, 1, 2, 3]

class Node: 
    def __init__(self, data): 
        self.data = data 
        self.npx = None
  
class XORLinkedList: 
    def __init__(self): 
        self.head = None
  
    def add(self, item): 
        new_node = Node(item) 
        new_node.npx = self.head 
        if self.head is not None: 
            self.head.npx = new_node.npx ^ self.head.npx 
        self.head = new_node 
  
    def printList(self): 
        temp = self.head 
        while(temp): 
            print(temp.data), 
            prev = temp 
            temp = self.XOR(temp.npx, prev) 
  
    def XOR(self, a, b): 
        return (a or b) and (not a or not b) 
  
a = XORLinkedList() 
a.add(2) 
a.add(3) 
a.add(4) 
a.add(5) 
a.printList()
Create a program to generate an XOR linked list.


def sort_in_alphabetical_order(lst): 
    lst.sort()
    return lst

print(sort_in_alphabetical_order(["apple", "orange", "grapes"]))
Given a list of strings, write a program to sort the strings in alphabetical order.
lst = ["apple", "orange", "grapes"]

def get_fib_term(n): 
    if n <= 1: 
        return n 
    else: 
        return get_fib_term(n-1) + get_fib_term(n-2)
  
print(get_fib_term(3))
Create a function to generate the nth term in the Fibonacci sequence.
n = 3

def calculate_mean(lst):
    return sum(lst) / len(lst)

print(calculate_mean([1, 2, 3, 4, 5]))
Calculate the mean of a list of numbers.
lst = [1, 2, 3, 4, 5]

21
Sum all the prices in the list of dictionaries and output the result as an integer.
list_of_dictionaries = [{"price": 5}, {"price": 7}, {"price": 9}]

#!/usr/bin/python
print("Hello, World!")
Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.
#!/usr/bin/python
print "Hello, World!"

function Fibonacci(n) { 
  if (n <= 1) return n; 
  return Fibonacci(n-1) + Fibonacci(n-2); 
}
Write a function in JavaScript that takes an integer n and returns the nth Fibonacci number.


function countOccurences(obj) {
    let result = {};
    for (let value of Object.values(obj)) {
        for (let char of value) {
            result[char] = result[char] + 1 || 1;
        }
    }
    return result; 
}
Given the following object, write a function in JavaScript to count the occurrences of each character in the object's values.
obj = {
 "name": "John Doe"
}

def classifyList(lst):
    result = []
    for num in lst: 
        if num % 2 == 0: 
            result.append('even')
        else:
            result.append('odd')
    return result
Using the given list, create a function in Python that classifies each number as odd or even.
lst = [1, 2, 6, 8, 4]

import java.util.Arrays;
 
class GFG {
 
    // Function to check if two strings are 
    // rotations of each other or not
    static boolean areRotations(String str1, String str2)
    {
        // There lengths must be same and str2 should 
        // be a substring of str1 concatenated with 
        // str1.
        return (str1.length() == str2.length())
            && ((str1 + str1).indexOf(str2) != -1);
    }
 
    // Driver program 
    public static void main(String[] args) 
    {
        String str1 = "ABACD";
        String str2 = "CDABA";
 
        if (areRotations(str1, str2))
            System.out.println("Strings are rotations of each other");
        else
            System.out.println("Strings are not rotations of each other");
    }
}
Write a Java program that takes two strings as inputs and checks if one string is a rotation of the other.


def longest_common_prefix(arr_of_dictionaries):
    prefix = ''
    if len(arr_of_dictionaries) == 0:
        return prefix
    first_dict_keys = arr_of_dictionaries[0].keys()
    for i in range(len(list(first_dict_keys)[0])):
        char = list(first_dict_keys)[0][i]
        for dict in arr_of_dictionaries:
            if list(dict.keys())[0][i] != char:
                return prefix
        prefix += char
    return prefix
Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.
arr_of_dictionaries = [
    {
        "name": "John Doe",
        "country": "United States"
    },
    {
        "name": "Jane Doe",
        "state": "New York"
    }
]

public static boolean isBalanced(String str) 
{ 
    if(str.length() == 0) 
        return true; 
      
    Stack<Character> stack  = new Stack<Character>(); 
  
    for(int i = 0; i < str.length(); i++) 
    { 
        char current = str.charAt(i); 
          
        if(current == '{' || current == '(' || current == '[') 
        { 
        stack.push(current); 
        } 
  
        if(current == '}' || current == ')' || current == ']') 
        { 
            if(stack.isEmpty()) 
                return false; 
  
            char last = stack.peek(); 
            if(current == '}' && last == '{' || current == ')' && last == '(' || current == ']' && last == '[') 
                stack.pop(); 
            else 
                return false; 
        }
    } 
 
    return stack.isEmpty(); 
}
Write a function in Java that takes a string consisting of brackets and output true if the brackets are properly nested, else output false.


function splitStringWithDelimiters (string, delimiters) { 
  let result = []; 
  let s = string; 
  while (s.length > 0) { 
    let char = s[0]; 
    if (delimiters.includes(char)) { 
      s = s.substr(1); 
    } else { 
      let index = 0; 
      for (const delimiter of delimiters) { 
        if (s.indexOf(delimiter) > 0 && s.indexOf(delimiter) < index) { 
          index = s.indexOf(delimiter); 
        } 
      } 
      if (index === 0) { 
        index = s.length; 
      } 
      result.push(s.substr(0, index)); 
      s = s.substr(index); 
    } 
  } 
  return result; 
}
Given a string and a set of delimiters, write a function in JavaScript to split the string.
string = "Hello, world!"
delimiters = [" ", ",", "-", "!"]

// Create an array 
float arr[] = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1};

// Calculate average 
float sum = 0;
for (int i = 0; i < 10; i++) {
    sum += arr[i];
}

float average = sum / 10;
System.out.println("Average of the array values: " + average);
Create an array in Java with 10 floating-point values and output the average of these values.


public static int power(int base, int exp) 
{ 
    int result = 1; 
    while (exp != 0) 
    { 
        result *= base; 
        --exp; 
    } 
    return result; 
}
Find the power of a number using an iterative approach in Java.


def removeChars(string, charset):
	result = ""
	for c in string:
		if c not in charset:
			result += c
	return result
Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.
string = "Hello, world!"
charset = ["o", "!"]

def count_string_characters(string):
    return len(string)
Create a program to count the total characters in a string.


def is_prime(x):
    for i in range(2,int(x**0.5)+1):
        if x % i == 0:
            return False
    return True
Make a code to determine whether a given number is prime or not.


def sort_elements(arr):
    return sorted(arr)
Create a code that sorts element in an array.


def swap_elements(arr, i, j):
    arr[i], arr[j] = arr[j], arr[i]
    return arr
Develop a function to swap the position of two elements in an array.


def cube_number(x):
    return x**3
Create function to return the cube of a number.


def get_divisor_sum(n):
    divisor_sum = 0
    for i in range(1, n//2 + 1):
        if n % i == 0:
            divisor_sum += i
    return divisor_sum
Create a function that takes a number and returns the sum of all its divisors.


SELECT * FROM Users;
Write an SQL query to select all entries from the "Users" table.


for (int i = 0; i < 5; i++){ 
  System.out.println("Hello World!"); 
}
Create a loop to print hello world 5 times.


<div>
  <div id="section1"> Section 1... </div> 
  <div id="section2"> Section 2... </div> 
  <div id="section3"> Section 3... </div>
</div>
Create a HTML page with 3 sections, using div tags.


def is_prime(number):
   # If given number is greater than 1
   if number > 1:
       # Iterate from 2 to n / 2
       for i in range(2, number//2):
           # If num is divisible by any number between 
           # 2 and n / 2, it is not prime
           if (number % i) == 0:
               return False
       else:
           return True
# If the number is less than or equal to 1
   else:
       return False
Create a function to check whether a number entered is prime or not.


[398, 287, 135, 123, 45]
Sort a list of 5 numbers in descending order.
[123, 45, 287, 398, 135]

class Circle():
    def __init__(self, radius):
        self.radius = radius
    def area(self): 
        return self.radius ** 2 * 3.14 
    def circumference(self): 
        return 2 * self.radius * 3.14
Using an object-oriented programming language, create a class that has two methods - one to calculate the area of a circle and another to calculate the circumference.


A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null.
Concisely describe how a Linked List works.


3
Find the index of the number 23 in the given array.
[78, 82, 6, 23, 77, 57, 88]

SELECT name FROM students;
Write an SQL query to display all the employee names in the 'students' table.


HELLO WORLD
Convert the given string to uppercase.
Hello World

def average(numbers):
    return sum(numbers) / len(numbers)

print(average([9, 5, 10, 12]))   # Output: 9.5
Create a program in Python that calculates the average of numbers in a list.
[9, 5, 10, 12]

const arr = [1, 4, 6, 7, 8, 3, 10];

const evenArr = arr.filter(num => num % 2 == 0);

console.log(evenArr); // Output: [4, 6, 8, 10]
Use JavaScript to filter an array of numbers such that only even numbers are returned.
[1, 4, 6, 7, 8, 3, 10]

#include <iostream> 
using namespace std; 
  
void printPrimeNumber(int n) 
{ 
    int flag; 
  
    for (int i = 2; i <=n; i++) { 
        flag = 0; 
        for (int j = 2; j < i; j++) { 
            if (i % j == 0) { 
                flag = 1; 
                break; 
            } 
        } 
        if (flag == 0) 
            cout << i << " "; 
    } 
} 
  
int main() 
{ 
    int n = 100; 
    printPrimeNumber(n); 
    return 0; 
}
Write a C++ program that prints out the prime numbers up to 100.


function sum(num1, num2) {
 return num1 + num2;
}
Create a JavaScript function that takes in two parameters and returns their sum.


class MyClass
  def initialize
    puts "Welcome to MyClass!"
  end
end
Create a class in Ruby that prints a message when instantiated.


SELECT MAX(Price) FROM Products;
Write an SQL query that selects the maximum price from all products.
Table Name: Products
Columns: Name (varchar), Price (decimal)

class Node { 
  constructor(data) 
  { 
    this.data = data; 
    this.left = null; 
    this.right = null; 
  } 
} 
  
class BinarySearchTree { 
  constructor() 
  { 
    this.root = null; 
  } 

  insert(data) 
  { 
    let newNode = new Node(data); 
    if(this.root === null) 
    {
      this.root = newNode; 
    }

    else
    { 
      this.insertNode(this.root, newNode);
    } 
  }
  
  insertNode(node, newNode) 
  { 
    if(newNode.data < node.data) 
    { 
      if(node.left === null) 
      { 
        node.left = newNode; 
      } else { 
        this.insertNode(node.left, newNode); 
      } 
    } 
    else { 
      if(node.right === null) 
      { 
        node.right = newNode; 
      } else { 
        this.insertNode(node.right,newNode); 
      } 
    } 
  } 
}
Create a binary search tree in JavaScript.


public class SortAscending { 
    public static void main(String[] args) 
    {
        int[] numbers = {3,8,5,1,2,6,4};
        int temp = 0;
        for (int i = 0; i < numbers.length; i++) {
            for (int j = i+1; j < numbers.length; j++) {
                if (numbers[i] > numbers[j]) {
                    //swap elements
                    temp = numbers[i]; // assign value of i to temp
                    numbers[i] = numbers[j];  // assign value of j to i
                    numbers[j] = temp;  // assign value of temp to j
                }
            }
        }
        System.out.println("Array elements in ascending order:");
        for (int i = 0; i < numbers.length; i++) { 
            System.out.print(numbers[i]+" "); 
        } 
    }
}
Suppose there is an array of numbers. Write a Java program to sort the array in ascending order.
[3,8,5,1,2,6,4]

public class SortDescending { 
    public static void main(String[] args) 
    {
        int[] numbers = {3,8,5,1,2,6,4};
        int temp = 0;
        for (int i = 0; i < numbers.length; i++) {
            for (int j = i+1; j < numbers.length; j++) {
                if (numbers[i] < numbers[j]) {
                    //swap elements
                    temp = numbers[i]; // assign value of i to temp
                    numbers[i] = numbers[j];  // assign value of j to i
                    numbers[j] = temp;  // assign value of temp to j
                }
            }
        }
        System.out.println("Array elements in descending order:");
        for (int i = 0; i < numbers.length; i++) { 
            System.out.print(numbers[i]+" "); 
        } 
    }
}
Modify the above program to sort the array in descending order.
[3,8,5,1,2,6,4]

<form>
   <label>Name: </label>
   <input type="text" name="name"><br>
   <label>Age: </label>
   <input type="number" name="age"><br>
   <input type="submit" value="Submit">
 </form>
Create an HTML form with two input boxes and a submit button.


function isPrime($n) {
  if ($n == 1) {
    return false;
  } 
  elseif ($n == 2) {
    return true;
  } 
  else {
    for ($i = 2; $i <= sqrt($n); $i++) {
      if ($n % $i == 0) {
        return false;
        break;
      }
    }
    return true;
  }
}
Edit the above PHP function so that it also checks if a given number is prime.


import re

def remove_special_chars(s):
    return re.sub(r'[^\w\s]','', s)
Create a Python function to parse a string and remove all special characters.


import re

def remove_special_chars_and_whitespace(s):
    return re.sub(r'\s','', re.sub(r'[^\w\s]','', s))
Modify the function to also remove all whitespace from the string.


const myObject = {
  doTask: (condition) => {
    if(condition) {
      // code to perform the task
    } 
  }
}
Create an object in JavaScript that performs a task given a condition.


second_element = list[1]
print(second_element) # prints banana
For the following list, print out the second element.
list = ["apple", "banana", "cherry"]

0, 1, 2, 3, 4
What is the next output when this code is executed?
i = 0 
while (i < 5): 
    print(i, sep = ", ")
    i += 1

def square_of_first_n_number(n):
    """Find the square of the first n numbers"""
    
    # Initialize an empty list
    squares = []

    # Iterate to the first n numbers
    for i in range(n):
        # Compute the square and append to the list
        squares.append(i * i)

    return squares
Write a code to find the square of the first n numbers.


CREATE TABLE books (
    book_id INTEGER PRIMARY KEY,
    book_title VARCHAR(50),
    book_edition VARCHAR(50)
);
Formulate an SQL query to make this table:
Table: books

book_id | book_title | book_edition
------------------------

rev_string = String[::-1] 
print(rev_string) # prints "!dlroW olleH"
Reverse the following String.
String = "Hello World!"

dict1 = dict(zip(['name', 'surname', 'age'], list1))
print(dict1) # prints {'name': 'John', 'surname': 'Doe', 'age': 23}
Given a list, write code to convert the list into a dictionary.
list1 = ["John", "Doe", 23]

row_sum = []
for row in A:
    row_sum.append(sum(row))
    
print(row_sum) # prints [6, 15, 24]
Given a two-dimensional array, write a code to sum the values in each row.
A = [[1, 2, 3], 
     [4, 5, 6], 
     [7, 8, 9]]

for letter in "Hello World":
    print(letter)
Construct a for loop that will loop over the string "Hello World".


# Create a set from the array
A_set = set(A)

# Determine the max value
max_val = max(A_set)

# Find the missing number
missing_number = max_val - sum(A_set)

print(missing_number) # prints 5
Write a code to find the missing number in the given array.
A = [1, 2, 3, 4, 6, 7, 8]

c = "Hello World!"
What would be the resulting string after executing this code?
a = "Hello"
b = "World"

c = a + " " + b

c = f"{c}!"

# initialize an empty list to store prime numbers
prime_numbers = []

# Iterate over the range from 2 to 10
for num in range(2, 11):
    cnt = 0
    # check if the number is divisible by any natural number from 2 to num-1
    for i in range(2, num):
        if num % i == 0:
            cnt += 1
    # if the number is not divisible by any of the numbers then add to the list
    if cnt == 0:
        prime_numbers.append(num)

print(prime_numbers) # prints [2, 3, 5, 7]
Write a code to print out all the prime numbers between 2 and 10.


def remove_duplicates(data):
    """Remove all duplicate elements in an array"""
    
    # Initialize an empty list
    unique_data = []

    # Iterate over the data
    for i in data:
        # Check if element is not already in list
        if i not in unique_data:
            # If not, then add to list
            unique_data.append(i)
    
    return unique_data

print(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]
Write a function to remove all duplicate elements in an array.
data = [1, 2, 3, 2, 4, 5]

[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]
What will happen when the following code is executed?
a_list = [1, 2, 3, 4, 5]

for i in a_list:
    a_list.append(i + 6)

print(a_list)

The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2].
What data type should you use to store a list like [4, 7, 2] in a Python variable?


[2, 4, 5, 8, 9]
Rearrange the following list of numbers in an ascending order.
[9, 5, 8, 2, 4]

def check_even(arr):
    if arr == []:
        return "The list is empty!"
    elif not arr:
        return "The list is empty!"
    else:
        return all(x % 2 == 0 for x in arr)
Improve the following code to handle an input which is an empty list.
def check_even(arr):
    if arr == []:
        return "The list is empty!"
    else:
        return all(x % 2 == 0 for x in arr)

96
How much would you substract 5 to 101?


[81, 83, 85, 87, 89, 91, 93, 95, 97, 99]
Generate a list of odd numbers from 80 to 100.


def power_func(number):
    if number < 0:
        return "Invalid input!"
    else:
        return number**2
Modify the following code to handle an input which is a negative number.
def power_func(number):
    if number >= 0:
        return number**2

def factorial(n):
  if n < 0:
    return "Invalid input!"
  elif n == 0:
    return 1
  else:
    return n * factorial(n-1)
Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.
def factorial(n):
  	if n == 0:
  	   return 1
	else:
  	   return n * factorial(n-1)

mango
Given the following list, extract the item at index 2.
my_list = ["apple", "banana", "mango", "grapes"]

common_items = []

for item in arr1:
  if item in arr2:
    common_items.append(item)

print(common_items)  # Output: [2, 3, 5, 7]
Write a Python program to find out the common items from two given arrays.
arr1 = [1, 2, 3, 5, 7 ]
arr2 = [2, 3, 5, 6, 7]

def all_unique(string): 
  # loops through each character in string 
  for char in string: 
  
    # if character appears more than once, 
    # return False 
    if string.count(char) > 1: 
      return False 
      
  # return True if no characters appear more than once
  return True
Write a Python function to check whether a string has all unique characters.


my_dict = {"a": "apples", "b": "pears"}
Given the following dictionary, change the value of the key "a" to "apples".
my_dict = {"a": "bananas", "b": "pears"}

def list_sum(input_list):
    total = 0
    for item in input_list:
        total += item
    return total
Rewrite the following code so it can take a list as input instead of an integer.
def list_sum(num):
    total = 0
    for x in range(num):
        total += x
    return total

def compare_list(list_one, list_two):
    common_list = []
    i, j = 0, 0
    while (i < len(list_one) and j < len(list_two)):
        if list_one[i] == list_two[j]:
            common_list.append(list_one[i])
            i += 1
            j += 1
        elif list_one[i] < list_two[j]:
            i += 1
        else:
            j += 1
    return common_list
Design a program to compare two sorted lists and returning list with the common elements.
list_one=[5, 10, 15, 20, 25]
list_two=[15, 17, 20, 22, 25, 27]

def flatten_list(lst):
    res = []
    for l in lst:
        for i in l:
            res.append(i)
    return res
Design a program to flatten a given list.
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

def element_in_array(lst, n): 
    for i in range(len(lst)): 
        if n == lst[i]: 
            return True 
    return False
Write a script to determine whether an element is present in a given array.
Given array: [1,2,5,7]
Number to find: 5

def fibonacci_sequence(n):
    if n == 0:
        return []
    elif n == 1:
        return [1]
    else:
        lst = [1, 1]
        while len(lst) < n:
            lst.append(lst[-1] + lst[-2])
        return lst
Write a script to generate the Fibonacci sequence up to a certain number.
Number of elements to generate: 10

def intersection(list_one, list_two):
    lst = []
    for i in list_one:
        if i in list_two:
            lst.append(i)
    return lst
Design a program to find the intersection of two given arrays.
list_one=[5, 10, 15, 20, 25]
list_two=[15, 17, 20, 22, 25, 27]

def delete_element(lst, index):
    del lst[index]
    return lst
Write a script to delete an element from an array given its index.
Given array: [1, 2, 3, 4]
Index of element to delete: 1

def nth_fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        n1, n2 = 1, 1
        for i in range(2, n):
            n1, n2 = n2, n1 + n2
        return n2
Design a program to find the nth Fibonacci number.
n: 10

def occurance_count(str, char):
    count = 0
    for c in str:
        if c == char:
            count += 1
    
    return count
Design a program to find the occurrence of a given character in a given string.
Given string: "Hello World!"
Character to find: o

def multiply_ints(x, y): 
    return x * y
Generate a function to multiply two integers.


for char in s:
    print(char)
Create a loop to iterate over characters in a given string.
Sample string s = "Hello World"

if (num % 2 == 0):
    print("Even")
else:
    print("Odd")
Create an if-else statement to classify a given number into an even or an odd.


^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
Write a regular expression to validate a given string of IP addresses.


from sklearn.ensemble import RandomForestRegressor

# Initialize the model
model = RandomForestRegressor()

# Train the model using the predictor variables
model.fit(predictor_vars, target_var)
Create a project in random forest to learn the target variable given a set of predictor variables.
predictor_vars = ["age", "occupation"]
target_var = "income"

# Initialize weights with random values & weights
weights = np.random.uniform(-1,1, (num_nodes, num_inputs))
bias = np.random.uniform(-1,1, num_nodes)

#Forward pass
while True:
    
    # Compute a_L and estimated output y_hat
    a_L, y_hat = compute_forward_pass(x, weights, bias)
    
    # Compute the loss
    loss = compute_loss(y_hat, y)
    
    # Compute delta and derivatives
    delta = compute_delta(a_L, y)
    weights_derivatives, bias_derivatives = compute_derivatives(x, a_L, delta)

    # Update the weights
    weights -= learning_rate * weights_derivatives
    bias -= learning_rate * bias_derivatives
Use the back-propagation algorithm to learn the weights of a given neural network.


def traverse_tree(root):

    # Initialize the stack
    stack = [root]

    # traversal loop
    while stack:
        node = stack.pop()

        # Do something with the node
        ...

        # Push the left and right nodes to the stack
        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)
Create a loop to traverse a given binary tree.


@app.route('/get_average_transaction_amount', methods=['GET'])
def get_average_transaction_amount():
    customer_id = request.args.get('customer_id')
    query = "SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = %s"
    result = db.query(query, customer_id)
    return jsonify(result)
Write an API to return the average transaction amount of a customer.


def fibonacci(n):
    a = 0
    b = 1
    for i in range(n):
        print(a)
        a, b = b, a+b
Edit a python function to generate the fibonacci sequence.
def fibonacci(n):
    a = 1
    b = 0
    for i in range(n):
        print(a)
        a, b = b, a+b

def gaussian(x, y):
    n = len(x)
    l = np.linalg.inv(np.dot(x.T, x))
    k = np.dot(x.T, y)
    return np.dot(l, k).T
Use the Gaussian algorithm to learn the optimal parameters of a 2D linear regression model.
Training dataset: {(x1,y1), (x2,y2), (x3,y3)}

<html>
  <head> <title>My Student Table </title> </head>
  <body>
    <table>
      <thead>
        <tr>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Age</th>
        </tr>
      </thead>
      <tbody>
        {% for firstName, lastName, age in studentsList %}
          <tr>
            <td>{{ firstName }}</td>
            <td>{{ lastName }}</td>
            <td>{{ age }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>
Create an HTML page to display a table of students
Data of students: First name, LastName and Age

#This script will be used to write a status update in Slack.
import os
import time

def update_status(message):
    os.system('curl -X POST --data '{ "text": "' + message + '"}'' .....)
    time.sleep(1)
Add the code for a sleep() function to the following script.
#This script will be used to write a status update in Slack.
import os

def update_status(message):
    os.system('curl -X POST --data '{ "text": "' + message + '"}'' .....)

function isEvenNumber(num) {
  return num % 2 === 0;
}

let result = isEvenNumber(21);
console.log(result); //false
Write a JavaScript function to check whether a given number is odd or even.
num = 21

A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times.
Explain what a for loop does in Python.


<table>
  <tr>
    <th>Name</th>
    <th>Age</th>
    <th>Hobby</th>
  </tr>
  <tr>
    <td>Alice</td>
    <td>20</td>
    <td>Reading</td>
  </tr>
  <tr>
    <td>Bob</td>
    <td>25</td>
    <td>Outdoor activities</td>
  </tr>
</table>
Create an HTML table with 3 columns containing the given data.
Data:
Name | Age | Hobby
Alice | 20 | Reading
Bob | 25 | Outdoor activities

public class SumIntegers {
 
    public static void main(String[] args) {
        int n = 5;
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        System.out.println("Sum of integers from 1 to "+n+": "+sum);
    }
 
}
// Output: Sum of integers from 1 to 5: 15
Write a Java program to print the sum of all integers from 1 to given integer.
integer = 5

The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum.
Suggest a better algorithm to find the minimum element in a given array.


API stands for Application Programming Interface, which is a set of routines, protocols, and tools used to build software applications. It defines how two applications can interact with each other and allows for data to be exchanged between them. APIs provide developers with predefined sets of code which can be used to perform a variety of tasks and help developers build applications quickly and easily.
Explain what API stands for and what it does.


#Declaring an array
arr = [1, 2, 3, 4, 5]

# Your code
def shuffle(arr):  
    for i in range(len(arr)-1, 0, -1): 
        j = random.randint(0, i+1)
        arr[i], arr[j] = arr[j], arr[i] 
    return arr
Complete the following code to shuffle an array of elements.
#Declaring an array
arr = [1, 2, 3, 4, 5]

# Your code
def shuffle(arr):

A Trie (Prefix Tree) data structure is an efficient data structure for storing a list of words. It allows efficient insertion, deletion and search operations. It stores the words in a hierarchical structure by prefixing the words. This makes search operations very efficient since it involves only a single traversal of the Trie structure.
Suggest an efficient data structure to store a list of words.


# declare list of numbers
numbers = [x for x in range(0, limit+1)]

# declare empty list of even numbers
even_numbers = []

# loop through list of numbers
for num in numbers:
    # if number is even, append to even_numbers list
    if num % 2 == 0:
        even_numbers.append(num)

# print even numbers
print(even_numbers) # Output: [0, 2, 4, 6, 8, 10]
Write a Python program to print out the list of even numbers from 0 to given limit.
limit = 10

<?php
$arr = array(10, 25, 2, 39);
$max = $arr[0];
 
foreach ($arr as $value) {
   if ($value > $max) {
      $max = $value;
   }
}
 
echo $max; // Output: 39
?>
Write a PHP program to find the largest number from an array.
array = [10, 25, 2, 39]

for i in mylist:
print(i)
Write a for-loop to print out the values from a list named 'mylist'
mylist = [1,2,3,4,5,6,7]

class Car:
    
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
Create a class in Python called 'Car' and add instance variables for the car's make, model and year.


import requests

html = requests.get(url).text
Use the 'requests' library to retrieve the HTML content of a website.
url = "https://www.example.com"

import re

emails = re.findall(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", string)
print(emails)
Write a regular expression to extract all email addresses from a string.
string = "My email address is john@doe.com and your email address is jane@doe.com"

my_list = []
my_list.append("item1")
my_list.append("item2")
my_list.append("item3")
Initialize an empty list in Python and then add three items to it.


total_sum = 0
for num in mylist:
 total_sum += num
print(total_sum)
Calculate the sum of all the numbers in a list named 'mylist'.
mylist = [1,2,3,4,5]

lowercase_string = string.lower()
print(lowercase_string)
Convert a string to all lowercase using the built-in string method.
string = "This Is A String"

from collections import defaultdict

grouped_dicts = defaultdict(list)

for x in mylist:
 grouped_dicts[x['name']].append(x)
Group a list of dictionaries by a shared key.
mylist = [{'name': 'john', 'age': 20}, {'name': 'jane', 'age': 19}, {'name': 'bob', 'age': 22}]

mydict = dict(zip(mylist1, mylist2))
print(mydict)
Create a dictionary from two lists with the same length.
mylist1 = ["a", "b", "c", "d"]
mylist2 = ["1", "2", "3", "4"]

def linear_search(mylist, target):
 for i in range(len(mylist)):
 if mylist[i] == target:
 return i
 return -1
Perform a linear search in a list named 'mylist' and return the index of the first occurrence of a target value.
mylist = [1, 2, 3, 4, 5, 6, 7]
target = 4

import random

random_num = random.randint(1, 10)
print(random_num)
Generate a random number between 1 and 10, inclusive.


mylist.sort(key=len)
print(mylist)
Use the built-in sort method to sort a list of strings by their length.
mylist = ['this', 'is', 'a', 'long', 'list', 'of', 'strings']

import subprocess

result = subprocess.run(command, shell=True, capture_output=True)
print(result.stdout.decode('utf-8'))
Use the 'subprocess' library to execute a shell command and store its output.
command = "echo hello world"

def print_prime_numbers(n):
    primes = [] 
    for num in range(2, n + 1): 
        is_prime = True
        for i in range(2, num): 
            if (num % i == 0): 
                is_prime = False
                break
        if is_prime: 
            primes.append(num) 
    print(primes)
Create a method to print all the prime numbers up to n.


def reverse(arr): 
    n =len(arr) 
    for i in range(n // 2): 
        temp = arr[i] 
        arr[i] = arr[n - i - 1] 
        arr[n - i - 1] = temp
  
    return arr
Implement a reverse method to reverse the content of an array.
[1, 2, 3, 4, 5]

22
Retrieve the number of letters in the following phrase .
"May the force be with you!"

def check_dict(dictionary):
    for key in dictionary:
        print(key + ": " + str(dictionary[key]))
Create a method to checkout the content of dictionary.


def split_words(string_list):
    new_list = []
    for string in string_list:
        mid = int(len(string)/2) 
        new_list.append( (string[:mid], string[mid:]) )
    return new_list
You need to read a list of strings, split each into 2 substrings, and output the 2 substrings as a tuple.
['international', 'imagination', 'skyscraper']

def find_sum(n):  
    sum = 0
    for i in range (1, n): 
        if (i % 2 == 0): 
            sum = sum + i 
    return sum
Create a program to find the sum of all the even numbers from 1 to n.


def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False        
    return True
Create a function to find if a given input is a prime number or not.


64
Calculate the result of raising 2 to the power of 6.


def reverse_list(head): 
  
    prev = None
    current = head 
    while(current is not None): 
        next = current.next
        current.next = prev 
        prev = current 
        current = next
    head = prev 
    return head
Create a method to reverse a linked list.


def print_2d_array(arr):
    for row in arr:
        for el in row:
            print(el, end=' ')
        print("")
Print out the content of a two-dimensional array.
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

function printNumbers(n) {
 for (let i = 1; i <= n; i++) {
 console.log(i);
 }
}
Create a JavaScript function that prints out the numbers from 1 to n.


func sumOfElements(arr: [Int]) -> Int {
 let sum = arr.reduce(0, +)
 return sum
}
Create a Swift function to find the sum of elements in an array of integers.
let arr = [1,2,3,4,5]

class Circle {
  constructor(radius) {
    this._radius = radius;
  }
 
  get area() {
    return Math.PI * this._radius * this._radius;
  }
 
  get circumference() {
    return 2 * Math.PI * this._radius;
  }
}
Create a JavaScript class that returns the area and circumference of a circle when given the radius.


SELECT * FROM products WHERE id = 1234;
Write SQL code to find the product details of the item with ID 1234.


public class PrimeNumber
{
 static void Main()
 {
 int n1 = 2;
 int n2 = 10;
 while (n1 < n2)
 {
 bool isPrime = true;
 for (int i = 2; i <= n1 / 2; i++)
 {
 if (n1 % i == 0)
 {
 isPrime = false;
 break;
 }
 }
 if (isPrime)
 Console.Write(n1 + " ");
 n1++;
 }
 }
}
Write a C# program to create the list of prime numbers in a given range.


# import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# import data
data = pd.read_csv('stock_data.csv')

# preprocess data
X = data.iloc[:,:-1].values
y = data.iloc[:,-1].values

# split into training set and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# build the model
import keras
from keras.layers import Dense
from keras.models import Sequential

model = Sequential()
model.add(Dense(units=6, activation='relu', input_dim=4))
model.add(Dense(units=4, activation='sigmoid'))
model.add(Dense(units=1, activation='linear'))
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])
model.fit(X_train, y_train, epochs=20, batch_size=10)

# test the model
y_pred = model.predict(X_test)

# evaluate the model
from sklearn.metrics import r2_score
r2_score(y_test, y_pred)
Build a deep learning model in Python to predict the stock price of a given company.


# read the data
dat <- read.csv("data.csv")

# calculate the correlation
cor(dat$var1, dat$var2)
Write an R script to find the correlation between two variables.


function sortArray(arr) {
 return arr.sort(function(a, b) {
  return a - b;
 });
}
Write a JavaScript function to sort an array of integers.


SELECT * FROM items ORDER BY price DESC LIMIT 1;
Write a SQL query to find the most expensive item in the table.


// Java program to find sum of elements in a matrix 
public class Matrix 
{ 
	public static void main(String[] args) 
	{ 
		// Initialize matrix 
		int[][] matrix = {{1, 2, 3}, 
						{4, 5, 6}, 
						{7, 8, 9}}; 

		// Initialize sum 
		int sum = 0; 

		// Compute sum of elements 
		for (int i = 0; i < 3; i++) 
			for (int j = 0; j < 3; j++) 
				sum = sum + matrix[i][j]; 

		// Print Sum 
		System.out.println("Sum of elements is: " + sum); 
	} 
}
Write a Java program to find the sum of elements in a 3x3 matrix.


The code does not do anything with the value of y, meaning that it is not being used.
Describe in one sentence what is wrong with the following Java code.
public class Main {
    public static void main(String[] args) {
        int y;
        y = 10 + 5;
        y -= 30;
    }
}

The query can return results of any combination of columns from the two tables. It will return a set of records with the matching id from Table 1 and Table 2.
To what type of data can the following MySQL query return?
SELECT *
FROM table1 t1
INNER JOIN table2 t2
ON t1.id = t2.id

def greatest_difference(numbers_list):
    max_difference = 0
    for num1 in numbers_list:
        for num2 in numbers_list:
            if num1 != num2:
                difference = abs(num1 - num2)
                if difference > max_difference:
                    max_difference = difference
    
    return max_difference

greatest_difference(test_list)
Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.
test_list = [4, 6, 8, 10, 3, 1, 9]

<hello>Welcome to my website</hello>
Construct an XML element with tag 'hello' and the text 'Welcome to my website'.


The result of the code will be 2.
What will be the result of the following Ruby code?
a = 11
b = 3
c = a % b

The statement does not specify which records in MyTable it is attempting to retrieve, so it will return all columns of all records in the table.
Explain what is wrong with the following SQL statement.
SELECT column1, column2 FROM myTable;

SELECT CustomerID
FROM Orders
WHERE OrderTotal > 500;
Construct a SQL query to get all CustomerIDs from the Orders table if their OrderTotal is greater than 500.


for (let i = 1; i <= 10; i++) {
    console.log(i);
}
Create a loop in JavaScript that prints the numbers from 1 to 10 in the console.


<div>
 <h2>Welcome!</h2>
 <p>Hello and welcome to my website. Here, you can find all the information you need to know about me.</p>
</div>
Improve the following HTML structure.
<div>
<h2>Welcome!</h2>
<p>This is my website.</p>
</div>

The three types of looping structures in Java are for-loops, while-loops, and do-while loops.
Name three types of looping structures in Java.


A callback function in JavaScript is a function that is passed as an argument to another function and is executed after the outer function has finished executing.
What is a callback function in JavaScript?


<head>
 <meta charset="UTF-8">
 <title>My Webpage</title>
 <link rel="stylesheet" type="text/css" href="style.css">
</head>
Augment the following HTML structure to include a link to a CSS document.
<head>
 <meta charset="UTF-8">
 <title>My Webpage</title>
</head>

A tree structure in data structures is a hierarchical structure composed of a root node connected to one or more nodes each of which is connected to one or more other nodes. It is a non-linear data structure that allows efficient insertion and retrieval of data.
Explain in simple terms what is a tree structure in data structures.


SELECT * FROM Books;
Write code to retrieve data from a given MySQL table.
Table Name: Books

5040
Calculate the factorial of a given number.
The number is 7

// create a struct to represent a node
struct node 
{ 
    int data; 
    struct node* next; 
}; 
  
// function to insert an element in the Linked List 
void push(struct node** head_ref, int newdata) 
{ 
    // allocate memory for the node 
    struct node* newnode = (struct node*) malloc(sizeof(struct node)); 
  
    // adding data to the node 
    newnode->data = newdata; 
  
    // make next point to the previous head 
    newnode->next = (*head_ref); 
  
    // move the head point to the new node 
    (*head_ref) = newnode; 
}
Create a Linked List in C++.


2, 4, 6, 8, 10
Output the even numbers between 0 and 10.


SELECT AVG(Age) FROM Students;
Write a query to display the average age of the students.
Table Name: Students

true
Compare two strings to determine if they are equal or not.
String1: "Hello World"
String2: "Hello World"

//Function to collect all the alphabets
function getAlphabets(str) {
  const result = [];
  for(let i=0; i < str.length; i++) {
    if(str[i].match(/[a-z]/i)) {
      result.push(str[i]);
    }
  }
  return result;
}

//Call function and pass the string as parameter
let alphabets = getAlphabets("My name is John!"); 
console.log(alphabets); // Output: ["M", "y", "n", "a", "m", "e", "i", "s", "J", "o", "h"]
Create a function to collect all the alphabets from a given string.
The string is "My name is John!"

SELECT CustomerName FROM Orders;
Write a query to retrieve all the customer names from an orders table.
Table Name: Orders

number is of type number.
Obtain the type of the data in the given code.
let number = 10;

let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
Create an array of the numbers from 1 to 10.


<html>
<head>
  <title>Pink and Purple Layout</title>
  <style>
    body {
      background-color: pink;
    }
    #container {
      display: flex;
    }
    #container > div {
      flex: 1;
      background-color: purple;
    }
  </style>
</head>
<body>
  <div id="container">
    <div></div>
    <div></div>
    <div></div>
  </div>
</body>
</html>
Design a webpage with a given template.
Template: Pink and Purple with three-column layout

18.85
Calculate the circumference of a circle.
Radius: 3

def FibonacciSequence():
  a, b = 0, 1
  for _ in range(10):
    yield a
    a, b = b, a + b

for num in FibonacciSequence():
  print(num)
Create a Python program to generate the Fibonacci series between 0 and 10.


panther, plane, purple, parking, planet
Generate a set of five English words starting with the letter "P".


numbers = [1,2,3,1,4,9]
Given a list of numbers, extend the list such that it contains the square of the elements present in the list.
numbers = [1,2,3]

words = ["Hello", "there", "Welcome to the party"]
Append a string "Welcome to the party" at the end of the provided array.
words = ["Hello", "there"]

SELECT SUM(myColumn) FROM myTable
Write an SQL query to get the sum of the values in a column.
tableName: myTable
columnName: myColumn

body {
 font-size: 12px;
}
Create a CSS rule to set the body's font size to 12px.


numbers = [2, 4]
Filter the provided array by returning only even numbers.
numbers = [1, 2, 3, 4, 5]

<table>
 <tr>
  <th>Name</th>
  <th>Age</th>
 </tr>
 <tr>
  <td>John</td>
  <td>23</td>
 </tr>
 <tr>
  <td>Sarah</td>
  <td>26</td>
 </tr>
</table>
Reorganize the provided data into an HTML table.
students = [
  {name: 'John', age: 23},
  {name: 'Sarah', age: 26 },
]

// Stack class 
class Stack 
{ 
    static final int MAX = 1000; 
    int top; 
    int a[] = new int[MAX]; // Maximum size of Stack 
  
    boolean isEmpty() 
    { 
        return (top < 0); 
    } 
    Stack() 
    { 
        top = -1; 
    } 
  
    boolean push(int x) 
    { 
        if (top >= (MAX-1)) 
        { 
            System.out.println("Stack Overflow"); 
            return false; 
        } 
        else
        { 
            a[++top] = x; 
            System.out.println(x + " pushed into stack"); 
            return true; 
        } 
    } 
  
    int pop() 
    { 
        if (top < 0) 
        { 
            System.out.println("Stack Underflow"); 
            return 0; 
        } 
        else
        { 
            int x = a[top--]; 
            return x; 
        } 
    } 

    int peek() 
    { 
        if (top < 0) 
        { 
            System.out.println("Stack Underflow"); 
            return 0; 
        } 
        else
        { 
            int x = a[top]; 
            return x; 
        } 
    } 	
}
Implement a stack data structure in Java.


function replaceVowels(str) {
  return str.replace(/[aeiou]/gi, '*');
}
Write a JavaScript program to replace all the vowels in a given string with '*'.


public class Fibonacci {

  public static void main(String[] args) {
    printFibonacci();
  }

  public static void printFibonacci() {
    int n1 = 0;
    int n2 = 1;
    int n3;

    System.out.print(n1 + " " + n2);

    for (int i = 0; i < 8; i++) {
      n3 = n1 + n2;
      System.out.print(" " + n3);
      n1 = n2;
      n2 = n3;
    }
  }

}
Create a Java class that prints the Fibonacci sequence between 0 and 10.


def calculate_sum(numbers):
      total = 0
      for number in numbers:
          total += number
      return total
Make sure the following code runs without errors.
def calculate_sum(numbers):
      total = 0
      for number in numbers
          total += number
      return total

def calculate_area(base, height):
    area = 0.5*base*height
    area = float(area)*(10**-6)
    return area
Incorporate the following change in the given code.
def calculate_area(base, height):
    area = base*height
    area = float(area)
Change: Calculate area of the triangle in square meters.

"""
Create a Python function which takes an array and returns 
true if the array contains all unique values
"""

def is_unique(arr):
    seen = set()
    for x in arr: 
        if x in seen: 
            return False
        seen.add(x)
    return True
    
if __name__ == '__main__':
    arr = [1,2,3,2]
    result = is_unique(arr)
    print(result)
    
# Output
# False
Create a Python function which takes an array and returns true if the array contains all unique values.
array = [1, 2, 3, 2]

"""
Calculate the value of pi using mathematical methods
"""

def calculate_pi():
    pi = 0  
    n = 1000
    for n in range(n):
        pi += ((-1)**n)/(2*n+1)
    pi = pi*4
    return round(pi, 6)

if __name__ == '__main__':
    print(calculate_pi())

# Output
# 3.141593
Write a code to get the value of pi (to 6 decimal places) using mathematical methods.


import matplotlib.pyplot as plt

data_points = [12, 13, 19, 20, 25]

plt.plot(data_points)
plt.ylabel("data points")
plt.xlabel("index")
plt.title("Line chart of data points")

plt.show()
Visualize the following on a line chart.
Data points = [12, 13, 19, 20, 25]

"""
Implement a binary search on a given array
"""

def binary_search(arr, element):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end)//2
        if arr[mid] == element:
            return True
        elif arr[mid] < element:
            start = mid + 1
        else:
            end = mid - 1
    return False

if __name__ == '__main__':
    arr = [1, 4, 5, 6, 7, 9]
    element = 7
    result = binary_search(arr, element)
    print(result)

# Output
# True
Implement a binary search on the given array.
Array = [1, 4, 5, 6, 7, 9]

arr = [1, 2, 3, 4, 5]

for x in arr[::-1]:
    print(x)
Change the following code so that it prints the list elements in reverse order.
arr = [1, 2, 3, 4, 5]

for x in arr:
    print(x)

2
8
Consider the following program. Find out the output without running it.
my_list = [1, 1, 2, 3, 5, 8]

for x in my_list:
    if x%2 == 0:
        print(x)

"""
Create a function that takes a string and returns a new string with each character capitalized
"""

def capitalize(string):
    new_string = ""
    for c in string:
        new_string += c.upper()
    return new_string
    
if __name__ == '__main__':
    string = "hello!"
    result = capitalize(string)
    print(result)

# Output
# HELLO!
Create a function that takes a string and returns a new string with each character capitalized.
String = "hello!"

// Initial Array
[3, 4, 8, 1, 5]

// 1st Pass
[3, 4, 8, 1, 5] // Move 8 to the left
[3, 4, 1, 8, 5]

// 2nd Pass
[3, 4, 1, 8, 5] // Move 4 to the left
[3, 1, 4, 8, 5]

// 3rd Pass
[3, 1, 4, 8, 5] // Move 3 to the left
[1, 3, 4, 8, 5]

// 4th Pass
[1, 3, 4, 8, 5] // Move 8 to the right
[1, 3, 4, 5, 8]

// Final Array
[1, 3, 4, 5, 8]
Show how this array could be sorted using the insertion sort algorithm.
[3, 4, 8, 1, 5]

// get the current browser language
var language = navigator.language || navigator.userLanguage;

if (language === "en") {
    console.log("Hello, welcome to the website!");
} 
else if (language === "de") {
    console.log("Hallo, willkommen auf der Webseite!");
}
else if (language === "fr") {
    console.log("Bonjour, bienvenue sur le site Web!");
}
else {
    console.log("Welcome to the website!");
}
Write a short JavaScript code snippet to detect a browser language and display a response message in that particular language.


// To sort an array in ascending order using the bubble sort algorithm:
// 1. Initialize the array to be sorted
// 2. Iterate over the array and compare adjacent elements
// 3. If the element on the left is greater than the element on the right, swap them
// 4. Repeat steps 2 and 3 until the array is sorted
// 5. Return the sorted array
Describe how to use the following code to sort an array in ascending order.
function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len; j++) {
            if (arr[j] > arr[j+1]) {
               let temp = arr[j];
               arr[j] = arr[j+1];
               arr[j+1] = temp;
            }
        }
    }
    return arr;
}

// Create an integer array
int[] array = {4, 2, 6, 1, 3};

// Sort the array using the bubbleSort function
bubbleSort(array);

// Write a function to implement the bubbleSort algorithm
public static int[] bubbleSort(int[] array) {
    int len = array.length;
    for (int i = 0; i < len; i++) {
        for (int j = 0; j < len; j++) {
            if (array[j] > array[j+1]) {
                int temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
            }
        }
    }
    return array;
}
// The sorted array is [1, 2, 3, 4, 6]
Create an integer array using Java and sort it using the bubble sort algorithm.


// To add an element in a linked list in Python:
// 1. Create a new node containing the value to be added
// 2. Set the "next" attribute of the new node to point to the current head node
// 3. Set the head node to be the newly created node
// 4. Increase the size of the linked list by 1
Describe how to add an element in a linked list in Python.


// To implement a heap sort algorithm in Java:
// 1. Build a min heap from the input data.
// 2. At the top of the heap, obtain the minimum element.
// 3. Exchange the minimum element with the last element of the heap.
// 4. Reduce the size of the heap by one and heapify the root of the heap.
// 5. Repeat steps 2-4 until all the elements are sorted.
// 6. Return the sorted array.
Explain how to implement a heap sort algorithm in Java.


# Parse an XML document using Python
import xml.etree.ElementTree as ET

# load the XML document
tree = ET.parse('document.xml')
# get the root element
root = tree.getroot()
# loop through all the elements
for element in root.findall('element'):
    # print the attributes of all elements
    print(element.attrib)
Suggest a Python code to parse an XML document.


// To generate random numbers using the code provided:
// 1. Specify number of digits to generate
// 2. Use the random_with_N_digits function to generate the random number
// 3. Pass the desired number of digits as the argument in the function
// 4. The function will return a random number between 10^(n-1) and 10^n-1
// 5. Use the returned random number for the desired purpose
Describe how to use the following code to generate random numbers.
import random

def random_with_N_digits(n):
    range_start = 10**(n-1)
    range_end = (10**n)-1
    return random.randint(range_start, range_end)

# Create a frequency table for the given sequence
# using Python
from collections import Counter

string = 'aabbccddee'
# create the Counter object
freq_table = Counter(string)
# print the output
print(freq_table)

# Output
Counter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})
Generate a Frequency Table for the following sequence of characters using Python.
'aabbccddee'

# To identify whether a given string contains only numeric values in Python:
# 1. Use the isdigit method of the str object
# 2. Pass the given string as an argument to the isdigit method
# 3. The method will return True if the given string contains only numeric values,
#    and False otherwise

# Example
given_string = "1234"

if given_string.isdigit():
    print("The given string contains only numeric values")  
else:
    print("The given string does not contain only numeric values")
In Python, write code to identify whether a given string contains only numeric values.


// To perform a bubble sort on a given array:
// 1. Iterate over the array and compare adjacent elements
// 2. If the element on the left is greater than the element on the right, swap them
// 3. After each pass, the largest element in the array will "bubble" up to the right
// 4. Continue to iterate and swap until the array is sorted
// 5. Return the sorted array
Explain how to perform a bubble sort on a given array.


// To parse an XML document in JavaScript:
// 1. Use the DOMParser to load the XML document into an XML Document object
// 2. Use the getElementsByTagName method to obtain all the elements with a specific tag in the document
// 3. Use the getElementsByTagNameNS method to obtain all the elements with a specific tag and namespace in the document
// 4. Use the getAttribute method to obtain the attribute values of the desired elements
// 5. Use the getElementsByClassName method to obtain all the elements with a specific class in the document  
// 6. Parse the elements and create a custom object according to the returned XML.
Write a script in JavaScript to parse an XML document.


// To calculate the sum of all elements in an array using the code provided:
// 1. Initialize the array of integers to be summed
// 2. Use the calcSum function to iterate over the array and sum all of its elements
// 3. Return the calculated sum from the calcSum function
Describe how to use the following code to calculate the sum of all elements in an array in Java.
public static int calcSum(int[] arr) {
    int sum = 0;
    for (var i = 0; i < arr.length; i++) {
        sum += arr[i];
    }
    return sum;
}

apple, cat, dog, flower
Sort the given words in lexicographical order.
apple, cat, flower, dog

SELECT name
FROM students
WHERE class1 = 1 AND class2 = 1 AND class3 = 1;
Write SQL code to find the names of students who are enrolled in all three classes.
Table name: students
Columns: student_id, name, class1, class2, class3

0, 1, 1, 2, 3, 5, 8, 13, 21, 34
Generate the Fibonacci sequence up to the 10th number.


10000000
Convert this number from decimal to binary.
128

function reverseString(str) {
    let revStr = '';
    for(let i = str.length-1; i >= 0; i--) {
        revStr += str[i];
    }
    return revStr;
}
Write a JavaScript function for reversing a string.


O(n), where n is the number of elements in the list. This algorithm has linear time complexity, because the amount of operations performed is directly dependent on the number of elements in the list.
Identify and explain the Big O runtime complexity of this algorithm.
def find_sum(numbers): 
    total = 0
    for num in numbers:
        total += num
    return total

#include <iostream>
#include <vector>
 
int sumArray(std::vector<int> &nums)
{
    int sum = 0;
    for (int num : nums) {
        sum += num;
    }
    return sum;
}
 
int main()
{
    std::vector<int> nums = {1, 2, 3, 4, 5};
    std::cout << "Sum: " << sumArray(nums);
    return 0;
}
Create a C++ program to calculate the sum of numbers in an array.
std::vector<int> numbers = {1, 2, 3, 4, 5};

Imperative sentence.
Classify the following statement.
I must finish the project by tomorrow.

class Stack: 
    def __init__(self): 
        self.stack = []

    def push(self,element): 
        self.stack.append(element)  

    def pop(self): 
        return self.stack.pop()

    def peek(self):
        return self.stack[-1]
Create a class in Python that implements a stack.


calc_mean <- function(x) {
    mean(x)
}
Write an R function to calculate the mean of a numerical vector.


You should do your homework every day.
Transform the following sentence into a declarative sentence.
Do your homework every day.

sentence_words = set(sentence.split())
unique_words = set(word for word in sentence_words if word not in visited_words)
print(unique_words)
# Output: {'contains', 'words', 'multiple', 'This'}
Create a Python program to extract all unique words from a given sentence.
This sentence contains multiple words.

The "break" keyword is used to immediately break out of a loop in the C programming language. It can also be used to break out of a switch statement. It is used to terminate a loop or switch statement and transfer program control to the next statement after the loop or switch.
What is the purpose of the "break" keyword in C language?


import java.util.Scanner;

public class Sum {

public static void main(String[] args) {
 
Scanner sc = new Scanner(System.in);
 
System.out.println("Enter first number:");
int num1 = sc.nextInt();
 
System.out.println("Enter second number:");
int num2 = sc.nextInt();
 
int sum = num1 + num2;
 
System.out.println("The sum is: "+sum);
 
 }
}
Create a Java program that reads two numbers from the user and prints the sum.


SELECT MAX(salary) FROM salary;
Write a SQL query to find the highest salary of a employee in the salary table?


The if-else statement is a control statement in JavaScript that is used to execute a block of code if a certain condition is true, and a different block of code if the condition is false. It is a type of decision-making statement which allows a program to execute a certain code depending on a certain condition.
What is the purpose of the "if-else" statement in JavaScript?


<!DOCTYPE html>
<html>
<head>
    <title>Hello World Page</title>
    <style>
        h1 {
            color: red;
        }

        h2 {
            color: blue;
        }

        h3 {
            color: green;
        }
    </style>
</head>
<body>
    <h1>Hello, World!</h1>
    <h2>Hello, World!</h2>
    <h3>Hello, World!</h3>
</body>
</html>
Create a HTML page that displays the words "Hello, World!" in different colors.


#include<iostream>  
using namespace std;  
int main()  
{  
 int i, j,flag;   
 for (i = 2; i <= 100; i++)  
 {  
     flag = 0;  
     for (j = 2; j <= i / 2; j++)  
     {  
         if (i % j == 0)
         {  
             flag = 1;  
             break;  
         }  
     }  
     if (flag == 0)  
         cout << i << " ";  
 }  
 return 0;  
}
Write a C++ program to print all prime numbers between 1 and 100.


SELECT Name, Title 
FROM Employees 
WHERE Department = 'Marketing';
Write a SQL query that finds, in a table of employees, the names and titles of all employees who work in the Marketing department.
Table: Employees

| EmployeeID | Name | Department   | Title                   |
|------------|------|--------------|-------------------------|
| 1          | Bob  | Marketing    | Senior Marketing Manager |
| 2          | Joe  | Finance      | Financial Analyst       |
| 3          | Jane | Marketing    | Marketing Manager       |
| 4          | Alex | Sales        | Sales Representative     |

for (int i = 0; i < list.length; i++) {
 System.out.println(list[i]);
}
Write a for loop in Java to print all the numbers in a given list.
int[] list = {21, 34, 54, 77, 92};

A HashMap could be a suitable data structure to store the names of fruits and vegetables in an online store. The keys should be the names of the fruits and vegetables, and the values should store a description or additional information about them. For example, the key could be "Banana" and the value could be "A yellow-skinned fruit with a sweet taste".
Suggest a data structure to store the following data.
Names of fruits and vegetables in an online grocery store

def my_concat(string1, string2)
    return string1 + ' ' + string2
Write a function in Python that takes in two strings and concatenates them together with a space in between.


min_ele = arr[0]
for i in range (1, len(arr)):
    if (min_ele > arr[i]):
       min_ele = arr[i] 
    
print("Minimum element in array is", min_ele)
Find the minimum element in an unordered array given in Python.
arr = [17, 21, 4, 7, 29, 34, 11]

public static void sortAscending(int[] array) 
{ 
    // Sort the array in ascending order 
    Arrays.sort(array); 
  
    System.out.println("Array in Ascending Order: "); 
    for (int i = 0; i < array.length; i++)  
    { 
        System.out.print(array[i] + " "); 
    } 
}
Write a function in Java to sort a given array of numbers into ascending order.
int[] array = {11, 7, 18, 2, 5, 8};

<html>
<head>
    <title>Operating System</title>
</head>
<body>
    <h2>Operating System</h2>

</body>
</html>
Create a HTML page with a heading 2 of "Operating System".


// max is assign to 0 as a starting point
let max = 0;

for (let i=0; i < array.length; i++) {
  // If the current value of i is greater than max, max will be updated
  if (array[i] > max) { 
    max = array[i];
  }
}

console.log(max); // Output: 20
Suggest an algorithm for finding the maximum element in an unordered array given in JavaScript.
let array = [9, 4, 15, 10, 6, 20];

def character_count(str): 
    res = {} 
  
    for keys in str: 
        res[keys] = res.get(keys, 0)+1
        
    return res
Write a function that takes a string and returns a dictionary counting each character in the string.


#!/bin/bash
 
for i in `seq 1 5`;
do
  echo "Hello World!"
done
Create a bash script that prints out "Hello World" five times.


body {
  background-color: yellow;
}
Write a CSS style to add a yellow background to the body of a webpage.


A Bubble Sort algorithm could be used to sort the given array in descending order. This algorithm compares adjacent elements in the array and swaps them if the element on the left is larger than the element on the right. This process is continued until the array is sorted.
Suggest a sorting algorithm to sort the following array in descending order.
arr = [17, 21, 4, 7, 29, 34, 11]

public class Area
{
 public static void main(String[] args)
 {
 double length = 10;
 double width = 5;
 double area = length * width;

 System.out.println("The area of the rectangle = "+area);
 }
}
Modify the following Java program to find the area of a rectangle.
public class Area
{
 public static void main(String[] args)
 {
 double radius = 10;
 double area = 3.14 * radius * radius;

 System.out.println("The area of the circle = "+area);
 }
}

['X', 'Z', 'J', 'G', 'M', 'B', 'Y', 'Q', 'C', 'T']
Generate a list of 10 random capital letters.


thisStringShouldBeConvertedToCamelCase
Convert the following string to camelCase.
this_string_should_be_converted_to_camelCase

[1, 2, 3, 4, 5, 6]
Merge the two lists below together.
list_a = [1,2,3] 
list_b = [4,5,6]

txet elpmas a si sihT
Read the input text and reverse it character by character.
This is a sample text

mySet = {"A", "B", "C"}
Create an empty set in Python and add the following items into it: "A", "B", "C"


1 4 7 2 5 8 3 6 9
Print the following 2D matrix in row-major order.
[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]

{"A": 1, "B": 1, "C": 1}
Create a Python dictionary with keys "A", "B", "C" and each key value should be the length of corresponding key.


import numpy as np
np.random.RandomState(0).rand(3, 3)
Generate a 3x3 matrix of random real numbers in the range of 0.0 to 1.0.


A + ' ' + B
Concatenate the two strings below, with a space inserted between them.
A = "Hello"
B = "World!"

sum(list_of_numbers) / len(list_of_numbers)
Calculate the average from a given list of integers.
[1, 2, 3, 4, 5]

sum(list_of_numbers)
Find the sum of the elements in a given list of numbers.
[1, 2, 3, 4, 5]

def some_function(nums):
  for x in nums:
    yield x ** 2
Rewrite the following code into a generator.
def some_function(nums):
  output = []
  for x in nums:
    y = x ** 2
    output.append(y)
  return output

size_t found = string.find(sub_string);
if (found != string::npos) {
    // sub-string found
} else {
    // sub-string not found
}
In C++, search a given string for a given sub-string.
string = "This is a string"
    sub_string = "ing"

#!/bin/bash

ls
Write a bash script to list the content of the current directory.


let person = {
  name: "John Doe",
  age: 25
};
Create a JavaScript object to represent a person's name and age.


let numbers = [1, 3, 5, 7, 9];
Generate an array of odd numbers up to and including the number 10.


let datetime = new Date();
Create a JavaScript variable to store the current date and time.


def letter_counts(sentence):
  count_dict = {}
  for char in sentence:
    if char.isalpha():
      if char in count_dict:
        count_dict[char] += 1
      else:
        count_dict[char] = 1
  return count_dict
Write a Python function to count the letters in a given sentence and return a dictionary of letter counts.
sentence = "Hello World!"

class User {
  public $name;
  public $age;

  function __construct($name, $age) {
    $this->name = $name;
    $this->age = $age;
  }
}
Suggest a syntax to create a PHP class for a user.


SELECT AVG(salary) 
FROM Employees 
WHERE department = 'sales';
Create a SQL query to find the average salary of all employees in the department labeled "sales".


.heading {
  font-size: 16px;
}
Write a CSS selector to apply a font-size of 16px to every element with a class of "heading".


import random

random_tuple = tuple(random.randint(5, 15) for _ in range(5))
Generate a 5-element tuple of random numbers between 5 and 15 using Python.


<input type="radio" name="fruit" value="apple"> Apple<br>
<input type="radio" name="fruit" value="banana"> Banana<br>
<input type="radio" name="fruit" value="orange"> Orange
Edit the following HTML code to add an additional radio button with the label "orange".
<input type="radio" name="fruit" value="apple"> Apple<br>
<input type="radio" name="fruit" value="banana"> Banana

def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
  
    s1 = sorted(str1) 
    s2 = sorted(str2) 
  
    if s1 == s2: 
        return True
  
    return False
Write a function in Python to check if two strings are an anagram or not.


The errors are:
1. The semicolon at the end of line 2 is missing.
2. The line 4 should be `System.out.println("The sum is: " + z);` (the capital S is missing).
3. The line 5 is an extra line which should be removed.
Analyze the given Java code and identify the errors.
public class TestClass {
   public static void main (String[] args) {
      int x = 10;
      int y = 20
      int z = x + y;
      system.out.println("The sum is: " + z);
   }
}

CREATE TABLE User_Data (
User_ID INT,
FirstName VARCHAR (20) NOT NULL,
LastName VARCHAR (20) NOT NULL,
Email VARCHAR (50) NOT NULL,
 PRIMARY KEY (User_ID)
);
Create a new MySQL table to store user data.
Table structure: 
User_ID, FirstName, LastName, Email

import random

def generate_random_string():
  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  random_string = ''
  for x in range(5):
    random_string += random.choice(characters)
  
  return random_string

print(generate_random_string())
Create a Python program to generate a random string of 5 characters.


list = [0] + list 
list.insert(0, new_element)
Manipulate the given list in Python to include the new element at the beginning.
list = [1, 2, 3]
new_element = 0

SELECT * FROM Employee 
ORDER BY Salary DESC;
Write a query in SQL to list the employee information from the given Employee table in descending order of their salaries.
Table structure:
Employee_ID  Name   Department   Salary

<html>
  <head>
    <title>Test Page</title>
  </head>
  <body>
    <h1>This is a test page</h1>
  </body>
</html>
Write an HTML page including the given text.
This is a test page

SELECT AVG (Salary) 
FROM Employee ;
Find the average salary of the given table.
Table structure:
Employee_ID  Name   Department   Salary

SELECT * FROM customers WHERE customer_id = 'CID001';
Write a SQL query to select the row with the customer id "CID001" from the customers table.


h1 {
  color: red;
}
Create a CSS rule to make all h1 elements red in color.


A linked list is the most efficient data structure for storing a list of strings, as it offers constant-time insertions and deletions.
Identify the most efficient data structure to store a list of strings.


def find_average(num1, num2): 
  total = num1 + num2 
  average = total / 2
  return average
Using the code below, update the function to find the average of two numbers.
def find_average(num1, num2): 
  total = num1 + num2

document.getElementById('myDiv').style.textAlign = "center";
Write a JavaScript code snippet to center text in a div element with id "myDiv".


let randomString = Math.random().toString(36).substring(2, 12);
Generate a random string with 10 characters.


print("Hello World!")
Write a Python code to print "Hello World!" on the console.


car_models = ["Honda Accord", "Toyota Corolla", "Ford F150"]
Create a list of car models that includes "Honda Accord", "Toyota Corolla", and "Ford F150".


let a = prompt('Enter the first number:');
let b = prompt('Enter the second number:');
let sum = parseInt(a) + parseInt(b);
console.log(sum);
Write a JavaScript code to add two numbers using a prompt.


<h1 class="myClass">My Website</h1>
Using the provided HTML, add a class attribute to the h1 tag so its style can be updated.
<h1>My Website</h1>

fruits = {
 "apple": "red",
 "banana": "yellow",
 "grape": "purple"
}
Create a dictionary of fruits and their respective colors.


.myClass { 
  font-size: 16px;
  font-weight: bold;
}
Edit the provided CSS rule to make all elements with the class "myClass" have a bold font-weight.
.myClass { 
  font-size: 16px;
}

class Vector2D(object):
  '''Class to represent a two-dimensional vector'''
  def __init__(self, x, y):
    self.x = x
    self.y = y
  
  def __add__(self, other):
    return Vector2D(self.x + other.x, self.y + other.y)
  
  def __sub__(self, other):
    return Vector2D(self.x - other.x, self.y - other.y)
  
  def __mul__(self, scalar):
    return Vector2D(self.x * scalar, self.y * scalar)
Create a class to represent a two-dimensional vector.


Grover's algorithm is a quantum algorithm that offers exponential speedup over classical search algorithms. As an example of how it works, assume we want to find an element in a database of size N. For a classical algorithm, the best search time is O(log N). In contrast, Grover's algorithm provides a search time of only O((log N)^2). Thus, using Grover's algorithm, the search time is reduced by a factor of log N for a given problem size. Furthermore, Grover's algorithm does not require any additional memory to store data, as it operates directly on the states of the quantum system. This can also provide significant advantages compared to classical search algorithms.
Compare the performance of Grover's algorithm and classical search algorithms.


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_head(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        curr_node = self.head
        while curr_node.next is not None: 
            curr_node = curr_node.next
        curr_node.next = new_node

    def delete_by_value(self, data):
        if self.head is None:
            return
        curr_node = self.head
        if curr_node.data == data:
            self.head = curr_node.next
            return
        prev_node = curr_node
        while curr_node is not None:
            if curr_node.data == data:
                break
            prev_node = curr_node
            curr_node = curr_node.next
        if curr_node is None:
            return
        prev_node.next = curr_node.next
Implement a linked list in Python.


List<Object> list = Arrays.asList({
    {'name': 'John', 'age': 20},
    {'name': 'Smith', 'age': 30},
    {'name': 'Bill', 'age': 40}
});

Stream<Object> stream = list.stream();

// Filter records whose age greater than 25
stream.filter(record -> (int) record.get("age") > 25).forEach(System.out::println);
Create a Java 8 Stream to filter a list of objects by a given field.
[
    {'name': 'John', 'age': 20},
    {'name': 'Smith', 'age': 30},
    {'name': 'Bill', 'age': 40}
]

A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition.
Identify a potential bug in the following code.
def add(a, b):
    c = a + b
    return c

switch (action) {
  case 'play':
    console.log('Playing...');
    break;
  case 'stop':
    console.log('Stopping...');
    break;
  default:
    console.log('Undefined action'); 
}
Edit this JavaScript code to use the correct syntax for the switch statement.
if (action == 'play') {
  console.log('Playing...');
} else if (action == 'stop') {
  console.log('Stopping...');
} else {
  console.log('Undefined action');
}

A Turing machine is a mathematical model of computation that was initially developed by Alan Turing in 1936. It is a device that can read and write symbols on a strip of tape according to a set of instructions. The tape is divided into individual squares, each of which can hold one symbol at a time. The machine can move either right or left one square at a time, and has a set of instructions that determine how its internal state changes based on which symbol it reads. The Turing machine is a powerful tool for understanding computation, as it can be used to simulate any algorithm or computation.
Explain what a Turing machine is.


{
    "name": "John",
    "age": 20,
    "info": {
        "height_cm": 178,
        "weight_kg": 73
    }
}
Format this JSON data as per a specific schema.
{
    "name": "John",
    "age": 20,
    "height_cm": 178,
    "weight_kg": 73
}

The purpose of an abstract data type in software engineering is to allow for the creation of data structures which have a certain behavior, without having to specify exactly how the data is represented in memory. Abstract data types are useful for organizing large amounts of data in complex systems, as they provide a clear interface for users to interact with the data without requiring them to understand the underlying implementation. By separating the data structures from the algorithms that operate on them, abstract data types can also reduce the complexity of software development.
What is the purpose of an abstract data type in software engineering?


The primary purpose of object-oriented programming is to create software systems that are modular, reusable, and maintainable. By modeling real-world objects and their behavior as individual components, object-oriented programming enables developers to create and manage complex systems in an organized and efficient manner. It also allows the code to be easily modified and adapted to fit the changing needs of the user. Additionally, object-oriented programming makes software more secure, as all the code is contained within individual objects which can be handled securely.
What is the primary purpose of object-oriented programming?


public class Student {
  private String name;
  private int age;
  private String course;

  public Student(String name, int age, String course) {
    this.name = name;
    this.age = age;
    this.course = course;
  }

  public void setName(String name) {
    this.name = name;
  }
  public String getName(){
    return name;
  }
  
  public void setAge(int age){
    this.age = age;
  }

  public int getAge(){
    return age;
  }
  
  public void setCourse(String course){
    this.course = course;
  }

  public String getCourse(){
    return course;
  }
}
Design a class in Java that can store student information.


public class StudentList {
  private ArrayList<Student> students;
  private ArrayList<String> courses;

  public StudentList() {
    this.students = new ArrayList<Student>();
    this.courses = new ArrayList<String>();
  }

  public void addStudent(Student student) {
    this.students.add(student);
  }
  
  public void addCourse(String course) {
    this.courses.add(course);
  }
  
  public ArrayList<Student> getStudents() {
    return this.students;
  }
  
  public ArrayList<String> getCourses() {
    return this.courses;
  }
}
Create a class in Java that can store a list of students and the courses they are enrolled in.


SELECT name FROM employees WHERE age > 25;
Write an SQL query to select the names of all employees from the table 'employees' with an age greater than 25.


a = 10
b = 20
Change the variable names in the following Python code.
x1 = 10
y1 = 20

public class BookCollection {
  private ArrayList<Book> books;
  private ArrayList<String> authors;

  public BookCollection() {
    this.books = new ArrayList<Book>();
    this.authors = new ArrayList<String>();
  }

  public void addBook(Book book) {
    this.books.add(book);
  }
  
  public void addAuthor(String author) {
    this.authors.add(author);
  }
  
  public ArrayList<Book> getBooks() {
    return this.books;
  }
  
  public ArrayList<String> getAuthors() {
    return this.authors;
  }
}
Design a class in Java that can store a list of books and their associated authors.


<form>
 <label for="name">Name:</label>
 <input type="text" id="name" name="name">
 <br>
 <label for="age">Age:</label>
 <input type="text" id="age" name="age">
 <br>
 <label for="gender">Gender:</label>
 <input type="text" id="gender" name="gender">
</form>
Create an HTML form with three text fields—name, age and gender.


function reverseString(string) {
  let reversedString = "";
  for (let i = string.length - 1; i >= 0; i--) {
    reversedString += string[i];
  }
  return reversedString;
}
Edit the following JavaScript code to reverse the characters of a given string.


import json

data = {
  "name": "John Doe",
  "age": 20
}

with open("data.txt", "w") as outfile:
    json.dump(data, outfile, indent=4)
Fix the Python code below to make the script work.
import json

data = {
  "name": "John Doe",
  "age": 20
}

with open("data.txt", "w") as outfile:
    json.dump(data, outfile)

gcc -o program program.c
Compile a C program to print the number of arguments passed.
#include <stdio.h>

int main(int argc, char *argv[]) {
    printf("number of arguments passed: %d\n", argc);
    return 0;
}

from sklearn.linear_model import LinearRegression

# Create linear regression model
model = LinearRegression()

# Train the model using the training set
model.fit(X, y)

# Make predictions using the testing set
y_pred = model.predict(X)
Build a linear regression model using Python's scikit learn library.
import pandas as pd
import numpy as np

data = pd.DataFrame({
    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],
    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]
    })

X = data['x'].values.reshape(-1, 1)
y = data['y'].values.reshape(-1, 1)

<!DOCTYPE html>
<html>
    <head>
    <title>Simple Web Page</title>
    </head>

    <body>
        <div>
            <p>The quick brown fox jumps over the lazy dog.</p>
        </div>
    </body>
</html>
Create a simple web page with a div element and a child paragraph element.


def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1)
Write a function returning the factorial of a given number in Python.


const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
Create an array from elements 0 to 10 in JavaScript.


const sortedArray = array.sort((a, b) => b - a);
Create a script for sorting the given array in decreasing order.
const array = [5, 10, 8, 6, 4, 9, 2]

function isArrayEmpty(arr) {
    return arr.length === 0;
}
Create a function in JavaScript to check if an array is empty.


let largestNum = array[0];

for (let num of array) {
    if (num > largestNum) {
        largestNum = num;
    }
}

console.log(largestNum);
Write a script for finding the largest number in the given array.
const array = [4, 8, 2, 6, 9, 3]

CREATE TABLE table_name (
    id int(11) NOT NULL AUTO_INCREMENT,
    name varchar(50) NOT NULL,
    age int(11) NOT NULL,
    city varchar(50) NOT NULL,
    PRIMARY KEY (id)
);
Create an MySQL table with four columns: "id", "name", "age", and "city".


const filteredArray = array.filter(el => el != null);
Apply the filter method in JavaScript to return only those elements of a given array that are not null.
const array = [1, null, 2, undefined, 3, NaN];

import pandas as pd

data = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]
df = pd.DataFrame(data, columns = ['id', 'name', 'age'])

df.fillna(0, inplace = True)
Clean the given data in Python by replacing NaN and None with 0.
import pandas as pd

data = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]
df = pd.DataFrame(data, columns = ['id', 'name', 'age'])

Clone the repository containing the HTML page to the server.
Configure the web server so that it will serve the HTML page when requested.
Deploy a basic HTML page to a server.


Spam
Classify the given article as spam or ham.
Hello everyone, this is a spam message.

<h2>My Form</h2>
<form>
    <label for="name">Name:</label><br>
    <input type="text" name="name"><br>
    <label for="email">Email:</label><br>
    <input type="text" name="email"><br>
    <input type="submit" value="Submit">
</form>
Modify the given HTML code to create a form element with two text boxes and a submit button.
<h2>My Form</h2>

String str = "Holy";
String jesusChrist = str + " " + "Jesus Christ";
System.out.println(jesusChrist);
Change this existing Java code to generate the "Jesus Christ" string.
String str = "Holy";

public static void printSquare(int n) { 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < n; j++) { 
            System.out.print("* "); 
        }  
        System.out.println(); 
    } 
} 
   
// Output: 
/*       
  * * * * * 
  * * * * * 
  * * * * * 
  * * * * * 
  * * * * * 
*/
Write a method that prints out a square of size n.
n=5

public static boolean isSorted(int[] array) { 
    int n = array.length; 
    int temp = array[0]; 
  
    for (int i = 1; i < n; i++) { 
        if (temp > array[i]) 
            return false; 
        temp = array[i]; 
    } 
  
    return true; 
}
Write a Java Method that takes an array of integers and returns true if the array is sorted in ascending order.
array = [7, 18, 24, 55, 98]

function checkPalindrome(str){
    let revStr = str.split('').reverse().join(''); 
    return (str == revStr);
}

checkPalindrome("racecar"); // returns true
Implement a method in JavaScript that checks if a String is a palindrome.
String = "racecar"

body {
    font-family: sans-serif;
    width: 75%;
    margin: 0 auto;
    background-color: green;
}
Edit this CSS code to make the background-color of the body green.
body {
    font-family: sans-serif;
    width: 75%;
    margin: 0 auto;
}

public static void printPrimeNumbers(){ 
    System.out.println("Prime numbers between 1 to 100 are : "); 
    for (int i = 1; i <= 100; i++) { 
        boolean isPrime = true;
        for (int j = 2; j < i; j++) { 
            if (i % j == 0) { 
                isPrime = false;
                break; 
            } 
        } 
        if (isPrime) 
            System.out.print(i + " "); 
    } 
} 

// Output:
// Prime numbers between 1 to 100 are : 
// 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
Write a method that prints out all the prime numbers between 1 and 100.


import java.util.ArrayList;

public class ArrayListExample {
    public static void main(String[] args) {
        // Create an arraylist 
        ArrayList<String> list = new ArrayList<String>(); 
  
        // Adding elements to the list 
        list.add("Adam"); 
        list.add("Bob"); 
        list.add("Charlie"); 
  
        // Printing elements in the list 
        System.out.println(list); 
  
        // Accessing elements using get() method 
        String name = list.get(1); 
        System.out.println("Name at index 1 is : " + name); 
  
        // Adding elements at a specific index 
        list.add(1, "David"); 
        System.out.println("Updated list : "+list); 
  
        // Removing elements from a list 
        list.remove("Adam"); 
        System.out.println("Updated list : "+list); 
  
        // Check if an element exists in a list 
        boolean isPresent = list.contains("Bob"); 
        System.out.println("Bob is present in the list : " + isPresent); 
    } 
}

// Output:
// [Adam, Bob, Charlie] 
// Name at index 1 is : Bob
// Updated list : [Adam, David, Bob, Charlie]
// Updated list : [David, Bob, Charlie]
// Bob is present in the list : true
Demonstrate how to use an arraylist in Java.


function swap(array, index1, index2) {
    let temp = array[index1];
    array[index1] = array[index2];
    array[index2] = temp; 
} 

let array = [10, 20, 30, 40];
swap(array, 0, 2);
console.log(array);

// Output: [30, 20, 10, 40]
Write JavaScript to swap two elements in an array.
array = [10, 20, 30, 40]

import string
import random

def generate_password():
    chars = string.ascii_letters + string.digits
    size = 8
    return ''.join(random.choice(chars) for _ in range(size))

print(generate_password())

// Output:
// h5Kp0FHc
Write Python code to generate a random password of 8 alphanumeric characters.


public static void printLetterOccurrences(String str) {
    int[] alphabet = new int[26];
    for (int i = 0; i < str.length(); i++) {
        if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z')
            alphabet[str.charAt(i) - 'a']++;
    }
    for (int i = 0; i < 26; i++) {
        if (alphabet[i] > 0) {
            System.out.println("Number of Occurrences of " + (char)(i + 'a') 
                    + " is " + alphabet[i]); 
        }
    }
}

// Output
// Number of Occurrences of a is 2 
// Number of Occurrences of d is 2 
// Number of Occurrences of e is 1 
// Number of Occurrences of f is 1
Write a Java method that takes a string and prints out the number of occurrences of each letter in the string.
String = "adda123de3f"

public static void shuffle(int[] array) 
{ 
    // Random variable 
    Random rand = new Random(); 

    for (int i = 0; i < array.Length; i++) 
    { 
        // Choose a random index 
        int index = rand.Next(i, array.Length); 

        // Swap 
        int temp = array[i]; 
        array[i] = array[index]; 
        array[index] = temp; 
    } 
}

// Output
// [3, 4, 5, 6, 1, 2]
Write a C# method that takes an array of integers and shuffles it.
array = [1, 2, 3, 4, 5, 6]

import random

def generate_random_array(n):
    array= []
    for _ in range(n):
        array.append(random.randint(1, 100))
    return array

print(generate_random_array(10))

// Output
// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]
Generate an array of 10 random numbers between 1 and 100 using Python


function isSorted(arr) {
    let isSorted = true;
    for (let i=1;i<arr.length;i++){
        if(arr[i-1] > arr[i]){
            isSorted = false;
            break; 
        }
    }
    return isSorted;
}

console.log(isSorted(["apple", "boy", "cat", "dog"]));

// Output
// true
Write a JavaScript function that takes an array of strings and returns true if the strings are in sorted order.
array = ["apple", "boy", "cat", "dog"]

The prediction feature should calculate the customer's current subscription plan by taking into account the items they have purchased. It could use factors such as item types, quantity of items purchased, time since purchase, cost of items, sale promotions, combinations of items, and so forth. The feature should use a combination of analyzed data and established weights for each factor to accurately predict the customer's most likely subscription plan.
Create a feature for predicting a customer's subscription plan based off their purchase history.
The customer has purchased 2 shirts, 1 hat, and 3 pairs of jeans in the past month.

public static String reverseString(String s) {
  char[] arr = s.toCharArray();
  int n = arr.length;

  for (int i = 0; i < n/2; i++) {
    char temp = arr[i];
    arr[i] = arr[n-i-1];
    arr[n-i-1] = temp;
  }
  return new String(arr);
}
Implement an algorithm to reverse a string in Java.


even_nums_list = [num for num in range(1, 21) if num % 2 == 0]
Using list comprehension, create a list of even numbers between 1 and 20 in Python.


function findShortestPath(maze) {
    let visited = new Set();

    let queue = [];
    queue.push({
        row: 0,
        col: 0
    });

    let minLength = Number.POSITIVE_INFINITY;

    while (queue.length > 0) {
        let node = queue.shift();
        let row = node.row;
        let col = node.col;
        let length = node.length;

        // Reached the end
        if (row === maze.length - 1 && col === maze[0].length - 1) {
            minLength = Math.min(minLength, length);
        }

        // Add neighbors
        if (row - 1 >= 0 && maze[row - 1][col] === 0
            && !visited.has(row - 1 + '_' + col)) {
            queue.push({
                row: row - 1,
                col: col,
                length: length + 1
            });
            visited.add(row - 1 + '_' + col);
        }

        if (row + 1 < maze.length && maze[row + 1][col] === 0
            && !visited.has(row + 1 + '_' + col)) {
            queue.push({
                row: row + 1,
                col: col,
                length: length + 1
            });
            visited.add(row + 1 + '_' + col);
        }

        if (col - 1 >= 0 && maze[row][col - 1] === 0
            && !visited.has(row + '_' + (col - 1))) {
            queue.push({
                row: row,
                col: col - 1,
                length: length + 1
            });
            visited.add(row + '_' + (col - 1));
        }

        if (col + 1 < maze[0].length && maze[row][col + 1] === 0
            && !visited.has(row + '_' + (col + 1))) {
            queue.push({
                row: row,
                col: col + 1,
                length: length + 1
            });
            visited.add(row + '_' + (col + 1));
        }
    }

    return minLength;
}
Design an algorithm to find the shortest path in a maze using JavaScript.


def validate_password(password):
    if len(password) < 8:
        # bug: print message
        print('Password must be at least 8 characters.')
        return False
    else:
        return True
Debug the code to encounter the issue mentioned in the comment.
def validate_password(password):
    if len(password) < 8:
        # bug: print message
        return False
    else:
        return True

SELECT SUM(t.total)
FROM orders o
INNER JOIN order_items t ON o.order_id = t.order_id
INNER JOIN products p ON t.product_id = p.product_id
WHERE p.category = 'clothing';
Create a SQL query to find the total sales for product category ‘clothing’.


public class TVShow {
  private String title; 
  private String network;
  private String genre;
  private int episodes;
  
  public TVShow(String t, String n, String g, int e) {
    title = t;
    network = n;
    genre = g;
    episodes = e;
  }
  
  public String getTitle() {
    return title;
  }
  
  public String getNetwork() {
    return network;
  }
  
  public String getGenre() {
    return genre;
  }
  
  public int getEpisodes() {
    return episodes;
  }
}
Create a Java class to represent a TV show.


#include <iostream> 

int fibonacci(int n) { 
    if (n <= 1) 
        return n; 
    return fibonacci(n - 1) + fibonacci(n - 2); 
} 
  
int main() { 
    int n = 10; 
    std::cout << "The Fibonacci number at position " << n << " is " << fibonacci(n); 
    return 0; 
}
Create a C++ algorithm to compute the Fibonacci sequence.


SELECT SUM(t.total)
FROM orders o
INNER JOIN order_items t ON o.order_id = t.order_id
INNER JOIN products p ON t.product_id = p.product_id
WHERE p.type = 'service' 
  AND MONTH(o.order_date) = 2
  AND YEAR(o.order_date) = YEAR(CURDATE());
Create a SQL query to find the total revenue for services in the month of February.


// Bubble Sort Algorithm
// Set a flag to indicate whether there are any swaps during the current iteration
// Initialize the flag to false and iterate until the flag turns true
// During the iteration, compare each pair of adjacent elements and swap them if necessary
// After each iteration, set the flag to false
// If it is still false after iteration, break the loop since the list must be sorted

var list = [7, 4, 5, 10, 3];
var flag = false;
while (flag === false) {
    flag = true;
    for (var i=0; i<list.length -1; i++) {
        if (list[i] > list[i+1]) {
            var temp = list[i];
            list[i] = list[i+1];
            list[i+1] = temp;
            flag = false;
        }
    }
}
console.log(list); // prints [3, 4, 5, 7, 10]
Suggest an algorithm for sorting a list of integers.
[7, 4, 5, 10, 3]

public double calculateBMI(double height, double weight){
   double bmi;
   height = height/100;
   bmi = weight / Math.pow(height, 2);
   return bmi;
}
Develop a code in Java to calculate the BMI given the height and weight of a person.


SELECT Orders.* 
FROM Orders 
INNER JOIN OrderItems 
ON Orders.OrderId = OrderItems.OrderId 
INNER JOIN Products 
ON OrderItems.ProductId = Products.ProductId
WHERE Products.CategoryId = 2
Rewrite the following SQL query so that it produces the same result but in an efficient way.
SELECT * FROM Orders WHERE OrderId IN (SELECT OrderId FROM OrderItems WHERE ProductId IN (SELECT ProductId FROM Products WHERE CategoryId = 2))

int countVowels = 0;
String sentence = "Hi there, how are you doing?";
for (int i = 0; i < sentence.length(); i++) {
    if (sentence.charAt(i) == 'a' || sentence.charAt(i) == 'e' || sentence.charAt(i) == 'i' 
    || sentence.charAt(i) == 'o' || sentence.charAt(i) == 'u') {
        countVowels++;
    }
}
System.out.println("Number of vowels in the string: " + countVowels);
Count the number of vowels in a sentence.
"Hi there, how are you doing?"

int[] numbers = {10, 13, 16, 23, 25, 37, 41, 45, 48, 50};
Create an array of ten unique numbers within the range 10 to 50.


// Initialize an array containing all the letters of the alphabet
String[] alphabet = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", 
                     "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};
 
String randomString = "";
Random random = new Random();
 
for (int i=0; i<8; i++) {
    int index = random.nextInt(alphabet.length);
    randomString += alphabet[index];
}
System.out.println(randomString); // Prints a random 8-character string consisting of alphabets
Generate a random string of length 8 that only contains alphabets.


public double calculatePower(double base, double power) {
    return Math.pow(base, power);
}
Edit the code so that it calculates the exponential of a given number.
public double calculatePower(double base, double power) {
    return base * power;
}

public int sumArray(int[] arr){
    int sum = 0;
    for(int i=0; i<arr.length;i++){
        sum+=arr[i];
    }
    return sum;
}
Fill in the blanks at the end of the Java code to find the sum of an array.
public int sumArray(int[] arr){
    int sum = 0;
    ______________
    ______________
    return sum;
}

In Java, the syntax of an if statement is as follows:

if (condition) {
    // Code to execute if condition is true
}
Describe the general syntax of an if statement in Java.


# Initialize the input string
string = "Hello World!"
 
# Get the string length
stringLength = len(string)
 
# Create an empty string for storing the reversed string
reversedString = ""
 
# Iterate over the input string in reverse order
for i in range(stringLength -1, -1, -1):
    reversedString += string[i]
 
# Print the reversed string
print(reversedString) # Prints !dlroW olleH
Reverse a given string.
"Hello World!"

import React from "react";

function App() {
  const title = "My Page Title"

  return (
    <div>
      <h1>{title}</h1>
    </div>
  );
}

export default App;
Write a code in ReactJS that renders the title of a given page on the screen.


{
  "Name": "John Smith",
  "Age": 34,
  "Country": "US"
}
Create a JSON object from the following data provided:
Name: John Smith
Age: 34
Country: US

def is_even_or_odd(num):
    if num % 2 == 0:
        return "Even"
    else:
        return "Odd"
How to check if a given number is even or odd using Python?


for i in range(0, 11):
  print(i)
Write a loop in Python to print all the numbers from 0 to 10


def isValidBST(root): 
      
    # Check empty tree  
    if root is None: 
        return True
          
    # Check left subtree recursively  
    if not isValidBST(root.left): 
        return False
  
    # if left is not None then check it has 
    # correct data or not i.e. left node's data 
    # should be less than root's data 
    if (root.left is not None and
        root.data < root.left.data): 
        return False
      
    # Check right subtree recursively  
    if not isValidBST(root.right): 
        return False
      
    # if right is not None then check it has 
    # correct data or not i.e. right node's data 
    # should be greater than root's data 
    if (root.right is not None and
        root.data > root.right.data): 
        return False
      
    # If all conditions satisfied  
    # then return True  
    return True
Write a function to check if a given binary tree is a valid binary search tree


for num in list:
    print(f"{num} --> {num*num}")
Given a list of numbers, print the numbers and their corresponding squares
list = [4, 5, 7, 8]

lst.sort()
print(lst)
Sort this list in ascending order
lst = [7, 11, 4, 9, 2, 10]

list3 = list1 + list2
print(list3)
Given the following two lists, create a new list containing the elements of both lists
list1 = [1, 2, 3]
list2 = [4, 5]

list.pop()
How do you remove the last item from a list in Python?


average = sum(lst) / len(lst)
Write an expression to calculate the average of the values in the following list
lst = [3, 8, 13, 5, 9]

def find_index(lst, num):
  for index, val in enumerate(lst):
    if val == num:
      return index
Create a function to find the index of the first occurrence of a given number in a list


This function takes a list of numbers as an argument and returns the mean value, which is the sum of all the values divided by the number of values in the list.
Explain the purpose of this function.
def mean(list):
    total = 0
    for item in list:
        total += item
    return total / len(list)

people_dict = {
    'John': {'age': 26, 'hobby': 'Movie Watch'},
    'Jane': {'age': 31, 'hobby': 'Book Reader'}, 
    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}
}
Build a Python program to transform a string in a dictionary.
String: " John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener"

people_dict = {
    'John': {'age': 26, 'hobby': 'Movie Watch'},
    'Jane': {'age': 31, 'hobby': 'Book Reader'}, 
    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}
}
Change the data type of the following list to a dictionary.
list = ['John', '26', 'Movie Watch', 'Jane', '31', 'Book Reader', 'Charlotte', '25', 'Music Listener']

#include <stdlib.h>
int system_variable = 5;
Please generate a system variable in C language.


set total to 0
set count to 0

while numbers left to process
    add next number to total
    increment count
end while

calculate average by dividing total by count

print average
Write pseudocode to find the average of two numbers.


def subset(arr, K): 
    n = len(arr) 
    subset_arr = [0]; 
      
    for i in range (0, n): 
        x = len(subset_arr) 
        for j in range(0, x): 
              
            # Generate subset by adding 
            # elements of A
            temp = [] 
            temp = subset_arr[j] 
            temp.append(arr[i]) 
              
            # Append in the list 
            subset_arr.append(temp) 
              
    # Return K size subset 
    length = len(subset_arr) 
    if (length >= K): 
        return subset_arr[length - K:] 
    else: 
        return -1
    
print(subset(arr, K))
Return a subset of a given array of size K
arr = [3, 6, 2, 5, 7, 4], K = 3

def remove_vowels(string): 
      
    # vowels list
    vowels = ['a', 'e', 'i', 'o', 'u']  
    stringWithoutVowels = "" 
      
    for x in string: 
        if x not in vowels: 
            stringWithoutVowels += x 
              
    return stringWithoutVowels
Write an algorithm to remove vowels from a string.


// Function to validate email address 
function validateEmail(email) {
  var pattern = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; 
  
  if (pattern.test(email)) {
    return true;
  } else {
    return false;
  }
}
Please write a program to create a JavaScript function that is used to validate an email address.


def count_prime_num(x, y): 
  
    prime_count = 0
  
    for num in range(x, y + 1): 
       
       if num > 1: 
           for i in range(2, num): 
               if (num % i) == 0: 
                   break
           else: 
               prime_count += 1
  
    return prime_count 

print(count_prime_num(0, 100))
How would you write a program to find the number of prime numbers between 0 and 100?


from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression

# Create arrays for the features and the label
X = ['The customer service was great, and I will definitely recommend this product to others.'] 
y = ['Positive']

# Create a CountVectorizer for parsing/counting words
cv = CountVectorizer()
 
# Parse the data with the vectorizer
X = cv.fit_transform(X)
 
# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
 
# Create the model, train it, then test it
model = LogisticRegression() 
model.fit(X_train, y_train) 
model.score(X_test, y_test)
Build a model using scikit-learn that classifies the given text data into ‘Positive’ or ‘Negative’.
The customer service was great, and I will definitely recommend this product to others.

from fastapi import FastAPI
@app.get("/reverse-string/{string}")

def reverse_string(string: str):
    return string[::-1]
Create a basic REST API in python that takes a string as input and returns the reversed string


str = "This is a string" 
words = str.split()
count = {} 
  
for word in words: 
    if word in count: 
        count[word] += 1
    else: 
        count[word] = 1
        
print(count)

# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}
How can you count the frequency of each word in a given string?
This is a string

SELECT COUNT(*) FROM Orders;
Write a SQL command to count the number of rows from a table ‘Orders’.


A JavaScript Promise is an object that represents the eventual completion of an asynchronous operation. A Promise object can be either resolved (successful) or rejected (failed). It provides a unified API for handling asynchronous operations, no matter when the operations are completed.
What is a JavaScript Promise?


Naruto
    /    \
  Sasuke  Boruto
            \
             Sarada
Create a tree data structure for the following information:
a) Naruto
b) Sasuke
c) Boruto
d) Sarada

switch(input) {
    case 'cat':
        console.log('meow'); 
        break;
    default:
        console.log('unknown input') 
        break;
}
Create a switch statement for the following string:
input = “cat”

for i in list:
    print(i)
Construct a for-loop to iterate over a list.
list = [1, 2, 3, 4]

def reverse_string(string):
    reversed_string = ""
    for i in range(len(string)-1, -1, -1):
        reversed_string += string[i]
    return reversed_string
Write a function that takes a string as an argument, reverses the characters, and returns the reversed string.


function toUpperCase(string) {
 return string.toUpperCase();
}
Create a JavaScript function that converts all the characters in a string to uppercase.


SELECT COUNT(*) FROM users;
You should write a MySQL command to count how many records in the table "users".


def factorial(n):
  if n == 0:
    return 1
  else:
    return n * factorial(n-1)
Write a Python function to compute the factorial of an integer.


#include <iostream>
#include <unordered_map>

std::unordered_map<char, int> character_frequency(std::string str)
{ 
    std::unordered_map<char, int> frequency; 
    for (char c : str) 
        frequency[c]++; 
    return frequency; 
}
Create a C++ function that finds the frequency of each character in a string and stores in a hashtable.


public class BinarySearch 
{ 
    // Returns index of x if it is present in arr[l.. 
    // r], else return -1 
    public int binarySearch(int arr[], int l, int r, int x) 
    { 
        if (r >= l) { 
            int mid = l + (r - l) / 2; 
  
            // If the element is present at the 
            // middle itself 
            if (arr[mid] == x) 
                return mid; 
  
            // If element is smaller than mid, then 
            // it can only be present in left subarray 
            if (arr[mid] > x) 
                return binarySearch(arr, l, mid - 1, x); 
  
            // Else the element can only be present 
            // in right subarray 
            return binarySearch(arr, mid + 1, r, x); 
        } 
  
        // We reach here when element is not present 
        // in array 
        return -1; 
    } 
  
}
You should create a Java program to implement a binary search.


def minmax(list)
    min = list[0]
    max = list[0]
    for num in list[1:]:
        if num < min:
            min = num
        if num > max:
            max = num

    return min, max
Create a function that outputs the minimum and maximum ofa list of numbers.
list = [1, 3, 7, -2, 4]

<table>
    <tr>
        <th> Column 1 </th>
        <th> Column 2 </th>
    </tr>
    <tr>
        <td> </td>
        <td> </td>
    </tr>
</table>
Generate valid HTML tags for a two-column table.


import json

data = [{"name":"John", "age":30},{"name":"Alice", "age":25}]

for entry in data:
    name = entry['name']
    age = entry['age']
    print(f'The name is {name} and age is {age}')
Construct a program to parse a JSON array.
[{"name":"John", "age":30},{"name":"Alice", "age":25}]

#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
You should edit this code and make it into a working code that prints "Hello, world!"
cout << "Hello, World!"

CREATE TABLE persons (
    firstname TEXT NOT NULL,
    lastname TEXT NOT NULL
);

INSERT INTO persons (firstname, lastname)
VALUES ('John', 'Doe'), ('Jane', 'Doe');
Create a MySQL table and insert data into it.


let arr = [3, 5, 7, 2, 1]
arr.sort(function(a,b){return a-b});
console.log(arr);
Generate a code snippet to sort the given array in ascending order.
let arr = [3, 5, 7, 2, 1]

The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop.
Identify the bug in the given code snippet.
function double_sum(nums) {
 for (let i = 0; i <= nums.length; i++) {
  sum += nums[i] * 2;
 }
}

let x = 0;
let y = 0;
for (let i = 0; i < 10; i++) {
 y += i;
 x += (10 * i);
}
Rewrite the given code block to make the loops more efficient
let x = 0;
let y = 0;
for (let i = 0; i < 10; i++) {
 y = y + i;
 for (let j = 0; j < 10; j++) {
  x = x + j;
 }
}

function highestCommonFactor(m, n) {
  if (m === 0 || n === 0) {
      return 0;
  }

  let a = Math.max(m, n);
  let b = Math.min(m, n);

  while (b !== 0) {
      let c = b;
      b = a % b;
      a = c;
  }

  return a;
}
Generate a code snippet to find the highest common factor of two given numbers


let top3 = arr.sort((a, b) => b.length - a.length).slice(0, 3);
console.log(top3); // Output: ["Pineapple", "Strawberry", "Banana"]
Output the top 3 strings from the given array that have the greatest length
let arr = ["Pineapple", "Apple","Banana", "Strawberry", "Grape"]

The contents of an array can be displayed in reverse order by using the reverse() method or by using a for loop. 

For example, to display the content of the array [1, 2, 3, 4], the following code can be used:

// Using reverse()
let arr = [1, 2, 3, 4];
arr.reverse();
console.log(arr); // Output: [4, 3, 2, 1]

// Using a for loop
let arr = [1, 2, 3, 4];
for (let i = arr.length - 1; i >= 0; i--) {
    console.log(arr[i]); // Output: 4 3 2 1
}
How do you display the contents of an array in reverse order?


let i = 0;
while(i <= num) {
  output += i;
  i++;
}
Edit the given code to make it more readable
while(i <= num) {
  output += i;
  i++
}

function toUpperCase(str) {
  return str.toUpperCase();
}
Generate a code snippet to convert a given string to uppercase


5
Print out the 5th number of the Fibonacci sequence.


The type of 'a' is an integer.
Identify the type of the following variable:
$$
a = 5
$$


The main difference between for and while loop is that for loop is used when we already know the number of times the loop should iterate, while a while loop is used when the number of iterations is not known in advance. Another difference is that for loop is more convenient for looping through arrays/collections of objects, while a while loop is used for performing more complex computations.
What is the difference between a for loop and a while loop in Java?


for key, value in myDict.items(): 
    print(value) 

# Output
meow
bark
neigh
Create a dictionary to store the key-value pairs and print out the values of the dictionary keys.
myDict = {
    "cat" : "meow",
    "dog" : "bark",
    "horse" : "neigh"
}

The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not.
What is the purpose of a try-catch block in Python?


@Test
public void testSum(){
    int x = 1;
    int y = 2;
    int expectedSum = 3;
    int actualSum = x+y;
 
    assertEquals(expectedSum, actualSum);
}
Write a JUnit test case to test if the sum of two numbers is correct.


In Java, the static keyword is used to indicate that an entity is associated with a class rather than an instance of a class. It can be used to denote class variables, class methods and other class elements, and is also used in various access modifiers. Static members are associated with the class itself, rather than any particular instance of the class.
What is the meaning of static in Java?


SELECT * FROM users; 
 
This will return all rows from the "users" table.
Using the given SQL command, print out all rows from the "users" table.
SELECT * FROM users

The break keyword should be used in a loop when the loop needs to be terminated before it has finished executing its normal iterations. The break statement will cause the loop to exit immediately, bypassing any remaining code in the loop.
When should the `break` keyword be used in a loop?


birthday = datetime.datetime.strptime(name + " birthdate", "%Y-%m-%d")
time_diff = time - birthday
print("The difference in time from " + name + "'s birthday is " + str(time_diff))
Given a person's name and the current time, print the difference in time from the person's birthday.
name = "John"
time = datetime.datetime(2021, 3, 25, 10, 0, 0)

Math.floor(Math.random() * 100);
Generate a random 2-digit number using JavaScript.


def max_int(arr):
  max_val = arr[0]
  for i in range(1, len(arr)):
    if arr[i] > max_val:
      max_val = arr[i]
  return max_val

print(max_int([10, 5, 11, 23, 9]))
You are given an array of integers. Write a program to find the maximum number in this array.
[10, 5, 11, 23, 9]

SELECT * FROM customers;
Write a SQL query to retrieve all the rows from a table called "customers".


def is_anagram(str1, str2):
  str1 = str1.lower()
  str2 = str2.lower()
  if sorted(str1) == sorted(str2):
    return True
  else:
    return False

print(is_anagram('listen', 'silent'))
You are given two strings. Write a function that checks whether the two strings are an anagram or not.
"listen", "silent"

public static int multiply(int x, int y){
  return x * y;
}

System.out.println(multiply(5, 8));
Write a function to multiply two numbers in Java.
5, 8

def remove_symbols(string):
  text_string = ''
  for c in string:
    if c.isalpha() or c.isdigit():
      text_string += c
  
  return text_string

print(remove_symbols("This , is an example string %"))
You are given a string of symbols. Write a program to remove all the symbols and get a valid text string.
"This , is an example string %"

def max_product(arr):
    max1 = max(arr)
    arr.remove(max1)
    max2 = max(arr)
    return max1 * max2

print(max_product([-4, 2, -3, 6]))
Compute the maximum product of two integers in an array.
[-4, 2, -3, 6]

def create_string(arr):
  string = ''
  for elem in arr:
    string += elem
  return string

print(create_string(['Hello', 'World', '!']))
Manipulate a given list to get a single string.
["Hello", "World", "!"]

arr = [x+1 for x in [1,2,3,4,5] ]

print(arr)
Rewrite the following for loop code using a list comprehension.
arr = [1,2,3,4,5]
for i in arr:
  arr[i] = arr[i] + 1

def is_palindrome(arr):
  rev_arr = arr[::-1]
  if arr == rev_arr:
    return True
  else:
    return False

print(is_palindrome([1, 2, 3, 2, 1]))
You are given a list of numbers. Write a program to check if the given list is a palindrome or not.
[1, 2, 3, 2, 1]

def print_2D_array(arr):
  for row in arr:
    for element in row:
      print(element,end=" ")
    print()

print_2D_array(arr)
Write a function in Python for printing a given 2D array.
arr = [[1,2,3], [4,5,6], [7,8,9]]

The advantages of using deep learning models include: the ability to handle large and complex datasets; the ability to achieve better generalization performance; greater accuracy than traditional machine learning algorithms; the ability to capture non-linear relationships; and improved efficiency.
Identify the advantages of using deep learning models.


def reverse_list (my_list):
  return my_list[::-1]
  
reverse_list(my_list)
Create a function in Python for reversing a list.
my_list = [1,2,3,4,5]

The steps for implementing a convolutional neural network involve selecting the network architecture, preparing the dataset, defining the features, creating the layers and connections, training the network using an optimizer, and evaluating the model’s performance.
Describe the steps for implementing a convolutional neural network.


def sort_list(my_list): 
  for i in range(len(my_list)):
    for j in range(i+1, len(my_list)):
      if my_list[i] > my_list[j]: 
        my_list[i], my_list[j] = my_list[j], my_list[i]
  return my_list

sort_list(my_list)
Develop an algorithm for sorting a given list in ascending order.
my_list = [5,1,4,2,8]

import random 
  
arr = [] 
for i in range(20): 
    arr.append(random.randint(0, 10))
    
arr
Generate an array of 20 random numbers between 0 and 10 (inclusive).


import uuid

def generate_id(object): 
  return uuid.uuid4()
Write a code snippet for generating a unique identifier for a particular object.


Web scraping is the process of extracting data from websites using automated software. It involves sending a request to the web server, processing the HTML, locating the relevant data, and saving it. The process usually involves using web crawlers and parsing data using regular expressions or custom logic.
Describe the process of web scraping.


def area_circle(r):
  return 3.14 * r**2
Write a function in Python for calculating the area of a circle.


if (x >= 0) {
  System.out.println(Math.sqrt(x));
} else {
System.out.println("The number is negative");
}
Construct an if-else statement in Java for printing the square root of a given number.


@app.route("/get_average_annual_temp/<city>", methods=['GET'])
def get_average_annual_temp(city):
    # Get the average annual temperature of the given city
    temp = get_average_annual_temperature(city)
    # Return the average temperature in json format
    return jsonify({'temp': temp})
Write an API endpoint to get the average annual temperature of a given city.


import random

def random_string():
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    random_string = ''.join(random.choice(chars) for i in range(5))
    return random_string

print(random_string())
Generate a string of 5 random characters from the characters A through Z.


import React from 'react';

class Table extends React.Component {
  render() {
    const state = this.props.state;
    const dataRows = state.data.map(rowData => (
      <tr>
        <td>{rowData.name}</td>
        <td>{rowData.age}</td>
      </tr>
    ));

    return (
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Age</th>
          </tr>
        </thead>
        <tbody>{dataRows}</tbody>
      </table>
    );
  }
}
export default Table;
Create a React component that renders the provided state data in a table
state = {
  data: [
    { name: 'John', age: 20 },
    { name: 'Alice', age: 18 }
  ]
}

element {
  -webkit-animation: myAnimation 2s ease-in forwards;    
  animation: myAnimation 2s ease-in forwards;
}

@-webkit-keyframes myAnimation {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.5);
  }
}
@keyframes myAnimation {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.5);
  }
}
Create a CSS animation to apply an interesting effect to a given element.


from flask import Flask, request

app = Flask(__name__)

@app.route('/test', methods=['GET'])
def test():
    return "This is a test"

if __name__ == '__main__':
    app.run()
Build a flask server to handle a GET request to the route '/test'.


import nltk 
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Preprocess data
training_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]
all_words = []
documents = []
for (sent, category) in training_data:
    words = word_tokenize(sent)
    words = [word.lower() for word in words if word not in stopwords.words()]
    documents.append((words, category))
    all_words.extend(words)

# Create feature set
distinct_words = set(all_words)
feature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]

# Train model
classifier = nltk.NaiveBayesClassifier.train(feature_set)
Train a sentiment classification model on the given data.
Training Data:

I love this new phone!  Positive
This phone is terrible!  Negative

SELECT * FROM table_name WHERE age > 20;
Create a parameterized SQL query to get all records from a table where the given field has a value greater than the given input.
Fields: age
Input: 20

def flatten(nums):
    flattened_list = []
    for elem in nums:
        if type(elem) == list:
            flattened_list.extend(flatten(elem))
        else:
            flattened_list.append(elem)
    return flattened_list

flatten(l1)
Given a Python list, write the code to flatten it
l1=[1,2,3,[4,[5,6]]]

def make_list(a, b):
  return [a, b]
Write a function in Python that takes two parameters and returns a list containing those two numbers


mylist.append(9)
Add a new element to the end of a list.
mylist=[2,5,7]

def say_hello():
	print("Hello world!")
Write a function that prints a message saying 'Hello world!'


def bubble_sort(nums):
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] > nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums
Write a sorting algorithm that sorts an array using a bubble sort.
nums=[3,4,1,2,9,6]

import random

def random_list(length):
	rand_list = []
	for i in range(length):
		rand_list.append(random.randint(0,100))
	return rand_list
Create a list containing a given number of random numbers.


playername1=input("What is your name? ")
playername2=input("What is your opponent's name? ")
player_score1=0
player_score2=0

if turn==1:
	player_score1+=1

if turn==2:
	player_score2+=1

print("It is now " + playername1 + "'s turn. You have " + str(player_score1) + " points")
print("It is now " + playername2 + "'s turn. You have " + str(player_score2) + " points")
Using the existing code as guidance, add a 2nd player and 2nd input field to the game.
playername1=input("What is your name? ")
player_score1=0

if turn==1:
	player_score1+=1

print("It is now " + playername1 + " turn. You have " + str(player_score1) + " points")

def validate_input(username, password):
	if len(username) < 5 or len(username) > 80:
		return False
	if len(password) < 8 or len(password) > 16:
		return False
	return True
Using the existing code as a guide, construct a function to validate user input.
username=input("Enter your username: ")
password=input("Enter your password: ")

import random
def rand_int(low, high):
	return random.randint(low,high)
Create a function to generate a random integer between two given numbers.


Sentiment score: -2.
Analyze the following text and produce the sentiment score.
Text: I am extremely disappointed with the customer service I received.

def get_all_permutations(string):
 
  if len(string) == 1:
    return [string]
 
  permutations = []
  for index, char in enumerate(string):
    slice_string  = string[:index] + string[index+1:]
    for permutation in get_all_permutations(slice_string):
      permutations.append(char + permutation)

  return permutations
Create a function in Python that returns all permutations of a string.


madam
Given a character sequence, find the longest palindromic substring.
sequence: madam

def addNumbers(num1, num2):
  return num1 + num2
Debug the following code to make it compile properly.
def addNumbers(num1, num2)
  return num1 + num2

def findSum(num): 
    res = 0
    num = str(num)
    for i in range(0, len(num)): 
        res = res + int(num[i]) 
    
    return res
Given a positive integer, find the sum of its digits.


render() {
  const numbers = [1,2,3,4,5,6,7,8,9,10];
  return (
    <ul>
      {numbers.map(number => <li>{number}</li>)}
    </ul>
  );
}
Write a loop in React that renders a list of numbers from 1 - 10.


3
Find the greatest common divisor of these two numbers.
9 and 15

Generative Adversarial Networks (GANs) are a type of deep neural network that are composed of two sub-networks; a generative network and a discriminative network. The generative network produces samples such as images, audio, or text that try to fool the discriminator network, which is trained to recognize real data from generated data. The two networks are trained together in an adversarial setting, in which the generator attempts to generate data that is indistinguishable from real data and the discriminator tries to distinguish real data from generated data.
Explain the concept of Generative Adversarial Networks (GANs).


$("#name").val();
Write a jQuery code snippet to retrieve the value of an input field with an id of "name".


public void bubbleSort(int[] arr){
  for (int i = 0; i < arr.length - 1; i++) {
    for (int j = 0; j < arr.length - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        int temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
}
Implement the following algorithm in Java.
// Bubble sort algorithm 
for i in 0 to n-1 
  for j in 0 to n-i-1 
    if array[j] > array[j+1] 
      swap array[j] and array[j+1]

Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, that incrementally builds candidates to the solutions and abandons each partial candidate c ("backtracks") as soon as it determines that c cannot possibly be completed to a valid solution.
Explain the term "backtracking".


arr = ["hello", "world", "this", "is", "a"]
Create an array of strings, of size 5, by taking the string input from the user.
"hello", "world", "this", "is", "a"

//Function to convert an array of strings to a comma-separated string
function arr_to_csv(arr) {
    return arr.join(",");
}

// Testing code
console.log(arr_to_csv(arr));
Write a JavaScript function to convert an array of strings to a comma-separated string.
arr = ["this", "is", "a", "test"]

def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b
Write code for displaying the Fibinacci sequence up to the nth term.


def fillWithHello(n):
    arr = [] 
    for i in range(0, n): 
        arr.append("hello") 
    return arr
Create an array of size n filled with the string "hello".


def negative_list(numbers):
    return [num for num in numbers if num < 0]
Re-write the following function to use list comprehension.
def negative_list(numbers):
    negative = []
    for num in numbers:
        if num < 0:
            negative.append(num)
    return negative

power_of_two = lambda x : x ** 2
Convert the following function to a lambda expression
def power_of_two(x):
    return x ** 2

result = [(i,j) for i in a for j in b]
Convert the following nested for loop into a single line list comprehension.
a = [1, 2, 3, 4]
b = [5, 6, 7, 8]

result = []
for i in a:
    for j in b:
        result.append((i, j))

import pandas as pd

df = pd.DataFrame(data)

# Create tabular format 
 df = df[["name", "age", "location"]]
Pre-process the following dataset and convert it into a tabular format using Pandas.
data = [{"name": "john", "age": 20, "location": "New York"},
        {"name": "sarah", "age": 30, "location": "Los Angeles"}]

def find_substring(str):
    substrings = []
    for length in range(1, len(str)+1):
        for start in range(len(str)- length + 1):
            substrings.append(str[start:start+length])
    return substrings
Find all substrings from a given string.


def softmax(arr): 
    a = np.exp(arr)
    return a / np.sum(a) 
def sum_softmax(arr): 
    return np.sum(softmax(arr))
Softmax a list of numbers and then sum the output.
[1, 2, 3]

def swap(a, b): 
    a, b = b, a 
    return (a,b)
Toast a Python function to swap the values of two given variables.
a = 10, b= 20

def lev_dist(str1, str2):
    if len(str1) < len(str2):
        return lev_dist(str2, str1)
    
    if len(str2) == 0:
        return len(str1)
 
    previous_row = range(len(str2) + 1)
    for i, c1 in enumerate(str1):
        current_row = [i + 1]
        for j, c2 in enumerate(str2):
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row
    
    return previous_row[-1]
Create a function to calculate the Levenshtein distance between two strings
str1 = "geeks", str2 = "geek"

def bubble_sort(arr): 
    # length of the array 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n-1): 
   
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
Create an algorithm to sort a given array in ascending order using Bubble sort.


def isRotation(s1, s2):   
    if len(s1) != len(s2): 
        return False
  
    temp = s1 + s1 
    return (temp.count(s2) > 0)
Create a program to check if two given strings are a rotation of each other.
string1 = "abcd", string2= "cdab"

Log in to Heroku using the account details provided.
Use the command "heroku container:push web -a [app-name]" to deploy the container to Heroku. This command will build and push the Docker container to your Heroku app. You can monitor the progress of the deployment in the ‘Activity’ tab.
Deploy a Docker container to Heroku.
Heroku account details

The sentiment of the statement is negative.
Predict the sentiment of a given sentence.
This movie was fairly dull.

The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters.
Create a neural network in Python to recognize handwriting.
MNIST hand-written digit dataset

<html>
 <head>
  <title>Product Prices</title>
 </head>
 <body>
  <h1>Product Prices</h1>
  <table>
   <tr>
    <th>Product Name</th><th>Price</th>
   </tr>
   <tr>
    <td>Laptop</td><td>1000</td>
   </tr>
   <tr>
    <td>Keyboard</td><td>50</td>
   </tr>
   <tr>
    <td>Monitor</td><td>200</td>
   </tr>
   <tr>
    <td>Mouse</td><td>30</td>
   </tr>
   <tr>
    <td>Headphones</td><td>50</td>
   </tr>
  </table>
 </body>
</html>
Design an HTML page with a table of products and their prices.
Table with 5 products and their prices

p.highlight {
    /* CSS styles */
}
Write a CSS selector to select all paragraph elements with a class of "highlight".


The average of the 3 numbers is 36.
Determine the average of 3 numbers.
30, 20, 60

The algorithm should include parts like data preprocessing, feature extraction, selecting the right model, hyperparameter optimization and evaluation.
Develop a machine learning algorithm to predict stock prices.
Historical stock prices

The most frequent word in the sentence is "a".
Identify the most frequent word in a given sentence.
This is a beautiful summer day

function getRandomNumber() {
 return Math.floor(Math.random() * 100);
}
Write a JavaScript function to generate a random whole number.


<html>
 <head>
  <title>Add two numbers</title>
 </head>
 <body>
  <?php
   if (isset($_POST['add'])) {
   $num1 = $_POST['num1'];
   $num2 = $_POST['num2'];
   $sum = $num1 + $num2;
   ?>
    <p>The sum of <?php echo $num1; ?> and <?php echo $num2; ?> is <?php echo $sum; ?></p>
   <?php
   } else {
   ?>
   <form action="add.php" method="post">
    <label>Enter first number:</label>
    <input type="text" name="num1">
    <br>
    <label>Enter second number:</label>
    <input type="text" name="num2">
    <input type="submit" name="add" value="Add">
   </form>
   <?php
   }
  ?>
 </body>
</html>
Create a PHP page to add two numbers.


START
SET max_element to 0
LOOP through array
 IF current element is greater than max_element
 SET max_element to current element
END LOOP
PRINT maximum element
END
Write pseudo code for finding the maximum element in an array.


nums = [1, 2, 3, 4]

for i in range(len(nums)):
    nums[i] = nums[i] * nums[i]

print(nums) # [1, 4, 9, 16]
How would you modify the following code to print the square of each number in the given list?
nums = [1, 2, 3, 4]

The code defines a function called division which takes two numbers as arguments and returns the result of dividing the first number by the second number.
What does the following code do?
def division(num1, num2):
    return num1 / num2

def sum_numbers(nums): 
    nums = nums.split(',')
    total = 0
  
    # Traverse the string and add all elements 
    # of it to the total. 
    for i in range(len(nums)): 
        total += int(nums[i]) 
  
    # return total 
    return total 

print(sum_numbers("1,2,3,4")) # 10
Write a function that takes a string of numbers separated by commas and returns the sum of all the numbers.
"1,2,3,4"

def convert_to_minutes(time): 
    # Split the time into hours and minutes 
    h, m = map(int, time.split(':'))

    # Add 12 to the hours if the time is PM 
    if time.endswith('PM'): 
        h += 12
    return h * 60 + m

print(convert_to_minutes("12:30PM")) # 750
Create a function that takes the string of the current time and returns the time in minutes.
"12:30PM"

def combine_first_three(string1, string2): 
    # Get the first three characters of each string 
    string1 = string1[:3]
    string2 = string2[:3]

    # Combine the first three characters of each string 
    combined_string = string1 + string2

    # Return the new string 
    return combined_string

print(combine_first_three("Hello", "World")) # HelWor
Create a function that takes two strings and returns a new string containing the first three characters of each string combined.
"Hello"
"World"

def find_word(word, text):
    # Use the 'in' operator to check if the word is in the text
    if word in text:
        return "Word found"
    else:
        return "Word not found"

# Use the 'count' method to check if the word is in the text more efficiently
if text.count(word) > 0:
    return "Word found"
else:
    return "Word not found"
How would you modify the following code to make it more efficient?
def find_word(word, text):
    if word in text:
        return "Word found"
    else:
        return "Word not found"

def find_largest_number(nums): 
    # Initialize the index of the largest number.
    largest_index = 0

    # Loop through the list of numbers and
    # compare each number to the other. 
    # Update the index of the largest number. 
    for i in range(len(nums)):
        if nums[i] > nums[largest_index]:
            largest_index = i
    
    # Return the index of the largest number.
    return largest_index

print(find_largest_number([2, 5, 12, 3, 4])) # 2
Create a function that takes a list of numbers and returns the index of the largest number.
[2, 5, 12, 3, 4]

def remove_longest_word(sentence): 
    # Split the sentence into words 
    words = sentence.split(' ')

    # Find the longest word 
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word): 
            longest_word = word 

    # Remove all occurrences of the longest word
    new_sentence = [] 
    for word in words:
        if word != longest_word: 
            new_sentence.append(word) 
    
    # Join the list back into a string and return it 
    return " ".join(new_sentence)

print(remove_longest_word("This is a very long sentence")) # This is a sentence
Write a function that takes a sentence and returns the string with all occurrences of the longest word removed.
"This is a very long sentence"

SELECT name 
FROM authors;
Write a database query to retrieve the names of all authors.


^[0-9]+$
Build a regular expression to check if a string only contains numbers.


1: 1
2: 3
3: 1
4: 2
5: 2
6: 1
You are given a list of items. Output a list of items and their respective frequencies.
[1,2,2,4,5,2,3,4,5,6]

for(i=1;i<=10;i++) {
  console.log(3 + " x " + i + " = " + (3 * i));
}
Construct a for loop to show the multiplication table of 3.


Model Building Code:
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
Create a basic neural network model to distinguish between cats and dogs.


Error: n is not defined.

The given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:

def main():
 print("Hey I'm here")
 n = 0
 if n == 0: 
  print("Hey I'm there")
main()
Read the given code block and debug it.
def main():
 print("Hey I'm here")
 if n == 0: 
  print("Hey I'm there")
main()

0.88
Find the closest decimal approximation of 0.875.


public static int getMax(int[] array) {
  int max = array[0];
  for (int i=1; i < array.length; i++) {
    if (array[i] > max) {
        max = array[i];
    }
  }
  return max;
}
Write a Java code to calculate the maximum value in an array.


for i in range(len(arr)):
    print(arr[i])
Construct a loop to output all the elements from a list.
['a', 'b', 'c', 'd']

def isPalindrome(s): 
    reversedString = s[::-1] 
  
    if (s == reversedString): 
        return True
    return False
Create an algorithm to detect if a string is a palindrome or not.


def length(s):
    i = 0
    for ch in s:
        i += 1
    return i
Provide a function to find the length of a string.


for i in range(1, 7):
    for j in range(1, i+1):
        print(j, end=' ')
    print()
Modify the following code to get the desired output.
for i in range(1, 7):
    for j in range(1, i):
        print(j)

def anagrams(s1, s2):
    if len(s1) != len(s2):
        return False
    s1_arr = list(s1)
    s2_arr = list(s2)
    s1_arr.sort()
    s2_arr.sort()
    for i in range(len(s1_arr)):
        if s1_arr[i] != s2_arr[i]:
            return False
    return True
Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.
s1 = “silent”
s2 = “listen”

This is a sentence.
Generate a sentence using the given array of words:
arr = ['This', 'is', 'a', 'sentence']

a, b = b, a
Swap the contents of two variables.
a = 10
b = 15

def validate_phone(phone_number):
    regex = '^\+?(\d[\d-. ]+)?(\([\d-. ]+\))?[\d-. ]+\d$'
    if re.match(regex, phone_number):
        return True
    return False
Generate a function which will validate a phone number using regular expression.


def multiply(m1, m2, n):
    result = [[0 for x in range(n)] for y in range(n)]
    for i in range(n):
        for j in range(n):
            for k in range(n):
                result[i][j] += m1[i][k] * m2[k][j]
    return result
Modify the given code to multiply two n x n matrices.
def multiply(m1, m2, n):
    result = [[0 for x in range(n)] for y in range(n)]
    for i in range(n):
        for j in range(n): 
            result[i][j] = 0

def index(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1
Write a function to return the index of an item in an array.
arr = [1, 2, 3, 4, 5]
x = 4

even_nums_list = [x for x in range(1,51) if x % 2 == 0]
Generate a list that has the all even numbers between 1 and 50, inclusive.


s = "Hello world" 
s = s[::-1] 
print(s)
Reverse the string given in the input
Hello world

class Stack: 
	def __init__(self): 
		self.stack = [] 

	# This method adds an element at the top of the stack 
	def push(self, item): 
		self.stack.append(item) 
 
	# This method removes the topmost element and returns it 
	def pop(self): 
		if self.is_empty(): 
			return None
		return self.stack.pop() 
  
	# This method returns the topmost element without removing it 
	def peek(self): 
		if self.is_empty(): 
			return None
		return self.stack[-1] 
  
	# This method returns true or false depending on whether the stack is empty or not 
	def is_empty(self): 
		return len(self.stack) == 0
Create a class that creates a stack object and implements push and pop functions


def do_something(data):
    # Your code here
    result = 1
    for num in data:
        result *= num
    return result
Implement the code in the input to the output
def do_something(data):
    # TODO: Your code here
    pass

def min_two(a, b):
  if a < b:
    return a
  else:
    return b

min_val = min_two(4, 6)
print(min_val)
Find the minimum of two given numbers.
4, 6

def insertion_sort(arr):
    """
    Sort given array using insertion sort
    """
    # Traverse through the array 
    for i in range(1, len(arr)): 
        key = arr[i] 
  
        # Move elements of arr[0..i-1], that are 
        # greater than key, to one position ahead 
        # of their current position 
        j = i - 1
        while j >= 0 and key < arr[j] : 
            arr[j + 1] = arr[j] 
            j -= 1
        arr[j + 1] = key 
  
    return arr

arr = [5, 1, 4, 2, 8]
sorted_arr = insertion_sort(arr)
print(sorted_arr)
Sort the given array using insertion sort
[5, 1, 4, 2, 8]

multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]
Generate a list comprehension that has the multiples of 3 between 0 and 30


def find_index(lst, value):
    """
    Return the index of a given value in a list.
    """
    for i, v in enumerate(lst):
        if v == value:
            return i
    return -1

lst = [1,2,3]
val = 3
find_index(lst, val)
Return the index of a given value in a list.
[1,2,3], 3

/* Node.js webhook functions */

const express = require("express");
const bodyParser = require("body-parser");

// Init express
const app = express();

// Add body parser
app.use(bodyParser.json());

// Create webhook functions
const webhooks = {
  // Create a webhook for an event
  onEvent: (req, res) => {
    // Handle request
  },
  // Create a webhook for an action
  onAction: (req, res) => {
    // Handle request
  },
  // Create a webhook for a job
  onJob: (req, res) => {
    // Handle request
  }
};

// Add webhook handlers
Object.keys(webhooks).forEach(hook => {
  app.post(`/hooks/${hook}`, webhooks[hook]);
});

// Start server
app.listen(3000);
Create a set of webhook functions in Node.js


def remove_duplicates(arr):
    """
    Return a new array after removing duplicates from a given array.
    """
    new_arr = []
    for num in arr:
        if num not in new_arr:
            new_arr.append(num)
    return new_arr

arr = [1, 2, 3, 2, 3, 4]
new_arr = remove_duplicates(arr)
print(new_arr)
Return a new array after removing duplicates from a given array.
[1, 2, 3, 2, 3, 4]

SELECT * FROM table_name;
Create an SQL query to select all records from a table


def factorial(n): 
    res = 1 
    # Calculate value of 
    # factorial in for loop 
    for i in range(2,n+1): 
        res = res * i 
    return res 

n = 7
print("Factorial of",n,"is",factorial(n))
Implement a non-recursive algorithm to compute the factorial of a given number
7

def sum_lists(lst1, lst2):
    """
    Compute the sum of two given lists.
    """
    new_list = []
    for i in range(len(lst1)):
        new_list.append(lst1[i] + lst2[i])
    return new_list

lst1 = [2,3,4]
lst2 = [1,2,3]
sum_lst = sum_lists(lst1, lst2)
print(sum_lst)
Compute the sum of two given lists
[2,3,4], [1,2,3]

class Student():
  def __init__(self, first_name, last_name, email, street, city, state, zip_code):
    self.first_name = first_name
    self.last_name = last_name
    self.email = email
    self.street = street
    self.city = city
    self.state = state
    self.zip_code = zip_code
  
  def change_email(self, new_email):
    self.email = new_email
Construct a class to represent a student


def sqrt(n):
    """
    Compute the square root of a given number
    """
    r = n
    while r*r > n:
        r = (r + n/r) // 2
    return r

n = 9
val = sqrt(n)
print(val)
Create a function to compute the square root of a given number
9

def print_elements(arr):
    """
    Print all elements of an array.
    """
    for num in arr:
        print(num)

arr = [1,2,3]
print_elements(arr)
Create a method that prints all elements of an array
[1,2,3]

third_character = word[2] # the third character is 'l'
Given a string ``word``, write code to return the third character in the string.
word = "hello"

def add_two_numbers(a, b):
    '''This function takes two numbers and returns their sum.'''
    return a + b
Replace the "TODO" placeholder in the following python code.
def add_two_numbers(a, b):
    '''This function takes two numbers and returns their sum.'''
    # TODO

def find_pi():
    pi = 3.141
    return round(pi, 3) # rounded to the 3rd decimal point
Create a function to find the value of Pi rounded to the 3rd decimal point.


colors = ["red", "green", "blue"]
colors.reverse()
for color in colors:
    print(color)
Rearrange the following code to print out the list elements in reverse order.
colors = ["red", "green", "blue"]

diff = date1 - date2
difference = diff.days # difference = 30 days
Find the difference between the two dates
import datetime
date1 = datetime.date(2020, 5, 15)
date2 = datetime.date(2020, 4, 15)

maximum_num = max(list_nums) # maximum_num = 9
How would you find the maximum number in a list of length 5?
list_nums = [1, 4, 7, 2, 9]

def multiply(num1, num2):
    '''This function multiplies two given numbers and returns the product.'''
    return num1 * num2 # returns 40
Write a function to multiply two given numbers and return the product.
num1 = 5
num2 = 8

elements = [list_nums[2], list_nums[5]] # elements = [7, 9]
Retrieve the elements at indexes 2 and 5 in the list.
list_nums = [1, 4, 7, 2, 9]

data_list = [1, 3, 5, 7, 9]

# Loops through the data_list and prints out all elements
i = 0
while i < len(data_list):
    print(data_list[i])
    i += 1
Using the comment as a guide, convert the following code from a for loop to a while loop.
data_list = [1, 3, 5, 7, 9]

# Loops through the data_list and prints out all elements
for element in data_list:
    print(element)

def find_difference(input_int1, input_int2):
    '''This function calculates the absolute difference between two integers.'''
    return abs(input_int1 - input_int2) # returns 4
Implement find_difference() to calculate the absolute difference between two integers.
input_int1 = 5
input_int2 = 9

count_char = string.count(char) # count_char = 2
How would you find the number of occurrences of a particular character in a given string?
string = "hellohowareyou"
char = 'o'

new_list_ints = list(set(list_int)) # new_list_ints = [4, 7, 8, 6]
Create a new list from an existing list with no duplication.
list_int = [4, 7, 4, 8, 6, 7]

avg = sum(list_int) / len(list_int) # avg = 11.5
How would you output the average value of a given list of numbers?
list_int = [2, 7, 15, 25]

required_strings = []

for string in list_strings:
    if string[0] == 'c':
        required_strings.append(string)
    
# required_strings = ["cat", "cow"]
Given a list of strings, write a program to return all strings with first character as 'c'.
list_strings = ["cat", "dog", "cow", "duck"]

def merge_sorted_lists(list1, list2):
    merged_list = []
    i = 0
    j = 0

    # Iterate through the lists until all elements have been merged
    while (i < len(list1) and j < len(list2)):
        # If the element from the first list is smaller, add it 
        # to the merged list
        if list1[i] < list2[j]:
            merged_list.append(list1[i])
            i+=1
        # Otherwise add the element from the second list
        else:
            merged_list.append(list2[j])
            j+=1
 
    # Append any remaining elements from the first list
    while i < len(list1):
        merged_list.append(list1[i])
        i+=1
 
    # Append any remaining elements from the second list
    while j < len(list2):
        merged_list.append(list2[j])
        j+=1
 
    return merged_list
Merge two sorted lists into a single sorted list
list1 = [1,3,5,7] 
list2 = [2,4,6,8]

db.user_login_history.distinct("user_name", { "user_id" : { $gte : 1000 } })
Convert this SQL query into MongoDB
SELECT DISTINCT
    user_name
FROM
    user_login_history
WHERE
    user_id >= 1000

<h2><span style="font-weight:bold;">This is a Heading</span></h2>
Edit this HTML code so that the header text is represented correctly.
<h2>This is a Heading</h2>

[3, 5, 7, 11, 13, 17, 19]
Create a list of all the prime numbers between 3 and 20


length = 6 # The longest substring is "Hello," which has 6 characters.
Find the length of the longest substring of a string
text = "Hello, world!"

char_freq = {
    'H': 1,
    'e': 1,
    'l': 2,
    'o': 2,
    ',': 1,
    ' ': 1,
    'w': 1,
    'r': 1,
    'd': 1,
    '!': 1
}
Create a dictionary mapping each character in a string to its frequency
text = "Hello, world!"

$.ajax({
    url: '<phpfile>.php',
    method: 'GET',
    dataType: 'json',
    success: function(response){
        //handle the response
    }
})
Make a jQuery call to retrieve data from a MySQL database


arr = [[1 for _ in range(4)] for _ in range(4)]
Write a code to create a 2-D array with size (4,4) and fill it with 1's.


In Java, you can declare a new array using the following syntax: int[] arrayName = new int[arraySize];
How can you declare a new array in Java?


int value = 45;
bool found = false;

for(int i = 0; i < arr.length; i++){
    if(arr[i] == value){
        found = true;
        break;
    }
}

if(found)
   cout << "Value found in the array" << endl;
else
   cout << "Value not found in the array" << endl;
Write a C++ code snippet to search for a given value (45) in an array.
arr = [12, 4, 17, 6, 21, 45, 33]

int sum = 0;
for (int i = 0; i < arr.length; i++) {
    sum += arr[i];
}
Write a code to compute the sum of the elements in a given array of integers.
arr = [2, 4, 6, 8]

for (int i = 0; i < arr.length; i++) { 
    if (arr[i] == 5) 
        arr[i] = 10; 
}
Write a code in Java to replace all the occurrences of a given value (5) in an array with a new value (10).
arr = [2, 5, 1, 5, 8]

SELECT Id, Name, Age FROM table_name;
Write a SQL query that extracts information from a table with columns (Id, Name, Age).


In JavaScript, you can remove an element from an array using the splice() method. For example: myArray.splice(index,1);
How can you remove an element from a JavaScript array?


The cut-off frequency of a high-pass filter is the frequency at which the output signal is significantly reduced in magnitude compared with the input signal. It is used to remove low frequency components from a signal. It is commonly measured in hertz (Hz).
What is the cut-off frequency of a high-pass filter?


Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to organize data and define methods of operation on that data. It is based on the concepts of abstraction, encapsulation, inheritance, and polymorphism. OOP simplifies the development and maintenance of software by providing a model for how to structure, design, and use code. OOP also makes it easier to build applications for large and small teams.
Describe the concept of OOP in programming.


The two main types of bug tracking tools are issue tracking systems and bug tracking systems. Issue tracking systems are used for managing customer service or support requests. Bug tracking systems are used for managing and tracking software bugs. Both tools are designed to help developers keep track of software issues, prioritize work, assign tasks, and report on progress.
What are the two main types of bug tracking tool?


def sort_by_length(lst):
    lst.sort(key=len)
    return lst
Write a function to sort a list of strings by length.


The purpose of using global variables in programming is to allow variables to be shared among multiple functions. Global variables are accessible by all the functions within a program and provide an easy way to share data between different functions. By declaring a variable as global, its value can be changed by any other part of the program. This helps reduce the amount of code repetition and makes it easier to maintain the code.
What is the purpose of using global variables in programming?


import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D

# define model
model = Sequential()

# add layers
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 3)))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

# compile model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# fit model
model.fit(x_train, y_train, epochs=10)

# evaluate model
score = model.evaluate(x_test, y_test, verbose=0)
Generate an artificial neural network code to recognize alphanumeric digits.


def binary_search(arr, x):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            left = mid + 1
        else:
            right = mid - 1
    return -1
Complete the following code to implement a binary search.
def binary_search(arr, x):

The importance of writing unit tests is to ensure that the code works correctly and produce the expected results. By writing automated unit tests, developers can quickly and easily detect bugs and errors in their code. Unit tests also help with the building of reliable system architectures since the code is thoroughly tested even before the application is released. Unit tests also help in the code maintenance process since programmers can quickly identify changes made in the code that introduces bugs.
What is the importance of writing unit tests?


^[\w\.+-]+@[\w\.-]+\.[a-zA-Z]{2,4}$
Complete the following regular expression for email address validation.
^[\w\.+-]+@

The difference between a sequential and a parallel collection is the way in which data is processed. A sequential collection is processed one item at a time, from start to finish in a single thread. A parallel collection is processed in chunks at the same time, using multiple threads. The main advantage of using a parallel collection is that it can take advantage of multiple cores in a processor, allowing for faster data processing.
What is the difference between a sequential and a parallel collection?


SELECT *
FROM Employees;
Write a SQL query to display all the columns of the 'Employees' table.


def unique_elements(input_list): 
    result_list = []
    for item in input_list: 
        if item not in result_list: 
            result_list.append(item)
    return result_list

input_list = [2, 3, 9, 5, 2, 4, 9]
print(unique_elements(input_list))
# Output: [2, 3, 9, 5, 4]
Write a Python program to find the unique elements in a list.
2, 3, 9, 5, 2, 4, 9

Big O notation is a measure of the complexity of an algorithm. It describes the worst-case complexity of a given algorithm in terms of time and/or space as the problem size increases.  It can indicate whether an algorithm's performance increases linearly or exponentially as the problem size increases.
What is Big O notation?


<?php

function count_occurrences($string, $word) {
    $words = explode(" ", $string);
    $count = 0;
    foreach ($words as $w)
        if (strtolower($w) == strtolower($word))
            $count++;
    return $count;
}

$string = "Test string";
$word = "string";

echo count_occurrences($string, $word);

?>
// Output: 1
Create a PHP program to count the number of occurrences of a given word in a string.
Test string, word

In object-oriented programming, an object is a self-contained entity that contains both data and code, which together define and control its behavior. Objects can communicate with one another by sending messages and receiving data in response. Objects are used to represent real-world concepts, such as people, places, and things.
What is an object in object-oriented programming?


<table border="1" cellpadding="5" cellspacing="0" width="500"> 
    <tr> 
        <th>Book Name</th> 
        <th>Author</th> 
        <th>Price</th> 
        <th>Rating</th>  
    </tr> 
    <tr>
        <td><b>Harry Potter and the Sorcerer's Stone</b></td> 
        <td>J. K. Rowling</td> 
        <td>$7.99</td> 
        <td>4.7</td> 
    </tr> 
</table>
Create a HTML page that displays a table with 4 columns; Book Name, Author, Price and Rating.


new_list = []
for el in y:
    new_list.append(el)
Create a for loop for iterating over list y and adding its elements to a new list
y = [1,2,3,4,5]

def fibonacci(n): 
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return 0
    elif n == 1: 
        return 1
    else: 
        return fibonacci(n-1) + fibonacci(n-2) 
  
fibonacci(15)
Create a function that takes a number "n" as an argument and returns the nth Fibonacci number
n = 15

if num % 2 == 0:
    print("The number is even")
else:
    print("The number is odd")
Create an if statement to determine if an input number is even.
num = 5

for i in my_list:
    print(i)
Construct a for loop to print out each element in a given list.
my_list = [2, 3, 5, 8]

sum_heights = 0
for height in heights:
    sum_heights += height
avg_height = sum_heights/len(heights)
Construct code to compute the average height from a list of heights.
heights = [170, 140, 160, 180, 160]

name_age_dict = dict(zip(name_list, age_list))
Create a dictionary where the keys are names and the values are their associated ages.
name_list = ["Kai", "Jane", "Andy", "Emily"]
age_list = [23, 32, 16, 55]

def check_palindrome(s): 
    return s == s[::-1] 
  
check_palindrome(s)
Construct a code to check if an input string is a palindrome.
s = "racecar"

for i in range(len(my_list)-1, -1, -1):
    print(my_list[i])
Create a for loop for printing out the elements in a given list in reverse order.
my_list = [1,2,3,4]

let fruits = ["apple", "banana", "orange"];
let colors = ["red", "yellow", "orange"];

let fruitObj = [];

for (let i = 0; i < fruits.length; i++) {
    let obj = {};
    obj.name = fruits[i];
    obj.color = colors[i];
    fruitObj.push(obj);
}
Edit the following code such that output is an array of objects of key value pairs.
let fruit = ["apple", "banana", "orange"];
let colors = ["red", "yellow", "orange"];

SELECT * 
FROM employees
ORDER BY date_of_birth 
LIMIT 3;
Create a SQL query to find the 3 oldest employees in the 'employees' table.


def replace_key_value(s, key, value):
  replacedStr = s.replace(key, value) 
  return replacedStr
Write a function that takes a string, a key and a value as parameters and replaces all occurrences of the key with the value in the string.
s = "This is a sample sentence with some keys to replace."
key = "keys"
value = "words"

def reverse_print_array(arr):
  for i in range(len(arr)-1, -1, -1):
    print(arr[i])
Write a function that prints an array elements in a reverse order.
arr = [0, 1, 2, 3, 4, 5]

def compare_arrays(arr1, arr2, arr3):
  common_elements = []
  for elem in arr1:
    if elem in arr2 and elem in arr3:
      common_elements.append(elem)
  print(common_elements)
Create a program to compare the elements of three arrays and print the elements that are present in all the arrays.
arr1 = [2, 3, 4]
arr2 = [1, 2, 5]
arr3 = [2, 4, 6]

def min_difference(arr):
  min_diff = abs(arr[1] - arr[0])
  for i in range(1, len(arr)-1):
    diff = abs(arr[i+1] - arr[i])
    if diff < min_diff:
      min_diff = diff
  return min_diff
Write a function that takes an array of integers and returns the minimum difference between two consecutive elements.
arr = [4, 2, 7, 5, 1]

def find_missing(arr):
  # sort the array
  arr.sort()
  
  # iterate through the array 
  # to find the smallest positive integer not present 
  for i in range(len(arr)):
    if arr[i] > 0:
      if arr[i+1] != arr[i] + 1:
        return arr[i] + 1
  return arr[-1] + 1
Create an algorithm to find the smallest positive integer not present in an array.
arr = [2, 3, 7, 6, 8, -1, -10, 15]

def merge_sort(arr):
    if len(arr) > 1: 
      mid = len(arr)//2
      left_arr = arr[:mid]
      right_arr = arr[mid:]

      merge_sort(left_arr)
      merge_sort(right_arr)

      i = j = k = 0

      while i < len(left_arr) and j < len(right_arr): 
        if left_arr[i] < right_arr[j]: 
            arr[k] = left_arr[i] 
            i+=1
        else: 
            arr[k] = right_arr[j] 
            j+=1
        k+=1
      while i < len(left_arr): 
        arr[k] = left_arr[i] 
        i+=1
        k+=1
      
      while j < len(right_arr): 
        arr[k] = right_arr[j] 
        j+=1
        k+=1
Sort the following array using the merge sort algorithm.
arr = [4, 10, 5, 1, 8, 9]

def binary_search(arr, target):
  low = 0
  high = len(arr) - 1

  while low <= high: 
    mid = (low + high) // 2
    if arr[mid] == target: 
      return mid 
    elif arr[mid] < target: 
      low = mid + 1
    else: 
      high = mid - 1
  return -1
Create an algorithm for searching for an element in a sorted array.
arr = [2, 4, 6, 8, 10]
target = 6

db.collection.find({"Status":"Done"})
Query the MongoDB database for all the documents that have "Status" field set to "Done".


if score > 80 and score < 90:
    grade = "D"
Assign "D" as the grade for a student whose score is higher than 80 and lower than 90.
score = 85

SELECT people 
FROM orders 
WHERE item = 'Apple iPod' AND category = 'Electronics'
List the people who have bought "Apple iPod" from the "Electronics" category.


Machine Learning is the process of using algorithms to gain insights from data and to improve automation.
Summarize this text in one sentence.
Machine Learning is the study of algorithms that improve automatically through the experience gained from available data.

No compile-time error.
Compile this Java program to determine any compile-time errors.
public class HelloWorld {
  public static void main(String[] args) {
    System.out.println("Hello , World");
  }
}

std::cout << arr[2] << std::endl;
Complete the following C++ code to print the 3rd element from the array.
int arr[5] = {1,2,3,4,5};

<table style="width:100%">
  <tr>
    <th>Student</th>
    <th>Grade</th> 
  </tr>
  <tr>
    <td>Student1</td>
    <td>B</td>
  </tr>
  <tr>
    <td>Student2</td>
    <td>A</td> 
  </tr>
  <tr>
    <td>Student3</td>
    <td>C</td> 
  </tr>
  <tr>
    <td>Student4</td>
    <td>D</td> 
  </tr>
  <tr>
    <td>Student5</td>
    <td>F</td> 
  </tr>
  <tr>
    <td>Student6</td>
    <td>A</td> 
  </tr>
</table>
Generate an HTML table that displays the student names and grades in a 3x3 grid.
Student1: B
Student2: A
Student3: C
Student4: D
Student5: F
Student6: A

total_cost = (price1*quantity1) + (price2*quantity2)
print(total_cost)  # Output: 95
Calculate the total cost of items purchased by a customer.
price1 = 10
quantity1 = 5
price2 = 15
quantity2 = 3

from sklearn.neural_network import MLPClassifier

model = MLPClassifier()
model.fit(X_train, y_train) # X_train and y_train are the training data
Train a Neural Network model to classify handwritten digits.


UPDATE Table
SET name = 'John', age = 26
WHERE id = 1;
Update the SQL table with the following data.
id 	name     	age
1	    John        26

title = soup.find('title').text
print(title) # Output: This is the Page Title
Parse and extract the title of this HTML page.
<html><head><title>This is the Page Title</title></head></html>

Customer customer = new Customer();
Generate C# code that creates an instance of the Customer class.


sum = 0
for number in [2, 3, 4]:
    sum += number ** 2

print(sum) # Output: 29
Find the sum of the squares of the following numbers.
[2, 3, 4]

int input_number = 4;
 
int order = 0;
 
for(int i=0; i < input_number; i++){
    order++;
}
 
printf("The order of the number %d in ascending order is %d.", input_number, order);
Write a C program to calculate the order of a particular number in ascending order.
input_number = 4

function octToDec(octal_number){
    let dec_number = 0;
    let i = 0;
    while(octal_number != 0){
        dec_number += (octal_number % 10) * Math.pow(8,i);
        octal_number = Math.floor(octal_number/10);
        i++;
    }
    return dec_number;
}
var decimal_number = octToDec(014);
console.log(decimal_number);
Write a JavaScript function to convert a number from octal to decimal.
octal_number = 014

import javax.swing.JOptionPane;
 
public class DisplayMessage {
 
    public static void main(String[] args) {
        JOptionPane.showMessageDialog(null, "Hello world!", "Message", JOptionPane.INFORMATION_MESSAGE);
    }
 
}
Generate Java code to display a message on a GUI.


def squared(num):
    return num * num
 
num = 5
print(squared(5))
Edit the following code to make it run without errors.
def squared(num):
    return num * num
 
num = 5
print(squared(5)

def sayHi(name):
    print("Hi "+name+"! How are you today?")
Design a function with the following output.


$userName = "user123";
$password = "12345";

if (empty($userName) || empty($password)) {
    echo "Error: username and password cannot be empty.";
    exit;
} 
$valid = true;
if (strlen($userName) < 5 || strlen($password) < 8) {
    $valid = false;
}
if (preg_match('/[^a-zA-Z0-9_]/', $userName) || preg_match('/[^a-zA-Z0-9_]/', $password)) {
    $valid = false;
}
 
if ($valid == false) {
    echo "Error: invalid username or password.";
    exit;
}
Generate PHP code to validate a username and password.


arr = [1, 2, 3, 4, 5]

for i in arr: 
 if i % 2 == 0 : 
 print(i)
Edit the following code to check for even numbers in the array.
arr = [1, 2, 3, 4, 5]

class Fibonacci 
{ 
    static int fib(int n) 
    { 
        if (n <= 1) 
            return n; 
        return fib(n-1) + fib(n-2); 
    } 
  
    public static void main (String args[]) 
    { 
        int num = 10, sum = 0; 
        for (int i = 1; i <= num; i++) 
        { 
            sum += fib(i); 
        } 
        System.out.println(sum); 
    } 
}
Calculate the sum of the first 10 Fibonacci numbers in Java.


let str = "I'm a GPT model";
let length = str.length;
console.log(length); // 16
Find the length of a given string using JavaScript.
str = "I'm a GPT model"

function swap(a, b) {
    let temp = a;
    a = b;
    b = temp;
}
Write a JavaScript function that swaps the values of two variables.


SELECT * FROM table_name WHERE id BETWEEN 5 AND 10;
Write a SQL statement to get all records from a table which has id between 5 and 10.


import random

def generate_random_string():
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(8))
Generate a random string of 8 characters with at least 1 digit.


<table>
  <tr>
    <th>Column 1</th>
    <th>Column 2</th>
    <th>Column 3</th>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>
Create an HTML table with three columns and five rows.


function isEqual(a, b) {
    if (a === b) {
        return true;
    }
    return false;
}
Write a JavaScript function that takes two integers and returns true if the numbers are equal and false otherwise.


def factorial(n): 
   if n == 0: 
       return 1
   elif n > 0: 
       return n * factorial(n-1) 
   else: 
       return "Enter a positive integer"
Develop an algorithm in Python to calculate the factorial of a given number n.


def ascending_order(arr): 

# Bubble sort algorithm. 
    n = len(arr) 
   
    # Traverse through all array elements 
    for i in range(n): 
   
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
   
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
                
    return arr

# Test 
arr = [4, 3, 2, 5, 9, 1, 8]

ascending_order(arr) 
  
print ("Sorted array is:") 
for i in range(len(arr)): 
    print ("%d" %arr[i]),
Create a coding program that sorts a given list of numbers into ascending order.
[4, 3, 2, 5, 9, 1, 8]

def collect(array1, array2):
    result = array1 + array2 
    return result
Write a function that collects elements from two given arrays and creates a new array.
array1 = [1, 2, 3] 
array2 = [4, 5, 6]

def is_prime(number):
  if number<1:
    return False
  for check in range(2,number):
    if number%check==0:
      return False
  return True
Develop a program that takes a number and prints "true" if it is a prime number, and "false" otherwise.


def find_duplicates(nums):
    duplicates = []
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] == nums[j]:
                duplicates.append(nums[i])
    return duplicates
Develop a function to find all elements in a given array which appear more than once.
nums = [4, 3, 6, 7, 3, 8, 4, 9]

def array_mean(array):
    total = 0
    for num in array:
        total += num
    mean = total / len(array)
    return mean
Design a function to find the average of a given array.
array = [1, 2, 3]

def print_pattern():
    for i in range(1, 5):
        for j in range(1,i+1):
            print(j, end=" ")
        print()
Develop an algorithm to print out the following pattern.


def stdev(arr):
    n = len(arr)
    mean = sum(arr) / n
    variance = sum((x - mean) ** 2 for x in arr) / n
    return (variance ** 0.5)
Create a program to calculate the standard deviation of an array of numbers.
arr = [10, 8, 12, 5, 9]

def mean(nums):
    sum = 0
    for i in nums:
      sum += i
    return sum / len(nums)
Create a function that calculates the average of given list of numbers.
[10, 15, 20, 25, 30]

def difference(num1, num2):
    return abs(num1 - num2)
You need to code a program that prints the absolute difference between two numbers.
15 and 10

def sum_of_primes(start, end): 
    sum = 0
    for i in range(start, end + 1):
        if isPrime(i): 
            sum = sum + i 
    return sum
    
def isPrime(num): 
    if num > 1: 
        for i in range(2, num): 
            if (num % i) == 0: 
                return False
        return True
    else: 
        return False
Calculate the sum of all the prime numbers between a given range.
15 and 20

No output required
Formulate a query to select the rows based on multiple conditions
SELECT * FROM fruit WHERE color='red' AND quantity > 5

def binary_search(arr, num, start, end): 
    if start >= end: 
        return None
  
    mid = start + (end - start)//2
    if arr[mid] == num: 
        return mid 
  
    if arr[mid] < num: 
        return binary_search(arr, num, mid+1, end) 
    else: 
        return binary_search(arr, num, start, mid-1)
Implement a recursive binary search on a given sorted list.
[-4, -2, 0, 6, 7, 8]

def convertToYMD(num_days):

    years = int(num_days/365)
    rem_days = num_days % 365
    months = int(rem_days / 30)
    days = rem_days % 30
    return [years, months, days]
You need to code a program that converts a given number of days to years, month and days.
450 days

def flatten(arr):
    output_list = []
    for sublist in arr:
        for item in sublist:
            output_list.append(item)
    return output_list
Write a function to flatten a given array of lists.
[[1,2], [3,4], [5,6]]

def sort_dict(arr):
	arr.sort(key=lambda s: [s.lower(), s])
	return arr
Create a function to sort a given set of strings in dictionary order.


{
    "person": {
        "fullname": {
            "firstname": "John",
            "lastname": "Smith"
        },
        "age": 45,
        "hobbies": ["sample hobbby 1", "sample hobby2"]
    }
}
Clean up the following json data so that all the fields are consistent with the same data type.
{
    "person": {
        "fullname": {
            "firstname": "John",
            "lastname": "Smith"
        },
        "age": 45,
        "hobbies": ["sample hobbby 1", "sample hobby2", 3]
    }
}

class Person:
     def __init__(self, firstname, lastname, age, hobbies):
           self.firstname = firstname
           self.lastname = lastname
           self.age = age
           self.hobbies = hobbies
Construct a python class to store a person's data like name, age, and hobbies.


formatted_string = pattern.format(firstname = string.split()[0], lastname = string.split()[1], age = string.split()[2])
Format a given string according to a given pattern.
string = 'John Doe, 25'
pattern = '{lastname}, {firstname} {age}'

def get_nth_fibonacci(n):
 if n == 0 or n == 1:
 return n
 else:
 return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)
Construct a python method to get the nth Fibonacci number.


def get_max(num1, num2):
 return max(num1, num2)
Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers.
def get_max(num1):
 return num1

def library_books_view(request):
 books = Book.objects.all()
 context = {'books': books}
 return render(request, 'library/books.html', context)
Create a Django view that displays all the books stored in the library's database.


def has_unique_chars(string): 
  chars = set() 
  for char in string: 
    if char in chars: 
      return False 
    else: 
      chars.add(char) 
  return True
Implement a method to check if a given string has all unique characters.


def remove_item(lst, item):
 if item in lst:
    lst.remove(item)
Suggest a method to remove a given item from a given list.


import pandas as pd

df = pd.DataFrame(data)
Create a Pandas DataFrame from a given dictionary of lists.
data = {'Year': [2020, 2021, 2022],
 'Sales': [50000, 70000, 60000]}

To create a custom exception in Python, you will have to subclass Exception class and define your own exception class. For example: 
 
class MyCustomException(Exception):
  pass 
 
Then you can use the exception in a try-except block to handle expected errors:
 
try: 
  ...
except MyCustomException: 
  ...
Explain how to create a custom exception in Python.


// Java Program to calculate the sum of all even 
// numbers in a given range 

public static int sumOfEvenInRange(int n1, int n2) { 
    int sum = 0; 
      
    // calculating the sum of all even numbers in given range 
    for (int i = n1; i <= n2; i++) { 
        // if num is even then add it 
        if (i % 2 == 0) { 
            sum += i; 
        } 
    } 
    return sum; 
}
Write a function in Java to calculate the sum of the even numbers in a given range of integers.
Start: 10 
End: 20

#include<stdio.h> 

// Function to find the difference between smallest and largest element in given array 
int findDifference(int array[], int n) 
{   
    int max = 0; 
    int min = array[0]; 
  
    // Find maximum and minimum element in array 
    for (int i = 0; i < n; i++)  
    { 
        if (array[i] > max) 
            max = array[i]; 
          
        if (array[i] < min) 
            min = array[i]; 
    } 
    return (max - min); 
} 

// Driver Code 
int main() 
{ 
    int array[] = { 100, 2, 11, 1, 5, 34, 45 }; 
    int n = sizeof(array)/sizeof(array[0]); 
    printf("Difference between largest and smallest element: %d",findDifference(array, n)); 
    return 0; 
}
Create a program in C to find the difference between the smallest and the largest number in a given array.
array = { 100, 2, 11, 1, 5, 34, 45 }

UPDATE TableA
SET column_2 = column_1
WHERE column_2 IS NULL;
Update the following SQL table column with the values in another column.
Table A 

id | column_1 | column_2
--------------------
1  |        25|      NULL
2  |        29|      NULL

<!DOCTYPE html>
<html> 
  <head> 
    <title>This Is a Test</title> 
    <link rel="stylesheet" type="text/css" href="styles.css"> 
  </head> 
  <body>
    <h1>Hello World!</h1> 
  </body>
</html>
Modify the following HTML to apply an external style sheet.
<html> 
  <head> 
    <title>This Is a Test</title> 
  </head> 
  <body>
    <h1>Hello World!</h1> 
  </body>
</html>

import re 
  
def check(password): 
  
    #Define pattern rules
    pattern = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}"
      
    if (re.search(pattern,password)): 
        return True
    else: 
        return False 
  
# Driver code     
password = "Geronimo1"
if (check(password)): 
    print("Valid Password") 
else: 
    print("Invalid Password")
Write an expression to verify the validity of a given password in Python.


let arr = [ 
  { name: 'Jill', lastname: 'Smith' }, 
  { name: 'Bob', lastname: 'Jones' },
  { name: 'Jack', lastname: 'Bauer' }
];

arr.sort((a, b) => (a.name > b.name) ? 1 : -1);
  
console.log(arr);
Organize the following array of objects in ascending order by the 'name' field.
[ 
  { name: 'Jill', lastname: 'Smith' }, 
  { name: 'Bob', lastname: 'Jones' },
  { name: 'Jack', lastname: 'Bauer' }
]

let minutes = 55;
let seconds = minutes * 60;

console.log(seconds); //3300
Write an expression in JavaScript to convert a given number of minutes to seconds.
minutes = 55

// C++ program to allocate memory for an array of integers 

#include<iostream> 
using namespace std; 
  
int* allocatearray(int size) 
{ 
    // Allocate memory for given number of integers 
    int *ptr = new int[size]; 
  
    // Initialize the array 
    for (int i = 0; i < size; i++) 
        ptr[i] = i+10; 
  
    return ptr; 
} 
  
// Main function 
int main() 
{ 
    int size = 5; 
    int *ptr = allocatearray(size); 
  
    cout << "Array elements are "; 
    for (int i = 0; i < size; i++) 
        cout << ptr[i] << " "; 
  
    cout << endl; 
  
    delete[] ptr; 
  
    return 0; 
}
In C++, write a function to allocate memory for an array of integers.
size = 5

SELECT name, salary 
FROM TableA
WHERE salary = (SELECT AVG(salary) FROM TableA);
Create a program in SQL to display the name and salary of the employees whose salary is equal to the average salary of the employees.
Table A

id | name  | salary
-----------------
1 | John  | 35000
2 | Peter | 50000 
3 | Dave  | 70000

def assign_values(list): 
    for i, val in enumerate(list): 
        if not val or val != val: 
            list[i] = 0
            
    return list

my_list = [5, 2, 3, None, '', 8] 
result = assign_values(my_list) 
print(result) 
# Output: [5, 2, 3, 0, 0, 8]
Write a function in Python to assign the value 0 for special values, i.e. empty strings and NaN.
my_list = [5, 2, 3, None, '', 8]

let side_1= 10;
let side_2= 10;
let side_3= 8;
 
//calculate the permiter of triangle 
let perimiter = (side_1 + side_2 + side_3)/2;
 
//calculate the area of triangle using Heron's formula 
let area = Math.sqrt(perimiter*(perimiter-side_1)*(perimiter-side_2)*(perimiter-side_3));
 
console.log(area);
Create a program in JavaScript to calculate the area of a triangle with given side lengths.
side_1 = 10
side_2 = 10
side_3 = 8

my_list = [1, 2, 3, 4, 5]

# Calculate the sum 
sum_nums = sum(my_list)

print(sum_nums) 
# Output: 15
Calculate the sum of the numbers given in the following list using Python.
my_list = [1, 2, 3, 4, 5]

<select>
  <option value="Home">Home</option>
  <option value="AboutUs">About Us</option>
  <option value="ContactUs">Contact Us</option>
  <option value="Careers">Careers</option>
</select>
Create a drop-down list with menu items in HTML.
List Items: Home, About Us, Contact Us, Careers

SELECT * FROM TableName WHERE PropertyID='15';
Produce a SELECT query in PostgreSQL to search for all existing entries with a specified ID.
Property ID: 15

public double GetAreaOfCircle(double radius)
{
    return Math.PI * Math.Pow(radius, 2);
}
Write a function in C# to calculate the area of a circle from its radius.
Radius: 5

One can use the Collections.sort() method to perform an alphabetical sort of a list of strings in Java. For example, List<String> myList = new ArrayList<String>(); myList.add("Joe"); myList.add("Bob"); myList.add("Tom"); Collections.sort(myList); This will sort the strings alphabetically in the list.
Explain how can one sort a list of strings alphabetically in Java.


import tkinter as tk

window = tk.Tk()

label = tk.Label(text='Please enter your name:')
label.pack()

name = tk.Entry(window, width=25)
name.pack()

def greet_user():
	welcome = "Welcome to our website, " + name.get()
	
	greeting = tk.Label(text=welcome)
	greeting.pack()

btn = tk.Button(window, text='Submit', command=greet_user)
btn.pack()

window.mainloop()
Design a GUI in Python to accept user input and display a welcome message.
Message: Welcome to our website!

SELECT * FROM ItemTable WHERE LOWER(ItemDescription) LIKE '%chair%';
Write a SQL command to search for data containing a case-insensitive substring.
Table Name: ItemTable
Column Name: ItemDescription
Search Term: Chair

SELECT * FROM MemberTable ORDER BY RAND() LIMIT 1;
Retrieve a random record from a MySQL table.
Table Name: MemberTable

SELECT `item_name`, `item_price` FROM TableName;
Create an array of column names in a MySQL query.
Column Names: item_name, item_price

function convertStringToArray($string) {
  return explode(",", $string);
}
Write a function in PHP to convert a string to an array.
String: "A,B,C"

Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted.
Describe how a bubble sort algorithm works.


let i = 20;
while (i <= 30) {
  console.log(i);
  i++;
}
Create a while loop in JavaScript to print out all the numbers between 20 and 30.


for (int i = 1; i <= 10; i++) {
	System.out.println(i);
}
Generate a for loop in Java to display all the numbers between 1 and 10.


SELECT * FROM StudentTable WHERE Accepted='True';
Modify the code snippet to filter all records from a table using SQL.
Table Name: StudentTable
Filter Type: Accepted

try 
{
   // Code here
}
catch(Exception ex)
{
   // Handle exceptions
}
Construct a try-catch block in C#.


The count() method is used to count the number of times a particular item appears in a list. It takes the element as an argument and returns the count of the specified element in the list.
Explain the purpose of the count() method.


# Python program to remove leading and trailing white spaces from a string 
  
# Function to remove leading and trailing white spaces 
def removeWhitespaces(string): 
    # Remove leading and trailing whitespaces 
    newString = string.strip() 
  
    # Returns the new string with leading and trailing 
    # whitespaces removed 
    return newString 
  
# Driver program 
inputString = "Hello world   "
  
# Printing the modified string 
print(removeWhitespaces(inputString))
Given a string, write a program to remove the leading and trailing white spaces from the string and output the modified string.
String: "Hello world   "

The sort() method sorts the elements of a given iterable in ascending order. It modifies the original list in place and does not return a value. The sorted() method on the other hand, returns an iterable sorted list without modifying the original sequence. It takes an optional 'key' argument to specify a function to be called on each list element prior to making comparisons.
What is the difference between sort() and sorted()?


def collect_unique(dic_list, key):
    unique_values = set()
    for item in dic_list:
        val = item.get(key)
        if val is not None:
            unique_values.add(val)
    return list(unique_values)
Define a function to collect unique values from a list of dictionaries based on the "key" field.
list = [{'name': 'Apple', 'price': 100}, {'name': 'Mango', 'price': 90}, {'name': 'Apple', 'price': 200}]

print(string1 + string2)
Output the concatenation of two strings.
String1: "Hello"
String2: "world"

longest_word = max(sentence.split(), key=len)
Find the longest word in the given sentence.
Sentence: “The cow jumped over the moon.”

def parse_html(html):
    root = BeautifulSoup(html, 'html.parser')
    heading = root.find('h1').text
    content1 = root.find('p').text
    items = [li.text for li in root.find_all('li')]
    return {
        'heading': heading,
        'content1': content1,
        'items': items
    }
Generate code to parse the following HTML.
<div>
    <h1>Heading</h1>
    <p>Content 1 </p>
    <ul>
      <li>Item 1</li>
      <li>Item 2</li>
    </ul>
</div>

str1 is a valid URL, whereas str2 is not.
Identify which of the two strings is a valid URL.
str1 = "http://example.com/blog"
str2 = 'example.com/blog'

import json

json_str = '{"name": "John", "age": 30, "city": "New York"}'
py_dict = json.loads(json_str)

# py_dict would be {"name": "John", "age": 30, "city": "New York"}
Convert the following JSON string to a Python dictionary.
{"name": "John", "age": 30, "city": "New York"}

def print_args(arg1, arg2):
    print("Arg 1: %s" % str(type(arg1))) 
    print("Arg 2: %s" % str(type(arg2))) 
    print("Arg 1:  %s" % arg1)
    print("Arg 2:  %s" % arg2)
Modify the following function to print out the 'type' of each argument.
def print_args(arg1, arg2):
    print("Arg 1:  %s" % arg1)
    print("Arg 2:  %s" % arg2)

def add_matrices(mat1, mat2):
    """
    This function takes two 2D matrices and adds them,
    returning a new 2D matrix.
    """
    output = []
    
    for i in range(len(mat1)):
        row_m1 = mat1[i]
        row_m2 = mat2[i]
        row_sum = []
        for j in range(len(row_m1)):
            row_sum.append(row_m1[j] + row_m2[j])
        output.append(row_sum)
        
    return output
    
result = add_matrices(matrix1, matrix2)
Write a Python program to add two matrices.
matrix1 = [[3, 5],
           [6, 2]]

matrix2 = [[1, 2],
           [3, 4]]

num1 = 10
num2 = 5

print(num1 + num2)
Edit the following code to make it print out the sum of two numbers.
num1 = 10
num2 = 5

print(num1 * num2)

from datetime import datetime

date = 'January 5 2021'
formatted_date = datetime.strptime(date, '%B %d %Y').isoformat()
print(formatted_date)
Format the following date according to ISO 8601 standard.
date = 'January 5 2021'

Two coding languages used by Python developers are Python and C++.
Identify two coding languages used by Python developers.


Endpoint: ‘/api/v1/events’
HTTP Method: GET
Response Format: JSON
Response:
{
  "status": 200,
  "events": [
    { "eventId": 1,
      “description”: “Company Meeting”,
      "dateTime": "2020-11-05T09:00:00"
    },
    { 
      "eventId": 2,
      “description”: “Board Meeting”,
      "dateTime": "2020-11-08T14:00:00"
    }
  ]
}
Construct a REST API to get the list of current events from a Web Calendar application.


#!/bin/bash

echo "Show a list of running processes"
ps aux | grep -v grep | awk '{print $2 "  " $11}'
Debug the following bash script to ensure it works as intended.
#!/bin/bash

echo "Show a list of running processes"
ps

Steps for creating a customer management system using Python and the Django web framework:
1. Create a Django project
2. Add customers app to the project 
3. Create a model for customers in the customers app
4. Update the customers app's views function to include the logic for adding, deleting, and updating customers
5. Add customers app the the project's urls.py file to map requests to the views functions
6. Create and update templates in the customers app to provide the UI
7. Run the Django project to launch the web application
Create a customer management system using Python and the Django web framework.


list_one = [1, 2, 3]
list_two = [4, 5, 6]
combined_list = list_one + list_two
print(combined_list) # Output: [1, 2, 3, 4, 5, 6]
Combine the two lists below using Python to produce a single list containing all elements from both.
list_one = [1, 2, 3]
list_two = [4, 5, 6]

query {
  selectedUser {
    posts {
      title
      body
      createdAt
      comments {
        body
        author {
          name
        }
      }
    }
  }
}
Construct a GraphQL query for retrieving posts for the selected user.


public static void insertSort(int[] arr) {
  for (int i = 1; i < arr.length; i++) {
    int currentElement = arr[i];
    int j = i - 1;
    while (j >= 0 && arr[j] > currentElement) {
      arr[j + 1] = arr[j];
      j--;
    }
    arr[j + 1] = currentElement;
  }
}
Implement an Insertion Sort algorithm in Java.


const addNumbers = (num1, num2) => num1 + num2;
Upgrade the following JavaScript code to use ES6 features.
function addNumbers(num1, num2) {
  return num1 + num2;
}

Steps for creating an Express application for a web store:
1. Install Express in the project.
2. Create the routes for the endpoints.
3. Create the controllers that handle the request logic.
4. Add the required models for the endpoints.
5. Use express.static() to enable static files.
6. Create and enable middleware for authentication.
7. Set up a testing environment.
8. Create the view for the application.
Create an Express application for a web store with endpoints for adding products, deleting products and viewing products.


def calculateFactorial(n):
  if n == 0:
    return 1

  return n * calculateFactorial(n - 1)
Provide an example of a recursive Python function to calculate the factorial of a number.


Steps for creating a PostgreSQL database with a table to store user details:
1. Connect to PostgreSQL database.
2. Create database demodb.
3. Create table to store user details.
  Columns:
  id - INT
  name - VARCHAR
  address - VARCHAR
  email - VARCHAR
  date_of_birth - DATE
4. Apply constraints to the table.
5. Grant read and write access to the database.
Create a PostgreSQL database with a table to store user details.


SELECT * FROM employees WHERE salary BETWEEN 50000 AND 100000;
Construct an MySQL query to select records from a table named 'employees' where salary is between 50000 and 100000.


public static String longestCommonSubsequence(String s1,String s2) {
   int l1 = s1.length();
   int l2 = s2.length();

   int[][] aux = new int[l1+1][l2+1];
   for (int i = 0; i < l1; i++) {
      for (int j = 0; j < l2; j++) {
         if (s1.charAt(i) == s2.charAt(j))
            aux[i+1][j+1] = aux[i][j] + 1;
         else
            aux[i+1][j+1] = Math.max(aux[i+1][j], aux[i][j+1]);
      }
   }
   StringBuilder sb = new StringBuilder();
   for (int i = l1, j = l2; i != 0 && j != 0; ) {
      if (aux[i][j] == aux[i-1][j])
         i--;
      else if (aux[i][j] == aux[i][j-1])
         j--;
      else {
         sb.append(s1.charAt(i-1));
         i--;
         j--;
      }
   }
   return sb.reverse().toString();
}
In a Java program, write a method to find the longest common subsequence of two strings.


void insertItem(Node*& root, int data) {
  Node* newNode = new Node; 
  newNode->data = data; 
  newNode->next = root; 
  root = newNode; 
}
Write a function in C++ to insert an item into a linked list.


class MyClass:
    <statement(s)>
What is the syntax for creating a class in Python?


if (str.indexOf('hello') !== -1) {
  console.log('The string contains the substring hello');
}
Write a JavaScript code snippet to check if a given string contains the substring 'hello'.


def get_first_five_characters(string):
  return string[:5]

print(get_first_five_characters(string)) # Output: 'This '
Write a function in Python to extract the first 5 characters of a string.
string = "This is a sample string."

let myDict = {
  key1: value1,
  key2: value2
}
How can we create a dictionary in JavaScript?


let myArray = [element1, element2, ...elementN];
What is the syntax for creating an array in JavaScript?


import random

randomNumber = random.randint(minNum, maxNum)
How can we generate a random number within a given range in Python?


def most_common(myList):
  return max(set(myList), key=myList.count)
Write a Python function to find the most common element in a given list.


for (int i=0; i<sizeof(a)/sizeof(a[0]); i++) {
    cout << a[i] << " ";
}
Suggest a for loop for printing all elements in an array.
int a[] = {11, 22, 33, 44, 55};

string decimalToBinary(int number) {
    string binaryNum = "";
    while(number > 0) {
        binaryNum = (number % 2 == 0 ? "0" : "1") + binaryNum;
        number = Math.trunc(number / 2);
    }
    return binaryNum;
}
Suggest a way to convert a decimal number to binary.
int number = 15

stringToInt :: String -> Int
stringToInt x = read x :: Int
Write a Haskell program to convert a given string to an Integer.
string text = "12345"

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) { 
        key = arr[i]; 
        j = i - 1; 
        while (j >= 0 && arr[j] > key) { 
            arr[j + 1] = arr[j]; 
            j = j - 1; 
        } 
        arr[j + 1] = key; 
    }
}
Suggest a way to sort a given array using insertion sort algorithm.
int arr[] = {82, 2, 25, 14, 5, 9}

SELECT product, SUM(quantity) AS total_sales
FROM Sales
GROUP BY product;
Write a SQL query to summarize the sales of each product.
Table: Sales
Columns: product, quantity

# Function to delete all the elements 
# of the linked list 
def deleteList(head_node): 
    # Store head node 
    curr = head_node 
    prev = None

    # Traverse the list and delete 
    # each node one by one 
    while(curr): 
        # Next node  
        next = curr.next
        # Free the current node 
        curr = None
        # Update prev and curr node 
        prev = curr 
        curr = next
Write a code snippet to delete all elements from a linked list.


result = " ".join(lst)
print(result) # This is a list of strings
Given a list of strings, write a program to combine them into one string with a space between each element.
lst = ['This', 'is', 'a', 'list', 'of', 'strings']

SELECT AVG(age) as avg_age, MIN(age) as min_age, MAX(age) as max_age
FROM Users;
Write an SQL query to find the average, minimum, and maximum age of all users in the "users" table.
Table: Users
Columns: id, name, age

def hash(string):
    result = 0
    for char in string:
        result += ord(char)
    return result
Write a function to compute a hash code for a string.


import json

json_string = '{"name": "John Doe", "age": 42 }'
data = json.loads(json_string)

print(data['name']) # John Doe
print(data['age']) # 42
Write a code to parse a JSON string into Python objects.
json_string = '{"name": "John Doe", "age": 42 }'

#include <iostream> 
using namespace std;

// Finds the largest element in the array 
int findLargestElement(int arr[], int n) 
{ 
	// Initialize maximum element 
	int max = arr[0]; 

	// Traverse array elements from second and 
	// compare every element with current max 
	for (int i = 1; i < n; i++) 
		if (arr[i] > max) 
			max = arr[i]; 

	return max; 
} 

// Driven program 
int main() 
{ 
	int arr[] = {2, 3, 5, 8, 9}; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	
	cout << "Largest Element = " << findLargestElement(arr, n); 
	
	return 0; 
}
Build a program in C++ which finds the largest element in an array.
int arr[] = {2, 3, 5, 8, 9}

public static boolean isPrime(int n) 
{ 
    // Corner case 
    if (n <= 1) 
        return false; 
  
    // Check from 2 to n-1 
    for (int i = 2; i < n; i++) 
        if (n % i == 0) 
            return false; 
  
    return true; 
}
Construct a function in Java to validate whether an input integer is a prime number.
int n = 7

def reorder_string(s):
    s = sorted(s)
    return ''.join(s)

print(reorder_string('dcba'))
Write an algorithm in Python which reads a string and reorders it alphabetically.
string s = 'dcba'

#include <stdio.h> 
#include <string.h> 

// Function to check if a string is palindrome 
bool isPalindrome(char str[]) 
{ 
	// Start from leftmost and rightmost corners of str 
	int l = 0; 
	int h = strlen(str)-1; 

	// Keep comparing characters while they are same 
	while (h > l) 
	{ 
		if (str[l++] != str[h--]) 
			return false; 
	} 
	return true; 
} 

// Main function 
int main() 
{ 
	char str[] = "amanama"; 

	if (isPalindrome(str)) 
		printf("Yes"); 
	else
		printf("No"); 

	return 0; 
}
Generate a code in C to check if a sentence is a palindrome.
char str[] = "amanama"

<html>
    <head>
        <title>Popup Window</title>
    </head>
    <body>
    
  <!-- Trigger/Open The Modal -->
  <button id="myBtn">Open Popup Window</button>
  
  <!-- The Modal -->
  <div id="myModal" class="modal">

    <!-- Modal content -->
    <div class="modal-content">
      <span class="close">&times;</span>
      <p>This is the popup window!</p>
    </div>

  </div>

  <script>
    // Get the modal
    var modal = document.getElementById("myModal");

    // Get the button that opens the modal
    var btn = document.getElementById("myBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal 
    btn.onclick = function() {
        modal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function() {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
  </script>
    </body>
</html>
Construct a HTML code which opens a popup window.


#include <stdio.h>  
void primeCount(int lower, int upper) 
{ 
    while (lower < upper) { 
        int flag = 0; 
  
        for (int i = 2; i <= lower / 2; ++i) { 
            if (lower % i == 0) { 
                flag = 1; 
                break; 
            } 
        } 
  
        if (flag == 0) 
            printf("%d ", lower); 
  
        ++lower; 
    } 
} 
  
// Driver program 
int main() 
{ 
    int lower = 1;
    int upper = 20;
    primeCount(lower, upper); 
    return 0; 
}
Build a program in C to find all prime numbers within a given range.
int lower = 1;
int upper = 20;

SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 3;
Construct a MySQL query to find the 3 employees with the highest salaries.


<?php

function isEven($num) {
    return ($num%2 == 0);
}

$num = 3;
 
if(isEven($num)) {
    echo $num." is even";
} else {
    echo $num." is odd";
}

?>
Generate a PHP code to determine if a number is odd or even.
$num = 3

SELECT e.Name, e.Age, d.Dept_Name, d.Location
FROM Employees e
INNER JOIN Departments d 
ON e.Dept_ID = d.Dept_ID;
Create a SQL query to join two tables called Employees and Departments.
Employees table has the following columns:
Emp_ID: int
Name: string
Age: int
Dept_ID: int

Departments table has the following columns:
Dept_ID: int
Dept_Name: string
Location: string

import xml.etree.ElementTree as ET

tree = ET.parse('data.xml')
root = tree.getroot()

for child in root:
 print(child.tag, child.attrib, child.text)
Parse a given XML document using the ElementTree module.
<note>
  <to>John</to>
  <from>Alice</from>
  <heading>Greeting</heading>
  <body>Hi John, how are you?</body>
</note>

def format_number(num):
 return '{0:.2f}'.format(num)
Create a function to format a given number to two decimal places.


# Set a swap flag to true
swap = true 
# While the flag is true
while swap 
  # Set the swap flag to false
  swap = false
  # Iterate through the list
  for i in range(len(list) - 1):
    # Swap adjacent element if they are out of order
    if list[i] > list[i + 1]:
      temp = list[i]
      list[i] = list[i + 1]
      list[i + 1] = temp
      # Set the flag back to true
      swap = true
Write pseudocode to sort a given list of integers using bubble sort.


def merge_json(json_a, json_b):
 # Create a new object
 merged = dict()
 # Iterate through the keys in both objects
 for key in json_a.keys() | json_b.keys():
   # Merge the values of matching keys
   if key in json_a and key in json_b:
     if isinstance(json_a[key], list) and isinstance(json_b[key], list):
       merged[key] = json_a[key] + json_b[key]
     else:
       merged[key] = [json_a[key], json_b[key]]
   # Add keys that only exist in one object
   elif key in json_a:
     merged[key] = json_a[key]
   elif key in json_b:
     merged[key] = json_b[key]
 # Return the merged object
 return merged
Compare two given JSON objects and create a merged object.
Object A: {
	"name": "John",
	"age": 35,
	"interests": ["music"]
}
Object B: {
	"name": "John",
	"hobbies": ["cycling"]
}

p.description {

}
Create a CSS selector to target all <p> elements with the class "description".


if ($string =~ m/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/) {
 print "Valid email address\n";
}
Create a Perl regular expression to verify if a given string is a valid email address.


Hello
Identify the correct output of this Java program given the input.
Input: Hello

def function(a):
    b = a * 2
    c = a * 0.5
    if b == c:
        return "equal"
    else:
        return "not equal"
Find and remove the bug from this Python code.
def function(a):
    b = a / 0.5
    c = a / 2.0
    if b == c:
        return "equal"
    else:
        return "not equal"

int array [] = {4, 2, 9, 5, 1, 3};
int n = sizeof(array)/sizeof(array[0]);
 
//sort the array
std::sort(array, array+n);
 
//print the sorted array
for (int i=0; i<n; i++)
   cout << array[i] << " ";
Sort an array of integers in C++.
[4, 2, 9, 5, 1, 3]

CREATE TABLE User (
   user_id INT NOT NULL,
   username VARCHAR(50) NOT NULL,
   password VARCHAR (50) NOT NULL,
   PRIMARY KEY(user_id)
);
Create a database table in SQL.
Table Name: User
Columns: user_id, username, password

My name is John and I am 34 years old.
What is the output of this Java program?
public class Main {
    public static void main(String [] args) {
        String name = "John";
        int age = 34;
        System.out.println("My name is " + name + " and I am " + age + " years old.");
    }
}

/fox/g
Write a regular expression to find all occurrences of a pattern in a string.
String: "The quick brown fox jumps over the lazy dog"
Pattern: "fox"

std::string str = "123456";
bool result = std::all_of(str.begin(), str.end(), ::isdigit);
How would you check if a string contains only digits in C++?


def get_freq_list(s): 
      
    # dictionaries are efficient for such a task 
    freq_list = {} 
  
    for char in s: 
        if char in freq_list.keys(): 
            freq_list[char] += 1
        else: 
            freq_list[char] = 1
  
    return freq_list 
  
def create_huffman_tree(freq_list): 
  
    # create a priority queue 
    # to pop two minimum element each time 
    priority_queue = [] 
    for key in freq_list.keys(): 
        node = Node(key, freq_list[key]) 
        heapq.heappush(priority_queue, node) 
  
    while len(priority_queue) > 1: 
        left_node = heapq.heappop(priority_queue) 
        right_node = heapq.heappop(priority_queue) 
  
        new_node = Node(None, 
              left_node.freq + right_node.freq, 
              left_node, 
              right_node) 
        heapq.heappush(priority_queue, new_node) 
  
    huffman_tree = heapq.heappop(priority_queue) 
    return huffman_tree 
    
def compress_string(huffman_tree, symbols): 
  
    # create a character-code dict
    code_dict = {} 
    _generate_codes(huffman_tree, '', code_dict) 
  
    # encode the string 
    encoded_str = '' 
    for char in symbols: 
        encoded_str += code_dict[char] 
  
    return encoded_str
Compress a string using Huffman coding in Python.
String: "aaabbcc"

int LCS(string X, string Y, int m, int n)
{
    int L[m + 1][n + 1];
    int i, j;

    for (i = 0; i <= m; i++)
    {
        for (j = 0; j <= n; j++)
        {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (X[i - 1] == Y[j - 1])
                L[i][j] = L[i - 1][j - 1] + 1;
            else
                L[i][j] = max(L[i - 1][j], L[i][j - 1]);
        }
    }

    return L[m][n];
}
Find the longest common subsequence for two strings in C++.
String 1: "abcdef"
String 2: "abdee"

<head>
    <title>This is a title</title>
    <meta name="description" content="">
</head>
Edit this HTML code to add a meta tag.
<head>
    <title>This is a title</title>
</head>

#include <iostream>

int main() {
 std::cout << "Hello, World!" << std::endl;
 std::cout << "This is a C++ program." << std::endl;
 return 0;
}
Suggest a way to improve the C++ program.
#include <iostream>

int main() {
 std::cout << "Hello, World!" << std::endl;
 return 0;
}

int itemAtIndex3 = arr[3];
// itemAtIndex3 is equal to 19
Can you retrieve the item at index 3 from the following array?
int[] arr = {11, 30, 45, 19, 20, 60};

public bool ContainsSubstring(string text, string substring) {
    return text.Contains(substring);
}
Write a C# method to check if a string contains a specific substring.


One approach is to use a loop to iterate over and add the second number (multiplicand) to the first number (multiplier) the number of times specified by the multiplicand. This would result in the product of the two integers. For example, to calculate 3 × 4, we would start with 0, add 4 three times (resulting in 12), and the final result is 12.

// pseudocode
function multiply(int a, int b) 
{
  if (b == 0) {
    return 0;
  }
  int result = 0;
  for (int i = 0; i < b; i++) {
    result += a;
  }
  return result;
}
Suggest an algorithm to calculate the multiplication of two integers without using the operator '*'.


<html>
    <head>
        <title>Red Box</title>
    </head>
    <body>
        <div style="width: 200px;height: 200px;background-color: red;"></div>
    </body>
</html>
Write an HTML page that displays a red box.


The Python library 'json' can be used for working with JSON data.
What python library can be used for working with JSON data?


A common approach to add items to an array in JavaScript is to use the Array.push() method. This method adds the item to the end of the array. 

For example: 
let arr = [1, 2, 3];
arr.push(4); // [1, 2, 3, 4]
Suggest an approach to add items to an array in JavaScript.


let arr = [4, 5, 2, 1, 8];
arr.sort((a, b) => b - a); // [8, 5, 4, 2, 1]
Write a JavaScript code to sort an array of numbers in descending order.


SELECT first_name, last_name
FROM employees
WHERE salary > 50000;
Write a SQL query to select the first name and last name of all employees whose salary is greater than $50,000.


This function takes an array as input and then iterates through it. It keeps track of the maximum number and its index. At the end, it returns the index at which the maximum number is located.
Explain what the following function in Python does.
def print_max_element_idx(arr):
    max_num = arr[0]
    max_idx = 0
    i = 1
    while i < len(arr):
        if arr[i] > max_num:
            max_idx = i
            max_num = arr[i]
        i += 1
    return max_idx

def most_frequent_element(arr):
    count = 0
    for i in arr:
        current_count = arr.count(i)
        if current_count > count:
            count = current_count
            most_frequent_element = i
    return most_frequent_element

arr = [3, 5, 1, 2, 4, 5, 5, 4, 2]
print(most_frequent_element(arr)) # 5
Develop a Python program to find the most frequent element in an array.
[3, 5, 1, 2, 4, 5, 5, 4, 2]

SELECT * 
FROM Employees 
WHERE Department = 'Sales';
Develop a SQL query to display the employees who work in the Sales department.


You can use the built-in method "remove" to delete an item from a python list. 

For example:

my_list = [1, 2, 3, 4, 5]
my_list.remove(4) # Remove item 4 from the list

The list will now be: [1, 2, 3, 5]
Suggest a way to delete an item from a python list.


# Generate a list with numbers in range 3 to 12 
my_list = list(range(3, 13)) 
print(my_list) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Develop a Python program to generate a list with numbers in range 3 to 12.


<!DOCTYPE html>
<html>
<head>
  <title>Input Form</title>
</head>
<body>
  <form>
    <input type="text" />
    <input type="submit" value="Submit" />
  </form>
</body>
</html>
Create an HTML page containing a text field and a button.


The JSON.stringify() method can be used to convert a JSON object to a string in JavaScript. It takes two parameters: the object to be stringified and an optional replacer to modify the values before they are stringified. The result is a JSON-formatted string.

Example: 
const object = {'name': 'John', 'age': 25};
const string = JSON.stringify(object); 
console.log(string);  // '{"name": "John", "age": 25}'
Suggest a way to convert a JSON object to a string in JavaScript.


class Test 
{ 
  public static void main(String[] args) 
  { 
    String str = "Hello World"; 
    for (int i = 0; i < str.length(); i++) { 
        System.out.print(str.charAt(i)); 
    } 
  } 
}
Write a Java program to read and print out the characters of a given string one by one.
Hello World

#include <stdio.h>

// Function to calculate the average of three numbers 
int average(int num1, int num2, int num3) 
{ 
    return (num1 + num2 + num3) / 3; 
} 

int main() 
{ 
    int num1, num2, num3; 
    printf("Enter three numbers: ");
    scanf("%d %d %d",&num1, &num2, &num3); 

    printf("Average of the three numbers is %d", average(num1, num2, num3)); 
    return 0; 
}
Develop a C program to calculate the average of three numbers and display the result to the user.


def count_chars(string):
    if len(string) == 0:
        return 0
    return 1 + count_chars(string[1:])
Code a recursive solution for counting the number of characters in a given string.
example

"""
A web scraper that can collect data from the same web page
"""
import requests
from bs4 import BeautifulSoup

def get_data(url):
    response = requests.get(url)
    parser = BeautifulSoup(response.text, 'html.parser')
    movies = parser.find_all('div', {'class': 'movie-card'})
    data = []
    for movie in movies:
        title = movie.find('h3').get_text()
        year = movie.find('div', {'class': 'movie-year'}).get_text()
        rating = movie.find('div', {'class': 'movie-rating'}).get_text()
        data.append({
            'title': title,
            'year': year,
            'rating': rating
        })
    return data

if __name__ == "__main__":
    data = get_data('https://example.com/movies')
    print(data)
Create a web scraper that can collect data from the same web page.
https://example.com/movies

def filter_list(lst):
    return [elem for elem in lst if not elem.startswith('S')]

if __name__ == "__main__":
        print(filter_list(['Swallow', 'Duck', 'Finch', 'Parrot']))
Write a function to filter a given list such that all any string starting with an 'S' is removed from the list.
['Swallow', 'Duck', 'Finch', 'Parrot']

def sum_even(num):
    total = 0 
    for i in range(1, num+1):
        if i % 2 == 0:
            total += i
    return total

if __name__ == "__main__":
    print(sum_even(50))
Compute the sum of all even numbers between 1 and 50.


def is_valid_bst(arr):
    if len(arr) == 0:
        return True
    if len(arr) == 1:
        return True

    root_val = arr[0]
    left_subtree = [i for i in arr if i < root_val]
    right_subtree = [i for i in arr if i > root_val]

    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:
        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))
    else:
        return False

if __name__ == "__main__":
    print(is_valid_bst([9, 7, 3, 15, 20]))
Write an algorithm that takes in an array and determines if it is a valid BST.
[9, 7, 3, 15, 20]

def get_permutations(string):
    if len(string) == 0:
        return []
    if len(string) == 1:
        return [string]
 
    permutations = []
    for i, char in enumerate(string):
        for permutation in get_permutations(string[:i] + string[i+1:]):
            permutations.append(char + permutation)
 
    return permutations

if __name__ == "__main__":
    print(get_permutations("ABC"))
Write a code to generate a list of all possible permutations of a given string.
"ABC"

def reverse_array(arr):
    left_index = 0
    right_index = len(arr) - 1

    while left_index < right_index:
        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]
        left_index += 1
        right_index -= 1
    return arr

if __name__ == "__main__":
    print(reverse_array([1, 3, 4, 6, 8]))
Code an algorithm to reverse an array of integers.
[1, 3, 4, 6, 8]

let data = {
 id: 1234,
 num_sessions: 5
};
let object = JSON.parse(JSON.stringify(data));
Show how to convert the JSON object below to a JavaScript object
{
    "id": 1234,
    "num_sessions": 5
}

The code snippet is a basic example of a while loop in python. The code will loop through the code that is enclosed in the block and execute it for i (initialized to 0) values between 0 and n-1. In this case, the code will print "Hello World!" n times.
Describe the function of the following code
while i < n:
    print('Hello World!')

def remove_vowels(string):
    vowels = ["a", "e", "i", "o", "u"]
    new_string = ""
    for letter in string:
        if letter.lower() not in vowels:
            new_string += letter
    return new_string
Write a function that takes as input a string and returns a new string with all the vowels removed.


<table>
	<thead> 
		<tr>
			<th>Name</th>
			<th>Age</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>John</td>
			<td>26</td>
		</tr>
		<tr>
			<td>Sarah</td>
			<td>30</td>
		</tr>
		<tr>
			<td>Joe</td>
			<td>27</td>
		</tr>
	</tbody>
</table>
Output the following JSON object as a valid HTML table
[
	{
		"name": "John",
		"age": 26
	},
	{
		"name": "Sarah",
		"age": 30
	},
	{
		"name": "Joe",
		"age": 27
	}
]

#container { 
  width: 500px;
  height: 300px;
  background-color: #FFFFFF;
}
Can you generate CSS for a div with an id of "container" that has a width of 500px, a height of 300px, and a white background?


SELECT name, age FROM people;
Create a SQL query that returns the name and age of each person in a table called "people".


The syntax for creating a new object in JavaScript is:  const objectName = new Object();
What is the JavaScript syntax for creating a new object?


def findArea(base, height):
    return 0.5 * base * height;
Write a function to find the area of a triangle using the formula `A = 0.5 * base * height`.


def calcSurfAreaSphere(radius):
    pi = 3.14159
    return 4 * pi * radius * radius;
Write a function to calculate the surface area of a sphere using the formula `4 * pi * r^2`.


let x = 8 * 8;
Replace the placeholder with a valid JavaScript expression
let x = <placeholder>;

data = [{'age': 30, 'income': 1000, 'address': 'New York'}, {'age': None, 'income': 2000, 'address': 'California'}]
Clean the input data using Python, so it is valid for a machine learning model.
data = [{'age': '30', 'income': '$1,000', 'address': 'New York'}, {'age': 'ab*', 'income': '$2,000', 'address': 'California'}]

my_string.lower() # Output: "hello world"
Convert a string to lowercase, using Python.
my_string = "Hello World"

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>Welcome</title>
</head>
<body>
 <h1>Welcome</h1>

</body>
</html>
Create a basic HTML structure including an h1 titled "Welcome".


needle in haystack # Output: True
Check if a string contains a substring, using Python.
haystack = "The quick brown fox"
needle = "brown"

p {
    font-style: italic;
}
Write a CSS rule to make the text in a paragraph appear italicized.


// Pseudo code for simple sorting

// Define a sorting function 
function Sort(inputList):  
 
// Loop through the list 
  for i from 0 to length(inputList) - 1 do:
  
    currentMinIndex = i 
   
    // Search the lowest element 
    for j from i + 1 to length(inputList) do:
      
      // Update the smallest element 
      if inputList[j]<inputList[currentMinIndex] then 
        currentMinIndex = j
    
    // Swap the smallest element 
    if currentMinIndex != i do: 
      Swap(inputList[currentMinIndex],inputList[i]) 
 
// Return the sorted list 
  return inputList
Write a pseudo-code to implement a simple sorting algorithm.


Negative
Classify this text as either positive or negative
I'm not sure if I'll ever be able to turn this situation around.

This is a simple Python function that takes two parameters, x and y, and returns the sum of them. The function can be called by passing the two inputs, and it will add them both, then return the result to the caller.
Read this piece of code and describe it in brief.
def add(x, y):
  return x + y

let data = {
    "item1": "apple",
    "item2": "banana",
    "item3": "cherry",
    "item4": "durian",
    "food1": "bacon"
};

// check each key for the preffix "item"
for (let key in data) {
  if (key.startsWith('item')) {
    // if key starts with "item", delete that item from the object
    delete data[key];
  } 
}

// output object
console.log(data);
Can you write a code to delete all the items whose key starts with "item"?
{
    "item1": "apple",
    "item2": "banana",
    "item3": "cherry",
    "item4": "durian",
    "food1": "bacon"
}

let num = 24;

if (num % 2 == 0) {
  console.log(num + " is an even number");
} else {
  console.log(num + " is an odd number");
}
Write a code to output whether a given number is even or odd
24

let data = {
    "item1": 10,
    "item2": 7,
    "item3": 3,
    "item4": 4,
    "food1": 2
};

// check each value
for (let key in data) {
  if (data[key] < 5) {
    // if value is lower than 5, delete that item from the object
    delete data[key];
  } 
}

// output object
console.log(data);
Write a code to delete all the items whose value is lower than 5
{
    "item1": 10,
    "item2": 7,
    "item3": 3,
    "item4": 4,
    "food1": 2
}

<?php
    $number = 24;

    // convert the number to its binary form
    $binary_num = decbin($number);

    // output the result
    echo "Binary representation of ".$number." is ".$binary_num;
?>
Write a PHP script to convert a number in binary format
24

public static boolean isSubstring(String str1, String str2) 
{
    if (str1.indexOf(str2) >= 0)
        return true;
    else
        return false;
}
Write a method that takes 2 strings and determines if the first string contains the second string as a substring.
String 1: bus ride
String 2: ride

var array = [];
for (var i = 0; i < n; i++) {
  array.push(null);
}
Write a code snippet to create a new JavaScript array of n length.


function isPrime(n)
{
    // alleven numbers are not prime
    if (n % 2 == 0) return false;

    // check odd divisors b/w 3 and sqrt(n)
    let limit = Math.sqrt(n);
    for (let i = 3; i <= limit; i=i+2)
    {
        // if evenly divisible then not prime
        if (n % i == 0) return false;
    }
	
    return true;
}
Given a number N, write a function to check if N is prime.
Number: 11

Using the Array.prototype.includes() method:

function checkIfArrayContainsValue(arr, value) {
  if(arr.includes(value)) {
    return true;
  }
  return false;
}
How would you check if an array contains a specific value in JavaScript?


<form action="action_page.php">
  <label for="name">Name:</label><br>
  <input type="text" id="name" name="Name" required><br>
  <label for="email">Email:</label><br>
  <input type="email" id="email" name="Email" required><br>
  <label for="phone">Phone:</label><br>
  <input type="number" name="phone" pattern="[0-9]{3}[0-9]{3}[0-9]{4}" required><br><br>
  <input type="submit" value="Submit">
</form>
Develop a html form that gets user's name, email, and a valid phone number.


class MyClass: 
  def __init__(self, member1, member2, member3): 
    self.member1 = member1
    self.member2 = member2
    self.member3 = member3
Design a class with 3 data members in Python.


// Select all elements with class name "button"
const buttons = document.querySelectorAll(".button");
// Loop through the element list
for (let i = 0; i < buttons.length; i++) {
  const button = buttons[i];
  // Do something with the elements
  // ...
}
Write a code snippet to select all HTML elements with the class name "button" from an HTML document.


function isUpperCase(ch) {
  if (ch.charCodeAt(0) >= 65 && ch.charCodeAt(0) <= 90) {
    return true;
  }
  return false;
}
Implement a function that takes a character and returns true if the character is an uppercase letter.


<input type="radio" name="selection" value="option1"> Option 1
<input type="radio" name="selection" value="option2"> Option 2
Create an HTML radio button that allows users to select between two options.


function isAnagram(str1, str2) { 
  // Compare the length of the two string
  if (str1.length !== str2.length) { 
    return false; 
  } 
 
  // Convert both strings to lowercase
  str1 = str1.toLowerCase(); 
  str2 = str2.toLowerCase(); 
 
  // Store the frequency of characters
  // in the first string
  const frequencyCounter1 = {}; 
  for (let char of str1) { 
    frequencyCounter1[char] = (frequencyCounter1[char] || 0) + 1; 
  } 
 
  // Store the frequency of characters
  // in the second string
  const frequencyCounter2 = {}; 
  for (let char of str2) { 
    frequencyCounter2[char] = (frequencyCounter2[char] || 0) + 1; 
  }
 
  // Compare the frequency of characters 
  for (let key in frequencyCounter1) { 
    if (!(key in frequencyCounter2)) { 
      return false; 
    } 
   
    if (frequencyCounter2[key] !== frequencyCounter1[key]) { 
      return false; 
    } 
  }  
  return true; 
}
How would you check if two strings are anagrams in JavaScript?


// initialise slow and fast pointers 
let slow = head;
let fast = head;

while (fast !== null && fast.next !== null) {  
  fast = fast.next.next;  
  if(slow === fast) { 
    break;
  }  
  slow = slow.next;  
} 

// check if there is a cycle  
if (slow === null || fast === null || fast.next === null) { 
  return;
}  
// initialize slow pointer to head  
slow = head;  
while (slow !== fast) {  
  slow = slow.next;  
  fast = fast.next;  
} 

// assign the cycle end  
fast.next = slow;
Resolve the given linked list into a cycle using the Floyd's Cycle algorithm.


The highest peak in the world is Mount Everest, which has a summit elevation of 8,848 meters (29,029 feet).
What is the highest peak in the world?


numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Create a Python list of 10 numbers from 0 to 9.


SELECT * FROM Customers WHERE age > 50;
Write a SQL query to find all the customers who are over 50 years of age.


def reverse_string(s): 
    str = "" 
    for i in s: 
        str = i + str
    return str
Reverse a string without using the reverse() function.


public class RandomNumber {
    public static void main(String[] args) {
        // Generate a random number between 25 and 75
        int max = 75;
        int min = 25;
        int range = max - min + 1;

        int randomNumber = (int) (Math.random() * range) + min;

        System.out.println(randomNumber);
     }
 }
Write a Java program to generate a random number between 25 and 75.


// This code segment sets the value of the variable x to 5, 
// and then decrements it until it becomes 0.
int x = 5;
while (x > 0) { // loop runs until x is 0
     x--;       // decrement x
}
Add comments to this C++ code segment to explain what it does:
int x = 5;
while x > 0
x--;

function removeSpaces(str) { 
  return str.replace(/ /g,""); 
}
Create a JavaScript function to remove all spaces from a string.


The maximum number of threads that can simultaneously run in a single process is limited by the resources of the system, such as the amount of available memory and the scheduling algorithm employed. Generally, a typical modern system will allow up to hundreds or even thousands of threads to run concurrently.
What is the maximum number of threads simultaneously running in a single process?


<form action="login.php" method="post">
    <label for="username">Username:</label><br>
    <input type="text" name="username" id="username"><br>
    <label for="password">Password:</label><br>
    <input type="password" name="password" id="password"><br>
    <input type="submit" value="Submit">
</form>
Generate a valid HTML form for a login page.
Username:
Password:

<table> 
  <tr> 
    <th>Column 1</th>
    <th>Column 2</th>
    <th>Column 3</th> 
  </tr>
  <tr> 
    <td>Row 1, Column 1</td>
    <td>Row 1, Column 2</td>
    <td>Row 1, Column 3</td> 
  </tr>
  <tr> 
    <td>Row 2, Column 1</td>
    <td>Row 2, Column 2</td>
    <td>Row 2, Column 3</td> 
  </tr>
  <tr> 
    <td>Row 3, Column 1</td>
    <td>Row 3, Column 2</td>
    <td>Row 3, Column 3</td> 
  </tr>
  <tr> 
    <td>Row 4, Column 1</td>
    <td>Row 4, Column 2</td>
    <td>Row 4, Column 3</td> 
  </tr>
  <tr> 
    <td>Row 5, Column 1</td>
    <td>Row 5, Column 2</td>
    <td>Row 5, Column 3</td> 
  </tr>
</table>
Use CSS to create a table with 3 columns and 5 rows.


^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$
Create a regular expression to validate an e-mail address.


<html>
  <head>
    <title>Email Validation Form</title>
  </head>
  <body>
    <h1>Email Validation Form</h1>
    <form action="/" method="POST">
      <input type="text" name="email" placeholder="Enter your email address">
      <button type="submit">Submit</button>
    </form>
    <script>
      let inputField = document.querySelector('input');

      inputField.addEventListener('input', function() {
        let emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
        let isEmailValid = inputField.value.match(emailRegex);
        inputField.style.borderColor = (isEmailValid) ? "green" : "red";
      });
    </script>
  </body>
</html>
Create an HTML page with a form that validates a user's email address.


require 'openssl'
require 'base64'

def aes_encrypt(data, key)
  aes = OpenSSL::Cipher::AES.new(256, :ECB)
  aes.encrypt
  aes.key = key

  encrypted_data = aes.update(data) + aes.final
  Base64.encode64(encrypted_data).gsub("\n", '')
end

puts aes_encrypt("Hello, I'm a secret message to be encrypted!", '1234567890123456')
Create a program in Ruby that encrypts the given data using AES-256 encryption algorithm.
"Hello, I'm a secret message to be encrypted!"

public static long fibonacci(int n) 
    { 
        if (n <= 1) 
            return n; 
        return fibonacci(n-1) + fibonacci(n-2); 
    }
In Java, write a function for calculating the Fibonacci number for a given input n.


CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(50),
  name VARCHAR(50),
  avatar BLOB
);
Design a database schema for storing user information such as their email, name and avatar.


def word_count(s):
  return len(s.split())
Code a method in Python that determines the number of words in a given string.


class DBConnectionError(Exception):
  def __init__(self, message):
    self.message = message
    
  def __str__(self):
    return 'An Error Occured:\n\t' + self.message
Describe in Python a custom exception for handling database connection errors.


def selection_sort(list): 

    for i in range(len(list)): 
  
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j
        list[i], list[min_idx] = list[min_idx], list[i]

list = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]
selection_sort(list) 
print ("Sorted array:", list)
Sort a list of integers in ascending order using selection sort.
[ 9, 5, 2, 0, 7, 4, 1, 8, 6, 3]

public class NumberValidation {

    public boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch(NumberFormatException e){
            return false;
        }
    }
}
Create a program in Java that validates an input string for containing only numbers.


int sumArrayElements(int arr[], int n) { 
    int sum = 0; 
    for (int i = 0; i < n; i++) 
        sum += arr[i]; 
  
    return sum; 
}
Write C++ code to calculate the sum of the elements in an array.


const generateURL = (tableName) => {
  return `https://website.com/api/v1/table/${tableName}`;
}

const url = generateURL('users');
// Output: https://website.com/api/v1/table/users
Generate a URL in JavaScript for an API endpoint to fetch data from a given database table.
Table Name: users

<!DOCTYPE html>
<html>
  <head>
    <title>Loading Icon</title>
  </head>
  <body>
  <div id="loading-icon">
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
  </div>
  <style type="text/css">
    #loading-icon {
      margin: auto;
      text-align: center;
      width: 120px;
    }

    #loading-icon span {
      background-color: #E3EEF6;
      border-radius: 50%;
      display: inline-block;
      height: 10px;
      margin-right: 10px;
      width: 10px;
      animation: loader 2s ease-in infinite;
    }

    #loading-icon span:nth-child(1) {
      animation-delay: 0s;
    }

    #loading-icon span:nth-child(2) {
      animation-delay: 0.3s;
    }

    #loading-icon span:nth-child(3) {
      animation-delay: 0.6s;
    }

    #loading-icon span:nth-child(4) {
      animation-delay: 0.9s;
    }

    #loading-icon span:nth-child(5) {
      animation-delay: 1.2s;
    }

    @keyframes loader {
      25% { transform: scale(1.3); }
      50% { transform: scale(1.1); }
      75% { transform: scale(1.3); }
    }
  </style>
  </body>
</html>
Create a HTML page that containsthe loading icon for a web page request.


function invertBinaryTree(tree) {
  if (!tree) {
    return;
  }
  let temp = tree.left;
  tree.left = tree.right;
  tree.right = temp;

  invertBinaryTree(tree.left);
  invertBinaryTree(tree.right);
}
Implement a function in JavaScript that flips a given binary tree.


function alertMe(message) {
  alert(message);
}
Create a function in JavaScript that displays an alert with a given message.


SELECT salary 
FROM employee 
ORDER BY salary DESC 
LIMIT 2,1;
Write an SQL query to find the third highest salary in a table.


import java.util.Scanner;

public class Program {    
    public static void main(String[] args) {      
        Scanner scanner = new Scanner(System.in);
        int num1 = 0;
        int num2 = 0;
        int result = 0;
       
        System.out.print("Enter two numbers separated by a space: ");
        num1 = scanner.nextInt();
        num2 = scanner.nextInt();
       
        result = num1 + num2;
       
        System.out.println("The sum of " + num1 + " and "
         + num2 + " is " + result);
    }
}
Translate the following C++ program into Java.
#include <iostream>
 
int main() {
  int num1 = 0;
  int num2 = 0;
  int result = 0;
 
  std::cout << "Enter two numbers separated by a space: ";
  std::cin >> num1 >> num2;
 
  result = num1 + num2;
 
  std::cout << "The sum of " << num1 << " and " << num2 
            << " is " << result;
 
  return 0;
}

<html>
<head>
    <title>My Form</title>
</head>
<body>
    <form>
        <label for="name">Name</label>
        <input type="text" id="name">
        <label for="address">Address</label>
        <input type="text" id="address">
    </form>
</body>
</html>
Edit the following HTML code to include a new form field.
<html>
<head>
    <title>My Form</title>
</head>
<body>
    <form>
        <label for="name">Name</label>
        <input type="text" id="name">
    </form>
</body>
</html>

[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
Generate a list containing the squares of numbers from 0 to 10.


import random

random_numbers = random.sample(range(0, 101), 10)
print(random_numbers)
Write a Python script to generate a randomized list of 10 integers.


API stands for Application Programming Interface. It is a set of routines, protocols, and tools for building software applications. APIs specify how software components should interact and are used when programming graphical user interface (GUI) components. APIs are used for accessing web-based services, such as entering and retrieving data from a remote database.
What is an API?


function max(num1, num2) {
  return (num1 > num2) ? num1 : num2;
}
Write a function to compute the maximum of two given numbers in JavaScript.


SELECT COUNT(*) FROM users;
Create a SQL query to count the number of rows in a table called 'users'.


Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics.
What is Machine Learning?


const myObject = {
    name: 'John',
    age: 25
};
Generate a JavaScript object with two properties.


#myDiv {
    background-color: #00F;
}
Write CSS code to change the background color of a div element.


A for loop is a type of loop used in programming languages to execute a set of instruction multiple times. It consists of an initialization statement, condition expression, and a loop body. The code block of the loop is executed until the condition expression evaluates to false. The initialization statement is processed once, while the condition expression is evaluated each time before the loop body is executed. If the condition expression is true, the loop is executed; otherwise, the loop is terminated.
How does a for loop work?


studentName = "John"
Create a variable in Python with the name “studentName” and assign it your name as a string.


list
Extract the type of the following object in Python.
a = [1, 2, 3]

integer
Identify the datatype of the following object.
124

def count_occurrence(arr, x): 
  
    count = 0
  
    # traverse in the list 
    for ele in arr: 
  
        # compare with each element of the list 
        if (ele == x): 
            count = count + 1
  
    return count 
  
# Driver Code 
arr = [1, 2, 3, 2, 4]  
x = 2
print("Occurrence of the number is: ", count_occurrence(arr, x))
Write a function to count the occurence of an item in a given list.
[1, 2, 3, 2, 4]

A class is a blueprint for an object. It defines the data type of a particular object including the kinds of data it can store and the operations it can perform. An object is an instance of a class with actual values for the data elements it contains. It also has behavior, which is associated with the class functions that operates on the data elements of the object. Therefore, a class is a template used to create objects that share the same characteristics.
Describe the difference between a class and object in object oriented programming.


for i in range(1, 11):
    print(i)
Write a Python program to print all integer numbers from a given range.
from 1 to 10

x = 'string'
Convert the following statement into valid Python syntax.
x = "string"

def sort_numbers_ascending(numbers): 
    # Sort the list 
    numbers.sort() 
    return numbers
  
# Driver code 
nums = [3, 7, 1, 5, 4] 

print(sort_numbers_ascending(nums))
Write a Python script to sort a given list of numbers in ascending order.
[3, 7, 1, 5, 4]

def print_message(message, name):
    print(f"{message}, {name}!")
Modify the following code so that it can accept two parameters.
def print_message():
    print("Hello there!")

from bs4 import BeautifulSoup

html_string = "<div class="header">Hello!</div>"
soup = BeautifulSoup(html_string)

header_tag = soup.find('div', {'class': 'header'})

if header_tag is not None:
    print(header_tag.text)
Parse the following HTML string and extract the text of the given tag.
<div class="header">Hello!</div>

data = {
    "Name": "John",
    "Age": 25,
    "City": "New York"
}
Create a Python dictionary with the following elements
Name: John
Age: 25
City: New York

SELECT *
 FROM people
 WHERE last_name LIKE 'Smith%';
Write a SQL query to find all records from the "people" table that have a last name that begins with "Smith".


2
Count the occurrences of the word "love" in the given text.
I love you so much, my love!

#include <iostream> 
using namespace std; 
  
int main() 
{ 
    int i, sum = 0; 
      
    //Computes the sum 
    for (i = 1; i <= 100; i++) 
    { 
        sum += i; 
    } 
      
    cout << "Sum of first 100 natural numbers = "
         << sum << endl; 
  
    return 0; 
}
Write a C++ program to print out the sum of the first 100 integers.


28
Calculate the dot product of two vectors.
[1, 2, 3], [2, 4, 6]

<?php
function validateEmail($email) {
    // regex for validating email addresses
    return filter_var($email, FILTER_VALIDATE_EMAIL); 
}
Write a PHP code snippet to validate an email address.


4
6
8
10
Generate the output for the following code.
var array = [2,4,6,8];
for(i=0;i<array.length;i++){
console.log(array[i] + 2);
}

def sum_list(some_list):
    result = 0
    for num in some_list:
        result += num
    return result

print(sum_list(some_list)) # Prints 15.3
Write a Python function that takes a list of floats as an argument and returns the sum of all elements.
some_list = [1.5, 5.9, 3.7, 5.2]

* {
  font-size: 12px;
}
Write a CSS code snippet to set the font size for all elements to 12px.


<?php
$num1 = 12;
$num2 = 8;
$sum = $num1 + $num2;
echo "The sum of $num1 and $num2 is: ".$sum;
?>
Create a PHP script to get the sum of two numbers.
num1 = 12
num2 = 8

let studentObj = {
  name: "John Doe",
  age: 18
}
Create an object in JavaScript to store a student's information.
name = "John Doe"
age = 18

average_num <- function(list_num){
  mean(list_num)
}

# call the function 
average_num(list_num) # Prints 6
Using R, calculate the average of a list of numbers given as an argument.
list_num = c(4, 5, 9, 10, 2)

(number % 2 === 0) ? true : false
Write an expression in JavaScript to check if a number is divisible by 2 or not.
number = 12

SELECT AVG(salary) FROM employee WHERE job_type="manager";
Write a SQL query to get the average salary from the 'employee' table where the job type is 'manager'.


some_list.pop() # pops 3
Write a code snippet using Python to pop an element from a list.
some_list = [1, 2, 3]

#!/bin/bash

nums=(6 15 4 1 22)
largest=${nums[0]}
 
for i in ${nums[@]}
do
    if [ $i -gt $largest ] 
    then 
        largest=$i 
    fi
done
 
echo "Largest number in list is: $largest"
Write a Bash script to find the largest number in a list of numbers.
nums = [6, 15, 4, 1, 22]

#include <stdio.h> 
 
int array[] = {2, 7, 3, 8, 11};
int array_size = (sizeof(array)/sizeof(array[0]));
 
printf("Number of elements in array: %d\n", array_size);
Write a code snippet in C to find the number of elements in an array.
array[] = {2, 7, 3, 8, 11}

function celsiusToFahrenheit(celsius) {
  let temperatureInFahrenheit = celsius * (9 / 5) + 32;
  return temperatureInFahrenheit;
}
Write a JavaScript program to convert a Celsius temperature to Fahrenheit.


def find_max_min_avg(numbers):
    max_val = max(numbers)
    min_val = min(numbers)
    avg_val = sum(numbers) / len(numbers)

    return max_val, min_val, avg_val
Given an array of numbers, write a function to find the maximum, minimum and average values.
numbers = [1, 15, 4, 5, 28, 35, 25]

SELECT AVG(salary)
FROM employee;
Write an SQL query to find the average salary from the "employee" table.


The best data structure to store a dictionary is a hash table. A hash table is an efficient data structure that uses key-value pairs to store data. It provides fast insertion, deletion and search operations, allowing it to be used to search for a specific key in a dictionary quickly and easily.
What is the best data structure to store a dictionary?


<?php
// create a new file
$log_file = fopen("log.txt", "a") or die("Unable to open file!");

// write the data to the log file
$data = time() . " : User activity logged \n";
fwrite($log_file, $data);

// close the log file
fclose($log_file);
?>
Create a PHP script to log user activity.


def anagram_checker(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        char_list1 = [0] * 26
        for char in str1:
            char_list1[ord(char)-97] += 1
        for char in str2:
            if char_list1[ord(char)-97] == 0:
                return False
            char_list1[ord(char)-97] -= 1
        return True
Implement a function that takes two strings and checks whether they are anagrams.
str1 = "cinema"
str2 = "iceman"

def group_students_by_major(student_list):
    # create a dictionary with two empty lists 
    student_groups = {"Computer Science": [], "Business Administration": []}
    # iterate through the student list
    for student in student_list:
        # for each student in the list, add their name to the respective list
        student_groups[student["major"]].append(student["name"])
    # return the dictionary of groups
    return student_groups
Given a list of student class enrollments, group students into classes that correspond with their major.
student_list = [{"name":"John", "major":"Computer Science"}, {"name":"Alice", "major":"Business Administration"},
 {"name":"Bob", "major":"Computer Science"}, {"name":"Claire", "major":"Business Administration"}]

def cal_gcd(n1, n2): 
   if n2 == 0: 
       return n1 
   else: 
       return cal_gcd(n2, n1 % n2) 
 
gcd = cal_gcd(n1, n2) 
print ("GCD of " + str(n1) + " and " + str(n2) + " is " + str(gcd))
Implement a function that calculates the greatest common divisor of two integers.
n1 = 15
n2 = 10

def print_multiplication_table(n):
    # iterate through 0 to 10
    for i in range(1, 11):
        print(str(n) + 'x' + str(i) + ' = ' + str(n*i))

print_multiplication_table(n)
Implement a function that takes a number and returns its multiplication table up to 10.
n = 5

def search(lst, item):
    for index, element in enumerate(lst):
        if element == item:
            return index
    return -1

search(lst, item)
Implement a function that finds the index of an item in a list.
lst = [1,2,3,4]
item = 3

def reverse(lst):
    return lst[::-1]

reverse(lst)
Implement a function that takes a list and reverses its order
lst = [1,2,3,4]

public class Circle { 
    private double radius; 
    private String color; 
  
    public Circle(double r, String c) 
    { 
        this.radius = r; 
        this.color = c; 
    } 
  
    public double getRadius() 
    { 
        return this.radius; 
    } 
  
    public String getColor() 
    { 
        return this.color; 
    } 
  
    public double getArea() 
    { 
        return Math.PI * this.radius * this.radius; 
    } 
}
Create a class in Java to represent a circle with two fields for its radius and color.


function sortStrings(arr) {
  return arr.sort((a, b) => a.localeCompare(b));
}
Define a JavaScript function to sort an array of strings in alphabetical order.
["Tony", "Steve", "Peter", "Bruce"]

<table> 
    <tr> 
        <th>Country</th> 
        <th>Population</th> 
    </tr> 
    <tr> 
        <td>United States</td> 
        <td>328.2 million</td> 
    </tr> 
    <tr> 
        <td>China</td> 
        <td>1.44 billion</td> 
    </tr> 
    <tr> 
        <td>India</td> 
        <td>1.39 billion</td> 
    </tr> 
    <tr> 
        <td>Indonesia</td> 
        <td>269.9 million</td> 
    </tr> 
</table>
Using HTML, create a simple table showing a list of countries and their population.


box-shadow: 10px 10px 20px 10px #000000;
Using CSS, create a basic box shadow effect.


def binToDecimal(num): 
    # Initializing base  
    # value to 1, i.e 2^0 
    base = 1; 
      
    dec_val = 0; 
      
    # Extracting digits of  
    # binary number from   
    # the right most side 
    # and keeping  
    # incrementing the base 
    # by multiply of 2 
    temp = num 
    while(temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
          
        dec_val += last_digit * base; 
        base = base * 2; 
      
    return dec_val
num = 11100011
print('Decimal Equivalent of',num,'is',binToDecimal(num))
Print the decimal equivalent of a given binary number.
11100011

.shape {
  width: 100px;
  height: 100px;
  background: red;

  /* Animation */
  animation: rotation 2s linear;
  animation-iteration-count: infinite;
}

/* Animation Code */
@keyframes rotation {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Specifying Hover to animate shape */
.shape:hover {
 animation-play-state: running; 
}
Create a CSS animation which will rotate a shape when the user hovers over it.


<form>
  <label>Email:
    <input type="email" name="email">
  </label>
  <label>Password:
    <input type="password" name="password">
  </label>
  <input type="submit" value="Submit">
</form>
Create an HTML form with two input fields for email and password.


{4: 2, 9: 3, 16: 4, 25: 5}
Program a function that takes a list of numbers as an argument, then returns a dictionary which contains the number in the list as a key and its square root as the value.
[4, 9, 16, 25]

var date = new Date();
var RFC2822currentDateTime = date.toUTCString();
console.log(RFC2822currentDateTime);
Write a script for displaying the current datetime in RFC2822 format.


hll wrld
Write a function that takes a string as an argument and removes all vowels (a, e, i, o, u) from it.
hello world

[ NP: I] [ VP: bought] [ NP: a car] [ AdvP: yesterday]
Classify the given sentence according to the Syntactic parse tree and label each part of the sentence.
I bought a car yesterday.

def temperature_converter(temperature):
    celsius = temperature
    kelvin = temperature + 273.15
    return kelvin
Debug the given code to output the correct result.
def temperature_converter(temperature):
    kelvin = temperature + 273.15
    return celsius

<html>
<body>
  <form action = "processText.php" method = "post">
    <textarea rows = "10" cols = "30" name = "modifiedText"></textarea><br>
    <input type = "submit" value = "Submit" />
  </form>
</body>
</html>
Create a web page with a form for user input of a modified text.


class Animal {
  constructor(name) {
    this.name = name;
    this.age = Date.now() - this.creationDate;
  }
}
Using an OOP approach, create an Animal class with properties of name and a virtual property age that gets calculated based on the creation date.


Hello_World
Program a function to convert a given string with no spaces to a string with underscores (_) in all spaces between words.
HelloWorld

sorted_array = [1, 2, 3, 4]

def SortArray(array):
    for i in range(len(array)):
        for j in range(len(array) - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
    return array

sorted_array = SortArray(array)
Implement a sorting algorithm for a given array in Python.
[3, 2, 1, 4]

def addThree(a, b, c):
    return a + b + c

sum = addThree(2, 3, 6)
Program a function to add three integers and return the sum.
2, 3 and 6

The complexity of the algorithm to reverse a given string is O(n).
What is the complexity of the algorithm to reverse a given string?


def calculateHypotenuse(a, b):
    return (a**2 + b**2)**0.5

hypotenuse = calculateHypotenuse(5, 6)
Create a program for calculating the hypotenuse of a right-angle triangle using its two sides.
a = 5, b = 6

The main features of a class-based programming language are encapsulation, inheritance, polymorphism and abstract classes. Encapsulation refers to the way code is organized and data is organized into objects and the methods used to access and manipulate the data. Inheritance is the ability for classes to inherit some of the properties of other classes. Polymorphism allows for objects of different types to act the same way in certain scenarios. Abstract classes provide an outline for other classes to follow, without having to directly use or implement all of the same functions as the parent class.
Name the main features of a class-based programming language.


string = "The quick brown fox jumped over the lazy dog"
substring = "brown"
new_string = string.replace(substring, "")
print(new_string)
# Output: The quick  fox jumped over the lazy dog
Generate a Python code to remove the given substring from the string.
String: "The quick brown fox jumped over the lazy dog"
Substring: "brown"

The sentiment of the text is negative.
Detect the sentiment of the given text.
The movie was a total disaster.

{
  "users": 
  [
    { 
      "name": "John"
    },
    { 
      "name": "Jane",
      "age": 25
    }
  ]
}
Edit the following JSON code to include the given data.
{
  "users": 
  [
    { 
      "name": "John"
    } 
  ]
}

New data to add:
name: "Jane",
age: 25

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ThreadPool {
  private ExecutorService executor;

  public ThreadPool(int size) {
    this.executor = Executors.newFixedThreadPool(size);
  }

  public void submit(Runnable task) {
    this.executor.execute(task);
  }

  public void shutdown() {
    this.executor.shutdown();
  }
}
Implement a thread pool in Java.


my_dictionary = {1: 'a', 2: 'b', 3: 'c'}
Construct a dictionary from the given list.
[(1, 'a'), (2, 'b'), (3, 'c')]

SELECT * FROM employees;
Construct a SQL query to fetch all data from the given table.
Table name: employees

To establish a connection between the web and database server, the web server needs to be configured to access the database server. This can be done using a variety of methods such as using a connection string, using an ODBC or JDBC driver, or using a web application framework. Once the connection is established, commands can be sent from the web server to the database server to fetch or store data.
Establish a connection between the web and database server.


name = dictionary['name'] 
age = dictionary['age']
Access the data present in the given dictionary.
dictionary = {
  'name': 'John',
  'age': 25
}

def sum_of_array(arr):
  total = 0
  for num in arr:
    total += num
  return total

# Output:
Create a function to calculate the sum of all the values in the given array.
[2, 4, 6, 8]

def lcm(x, y): 
    if x > y:
        greater = x 
    else:
        greater = y 
    while(True): 
        if((greater % x == 0) and (greater % y == 0)): 
            lcm = greater 
            break
        greater += 1 
    return lcm 
  
x = 15
y = 10
print("The L.C.M. is", lcm(x, y))
Calculate the LCM (Least Common Multiple) of two integers.
int x = 15;
int y = 10;

public class PrimeNumber {
    public static void main(String[] args) {
        int n = 17; 
        boolean flag = false;
        for(int i = 2; i <= n/2; ++i) {
            if(n % i == 0) {
                flag = true;
                break;
            }
        }
        if (!flag)
            System.out.println(n + " is a prime number.");
        else
            System.out.println(n + " is not a prime number.");
    }
}
Write a Java program to check if a given number is prime.
int n = 17;

using System;
 
public class Program
{
    public static void Main()
    {
        string x = "Hello, World!"
        string y = "World";
        if (x.Contains(y))
        {
            Console.WriteLine("String x contains the substring y.");
        }
    }
}
Write a C# program to test if a given string contains the specified substring.
String x = "Hello, World!";
String y = "World";

<?php
function repeatString($x, $y) {
    $result = "";
    for ($i = 0; $i < strlen($y); $i++) {
        $result .= $x;
    }
    return $result;
}
echo repeatString("Hi ", "World!");
?>
Create a PHP function that takes two strings and returns the first string repeated the number of times specified by the length of the second string.
String x = "Hi";
String y = "World!";

#include <stdio.h>
#include <string.h>

int main()
{
    char x[20] = "Hello";
    char y[20] = "World!";

    int result = strlen(x) > strlen(y) ? 0 : 1;
    if (result == 0)
        printf("%s is longer than %s\n", x, y);
    else 
        printf("%s is longer than %s\n", y, x);

    return 0;
}
Write a C program to find the longer of two strings.
String x = "Hello";
String y = "World!";

SELECT * FROM users
WHERE age = 18;
Create a SQL query to find the rows that have a specific value in a column.
table: users
column: age
value: 18

def generateDict(n):
    dict = {}
    for i in range(1, n+1):
        dict[i] = i**2
    return dict

n = 10
print(generateDict(n))
Generate a Python dictionary containing the squares of the numbers from 1 to n.
int n = 10;

Command: service --status-all
Write a shell command to list all the running services in a Linux system.


public String toUpperCase(String str){ 
    char[] charArr = str.toCharArray(); 

    for(int i=0; i<str.length(); i++){ 
        if(charArr[i] >= 'a' && charArr[i] <= 'z'){ 
            charArr[i] = (char)(charArr[i] - 32); 
        } 
    } 

    return new String(charArr); 
}
Design a Java function to convert a string to uppercase.


"^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
Create a regular expression for matching email addresses.


def daysBetween(date1, date2): 
    startDate = pd.to_datetime(date1) 
    endDate = pd.to_datetime(date2)
    delta = endDate - startDate
    return delta.days
Generate the code to find the number of days between two dates.


def remove_duplicate(arr):
    newArr = []
    for i in arr:
        if i not in newArr:
            newArr.append(i)
    return newArr
Develop a script to remove duplicate elements from an array.
arr = [1, 2, 3, 4, 4, 1, 5]

mkdir directory_name
Write a Bash script to create a directory


def update(a):
    n = 2
    a[:] = [x + n for x in a]
    return a
Develop a code in Python to update all the elements of an array by a number
a = [1, 4, 5, 7, 9]

Surface Area = a*h + b*h + c*h + d*h, 
where a,b and c are three sides of the triangular face and h is the height of the prism
Create a formula to calculate the surface area of a triangular prism


#include <stdio.h>
 
void swap(int *x, int *y)
{
    int temp = *x;
    *x = *y;
    *y = temp;
}
 
int main()
{
    int x = 10, y = 20;
 
    // Call swap function to swap 'x' and 'y'
    swap(&x, &y);
 
    printf("x = %d, y = %d", x, y);
    return 0;
}
Develop a C program for swapping two variables.


df = pd.DataFrame(data=None, columns=None)
Complete the following line of code to successfully initiate a pandas dataframe without specifying column names or data.


def select_list_items(list_of_strings, indexes, alphabet_string):
    new_list = []
    for index in indexes: 
        new_list.append(list_of_strings[alphabet_string.index(str(index))])
    return new_list

print(select_list_items(list_of_strings, indexes, alphabet_string)) # Output: ["Foo", "Baz"]
Write a function that takes three parameters; a list of strings, an index of integers, and an alphabet string. The function should return only the items from the list at the specified indexes using letters from the alphabet as keys.
list_of_strings = ["Foo", "Bar", "Baz"]
indexes = [0,2]
alphabet_string = "abc123"

total = 0
for number in numbers:
    total += number
mean = total / len(numbers)
print(mean) # Output: 8.4
Calculate the mean of the following list of numbers using a for loop.
numbers = [3, 5, 8, 11, 15]

array = [1, 2, 3, 4, 5]
Create an array of 5 integers.


def check_type(items):
  # get the type of first item
  item_type = type(items[0])
  
  # check if all items are of the same type
  for item in items[1:]:
    if item_type != type(item):
      return False
  return True

# Test
print(check_type([1, 2, 3, 4])) # Output: True
Write a function to check if all the items in a list are of the same data type.


total = 0
for i in range(55, 80):
    total += i
print(total) # Output: 2370
Find the sum of all the numbers from 55 to 79.


print("Name:", person["name"])
print("Age:", person["age"])
print("Hobbies:")
for hobby in person["hobbies"]:
  print("-", hobby)
Print the following dictionary in a readable format.
person = {
  "name": "John",
  "age": 30,
  "hobbies": ["reading", "biking", "yoga"]
}

https://www.example.com
Give an example of a valid URL.


def calculate_pythagorean_theorem(a, b):
    c = math.sqrt(a**2 + b**2)
    return c
Create a function to calculate the Pythagorean theorem given two legs


def extract_digits(number): 
   return [int(x) for x in str(number)] 
# Returns [4, 3, 9, 6]
Write a function to extract the digits of a number in an array.
Number = 4396

negative
Categorize the following sentence into either positive or negative
This game is way too difficult

def replace_word(originalString, replacementWord): 
    return originalString.replace('Christmas', replacementWord)
# Output: "Merry Happy everyone, what a lovely day!"
Create a program that reads a string input and replaces all instances of a word with a given replacement
Original string = "Merry Christmas everyone, what a lovely day!" Replacement word = "Happy"

def add_two_numbers(a, b):
    return a + b
Generate a program in Python that takes two parameters and prints the result of their addition.


def is_duplicate_array(arr): 
    return len(arr) != len(set(arr))
Create a program to detect if an array contains duplicate values


def is_valid_string(string, length):
    return len(string) == length
Create a program to validate a string for a specific length


def merge_two_lists(list1, list2): 
    list3 = list1 + list2 
    list3.sort() 
    return list3
Generate a program that merges two sorted lists into one sorted list
list1 = [1, 6, 10] list2 = [3, 5, 7]

def count_words(string):
    string = string.split(" ")
    return len(string)
Create a program that takes a string and prints the number of words the string contains
string = "This is a sentence."

def print_prime_numbers(n): 
    for num in range(2,n+1): 
        if is_prime(num): 
            print(num)
Create a program to print all prime numbers from 1 to a given number.


for (let i = 0; i < 10; i++) {
  console.log(i);
}
Write an example of a for loop in JavaScript.


public static int calculateSquare(int num) {
    return num * num;
}
Write a function in Java that takes an integer and returns its square.


public static boolean isWithinRange(int val, int min, int max) {
    return (val >= min && val <= max);
}
Write a Java method to check if a numerical value is within a specified range.


function maxOfThree($num1, $num2, $num3) {
    $max = max($num1, $num2, $num3);
    return $max;
}
Create a PHP function that finds the maximum of three numbers.


head :: [a] -> a
head (x:_) = x
Write a Haskell function that takes a list and returns its first element.


Create a Java program to calculate the sum of all the elements in an array.
Suggest a way to finish the following instruction.
Create a Java program to

def calculate(x, y, op):
    if op=='+':
        return x + y 
    if op =='-':
        return x - y
Combine the two functions into a single function.
def add(x, y):
    return x + y 

def subtract(x, y):
    return x - y

def find_longest_word(sentence):
    words = sentence.split()
    max_len = 0
    longest_word = ""

    for word in words:
        if (len(word) > max_len):
            max_len = len(word)
            longest_word = word
    
    return max_len, longest_word

if __name__ =='__main__':
    sentence = "Today is a beautiful day"
    max_len, longest_word = find_longest_word(sentence)
    print("The longest word is '{}' with a length of {}".format(longest_word, max_len))
Write a function to find the length of the longest word in a sentence.
sentence = "Today is a beautiful day"

def concat_strings(str1, str2):
    """Function to concatenate two strings"""
    return str1 + str2

if __name__ == '__main__':
    result = concat_strings('Hello ', 'World!')
    print(result) #Hello World!
Create a function which will take two strings as parameters and will return a concatenated string.


def swap_dictionary_values(dic):
    """Function to swap the values in the dictionaries"""
    dic['x'], dic['y'] = dic['y'], dic['x']
    return dic

if __name__ == '__main__':
    dic = {'x': 10, 'y': 20}
    swapped_dic = swap_dictionary_values(dic)
    print(swapped_dic) # {'x': 20, 'y': 10}
Write a code in which the values in the dictionaries will be swapped.
dic = {'x': 10, 'y': 20}

name = input("Enter your name: ")
age = int(input("Enter your age: "))

print("Hello " + name + "! You are " + str(age) + " years old.")
Edit the code to allow users to enter their name and age and print a greeting with their name and age.
name = ''
age = 0

my_list = [1,2,3,4,5]
for elem in my_list:
    print(elem)
Create a for loop to print all the elements of the list.
my_list = [1,2,3,4,5]

class Item:
    """Class which will take three parameters, name, size and price"""
    def __init__(self, name, size, price):
        self.name = name
        self.size = size
        self.price = price
Create a class which will take 3 parameters, name, size, and price.


def sort_list(my_list):
    """Function to sort the list in increasing order"""
    for i in range(len(my_list)):
        min_idx = i
        for j in range(i+1, len(my_list)):
            if my_list[min_idx] > my_list[j]:
                min_idx = j
        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]
    return my_list
    
if __name__ == '__main__':
    my_list = [3, 4, 2, 6]
    sorted_list = sort_list(my_list)
    print(sorted_list)  # [2, 3, 4, 6]
Sort a given list in increasing order.
my_list = [3, 4, 2, 6]

15
Sum up the digits in the given integer.
12345

28.274333882308138
Calculate the area of a circle whose radius is 3.


for(let item of arr) {
  console.log(item);
}
Write a code snippet to print out each item in a given array.
[7, 4, 10, 3]

class Rectangle { 
  public: 
    double length; 
    double breadth; 
  
    double volume() { 
      return length * breadth; 
    } 
};
Create a class in C++ to calculate the volume of a rectangular box.


public static int mostFrequentElement(int[] arr) { 
  int count = 0; 
  int maxCount = 0; 
  int mostFrequent = arr[0]; 
  
  for (int i = 0; i < arr.length; i++) { 
    count = 0; 
    for (int j = 0; j < arr.length; j++) { 
      if(arr[i] == arr[j]) { 
        count++; 
      } 
      if (count > maxCount) { 
        maxCount = count; 
        mostFrequent = arr[i]; 
      } 
    } 
  } 
  return mostFrequent; 
}
Write a function in Java to find the element that appears most frequently in the array.
[9, 5, 1, 0, 4, 5, 9, 2, 8]

def remove_element(list, element): 
  if element in list: 
    list.remove(element)
  return list

print(remove_element(list, element))
Write a function in Python to remove a given element from a list.
list = ['A', 'B', 'C', 'D']
element = 'B'

SELECT * FROM products ORDER BY price ASC LIMIT 3;
Edit the given SQL statement to select the top 3 entries with lowest price.
SELECT * FROM products

82.4
Convert the given temperature in Celsius to Fahrenheit.
Temperature in Celsius: 28

\b[a-z]\w+\b
Write a regular expression that finds all the words in a given sentence that start with a lowercase letter.
Sentence: Hello World.

class Student:
    def __init__(self, name, grade):
        self.name = name
        self.grade = grade
Create a class called 'Student' with attributes name and grade.


string = string.lower()
Change the following code snippet to convert a given string in lower case.
string = "HELLO WORLD"

if x == 5: 
    print("Hello World")
Create a conditional statement to print 'hello world' if the variable 'x' equals 5.


dict = {'a': 1, 'b': 2}
Create a dictionary with keys 'a' and 'b' and values 1 and 2 respectively.


for item in [3, "apple", 5]:
    if isinstance(item,str):
        print(item, "is a string")
    else:
        print(item, "is not a string")
Check if each item in the following list is a string.
[3, "apple", 5]

lst = ["a", "b", "c"]
index = lst.index("c")
Find the index of the element 'c' in the following list.
["a", "b", "c"]

for num in range(1, 11):
    if num != 5 and num != 6:
        print(num)
Print a list of numbers from 1 to 10 except for 5 and 6.


states_dict = { 
    'Maharashtra': 'Maharashtra', 
    'Tamil Nadu': 'Tamil Nadu', 
    'Karnataka': 'Karnataka', 
    'Uttar Pradesh': 'Uttar Pradesh', 
    'Rajasthan': 'Rajasthan', 
    'Gujarat': 'Gujarat', 
    'Madhya Pradesh': 'Madhya Pradesh', 
    'Bihar': 'Bihar', 
    'West Bengal': 'West Bengal', 
    'Andhra Pradesh': 'Andhra Pradesh', 
    'Haryana': 'Haryana', 
    'Assam': 'Assam', 
    'Jammu and Kashmir': 'Jammu and Kashmir', 
    'Kerala': 'Kerala', 
    'Odisha': 'Odisha', 
    'Telangana': 'Telangana', 
    'Punjab': 'Punjab', 
    'Goa': 'Goa', 
    'Tripura': 'Tripura', 
    'Jharkhand': 'Jharkhand', 
    'Chandigarh': 'Chandigarh', 
    'Himachal Pradesh': 'Himachal Pradesh', 
    'Uttarakhand': 'Uttarakhand', 
    'Ladakh': 'Ladakh'
}
Create a dictionary of the declared states of India.


Quicksort is a widely used sorting algorithm that employs the divide-and-conquer approach. It works by partitioning a given array into two subarrays, the left consisting of smaller elements and the right consisting of larger elements. The sorting algorithm then recursively sorts each subarray until the array is completely sorted. Quicksort has a time complexity of O(n log n) in the best case, making it one of the most efficient sorting algorithms.
Describe what a quicksort algorithm does?


x++;
Convert the following Python statement into C code.
x = x + 1

The time complexity of a binary search tree is O(log n), where n is the number of elements in the tree. This is because in a binary search tree, each node can have up to two children, so the depth of the tree is bounded by the logarithm of n. This means that the time required to search the tree is bounded by the logarithm of n.
What is the time complexity of a binary search tree?


def str_to_list(s):
    return list(s)
Write a code to convert a string to a list of characters.


def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2, n+1): 
            c = a + b 
            a = b 
            b = c 
        return b
Create a function to calculate the Fibonacci series from 0 to n.


Type hints in Python are optional pieces of information that can be specified when declaring a class, function or method, that allow Python to better understand the code and provide better type safety. Type hints allow the IDE or interpreter to provide better autocompletion and code checking features, as well as allow the compiler to optimize the code better.
What are type hints in Python?


for (int i = 0; i < nums.length; i++) {
    int num = nums[i];
    System.out.println(num);
}
Create a for loop in Java using the given array.
int[] nums = {2, 4, 8, 16, 32};

A callback is a function passed as an argument to another function. It is called after the other function has finished executing. Callback functions can be used to help make asynchronous code more organized and easier to read. The callback function will be called with the result of the other function once it is complete. For example, if a function needs to wait for a response from an API before continuing, a callback can be passed in as an argument to execute when the response is received. The callback can outline exactly what happens after the response is received. This helps the code stay organized and readable.
Explain how to use callbacks in JavaScript.


def round_to_4_dp(num):
    return round(num, 4)
Create a method in Python to round a number to 4 decimal points.


int get_index(int arr[],int size,int value)
{
    for(int i=0;i<size;i++)
    {
        if(arr[i] == value)
        {
            return i;
        }
    }
    return -1;
}
Create a C++ function that takes in an array and a value and returns the index of the value (if it exists) in the array.
int arr[] = {10, 20, 80, 30, 60, 50, 110, 100, 130,};
int value = 80;

const date = new Date();
const dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
console.log(dateString);
Write a JavaScript code to display the current date in the following format: yyyy-mm-dd.


SELECT * FROM products WHERE price > 50;
Create a SQL query to select all items from a table named "products" that have a price greater than 50.


<html>
  <head>
    <title>My Website!</title>
  </head>
  <body>
    <h1>Welcome</h1>
  </body>
</html>
Format the following HTML code into a valid HTML document.
<title>My Website!</title><h1>Welcome</h1>

class ExampleClass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2
Create a Python class that has an initialization method which takes in two parameters and sets them as class variables.


VGhpcyBpcyBhbiBleGFtcGxlIHN0cmluZy4=
Encode the following string in Base64.
This is an example string.

int findFirstGreaterThan(double[] arr, double value) {
  for (int i = 0; i < arr.length; i++) {
    if (arr[i] > value) {
      return i;
    }
  }
  return -1;
}
Create a C# function to find the index of the first element of an array that is greater than a given value.
double[] arr = {1.1, 2.00, 1.3, 9.7, 12.4};
double value = 5.0;

function removePunctuation(sentence) {
  return sentence.replace(/[^\w\s]/gi, '');
}

console.log(removePunctuation("This is a sentence!"));
Given a sentence, remove all punctuation using JavaScript.
This is a sentence!

def is_sorted_ascending(arr):
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            return False
    return True
Create a Python function to check if a given array is sorted in ascending order.
arr = [1, 3, 5, 7, 6]

def are_anagrams(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        counts = dict()
        for char in str1:
            counts[char] = counts.get(char, 0) + 1
        for char in str2:
            if char not in counts or counts[char] == 0:
                return False
            counts[char] -= 1
    return True
Given 2 string variables, write a function to find out if the 2 strings are anagrams.
str1 = 'schoolmaster', str2 = 'the classroom'

const calculateSum = (n) => {
  let sum = 0;
  for (let i = 1; i <= n; i++) {
    sum += i;
  }
  return sum;
}

console.log(calculateSum(5));
Write a Node.js program to find the sum of first n natural numbers.


import java.util.ArrayList;
import java.util.Collections;

public class SortListAscending {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(5);
        list.add(10);
        list.add(1);
        list.add(8);

        Collections.sort(list);

        System.out.println("The list in ascending order is: " + list);
    }
}
Use Java's built-in sorting algorithm and write a code that sorts a list in ascending order.
List = [5, 10, 1, 8]

from itertools import product
 
def get_cartesian_product(A, B):
  return set(product(A, B))
 
A = {1, 2}; B = {'a', 'b'}
print(get_cartesian_product(A,B))
Write a function to generate the Cartesian product of 2 sets in Python.
A = {1, 2}; B = {'a', 'b'}

def odd_sum(n):
    return sum(list(range(1, 2*n, 2)))
Given a number n, write a function that finds the sum of the first n odd numbers.


<?php
$time = getdate(); 
echo "Hour: ".$time['hours']."<br>"; 
echo "Minutes: ".$time['minutes']."<br>"; 
echo "Seconds: ".$time['seconds']; 
?>
Write a PHP script that prints the current hour, minute, and second.


def capitalize_string(string):
    words = string.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return ' '.join(capitalized_words)

string = "this is a test string" 
capitalize_string(string)
Given a string, edit it so that every first letter of each word is capitalized.
string = "this is a test string"

#!/bin/bash
for i in {1..10}; do echo -n "$i "; done
echo
Write a Bash script that prints the numbers 1 to 10 on one line.


def classify_sentence(sentence):
  if "animal" in sentence.lower():
    return "Animal"
  elif "plant" in sentence.lower():
    return "Plant"

sentence = "The cat is a mammal"
print(classify_sentence(sentence))
Using Python, classify the following sentence "The cat is a mammal" into either Animal or Plant.


<form>
  <label for="email">Enter your email address:</label>
  <input type="email" name="email" id="email" required>
  <input type="submit" value="Submit">
</form>
Create an HTML form to accept an email address.


#include <stdio.h> 
 
int main() 
{ 
    int num, sum = 0, r; 
  
    printf("Enter a positive number: "); 
    scanf("%d", &num); 
  
    while (num > 0) { 
        r = num % 10; 
        sum += r; 
        num = num / 10; 
    } 
  
    printf("Sum of digits of the number: %d\n", sum); 
    return 0; 
}
Write a C program to sum the digits of a positive integer.


SELECT * FROM information_schema.tables WHERE table_schema = "your_database_name";
Write a SQL statement to list all the tables in a database.


"""
Create a looping structure to display numbers from 1-10
"""

# loop from 1 to 10
for num in range(1, 11):
    print(num)
Create a looping structure to display numbers from 1-10.


"""
Write a code to search a word in a given string and get the index position
"""

def search_word(word, string):
    return string.find(word)

word = 'Hello'
string = 'Hello World'

print(search_word(word, string)) # print 0
Write a code to search a word in a given string and get the index position.
word = 'Hello'

string = 'Hello World'

"""
Given a string, remove all spaces from it
"""

def remove_spaces(string):
    result = ''
    for c in string:
        if c != ' ':
            result += c
    return result

string = 'This is a sample string'
print(remove_spaces(string)) # print Thisisasamplestring
Given a string, remove all spaces from it.
string = 'This is a sample string'

"""
Rearrange the given string in alphabetical order
"""

def alphabetical_order(string):
    result = ''.join(sorted(string))
    return result

string = 'zxcvbnmlkjhgfdsaqwertyuiop'
print(alphabetical_order(string)) # print abcdefghijklmnopqrstuvwxyz
Rearrange the given string in alphabetical order.
string = 'zxcvbnmlkjhgfdsaqwertyuiop'

"""
Create a function to compute the area of a triangle when the length of its three sides are known
"""

def TriangleArea(a, b, c):
    s = (a + b + c) / 2
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area

a, b, c = 6, 8, 10

print(TriangleArea(a, b, c)) # print 24.0
Create a function to compute the area of a triangle when the length of its three sides are known.
a = 6, b = 8, c = 10

"""
Write a function to convert a list of characters into a string
"""

def list_to_string(characters):
    result = ''.join(characters)
    return result

characters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']

print(list_to_string(characters)) # print Hello World
Write a function to convert a list of characters into a string.
characters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']

print(my_list[2]) # cherry
Print the third item of the list.
my_list = ["apple","banana","cherry"]

matched_strings = []
for string in strings:
    if string[1:3] == pattern[1:3]:
        matched_strings.append(string)
print(matched_strings) # ["bcd", "def"]
Here is a list of strings and a specific string pattern. Write a code to return a list of all strings that match the pattern.
strings = ["abc","bcd","cde","def","efg"]
pattern = "?ef"

print(n > 0 and (n & (n - 1)) == 0) # True
Outpus true if the given number is a power of two, False otherwise.
n = 16

body h1 {
    font-size: 20px;
    font-weight: bold;
    text-align: center;
}
Convert the following HTML to CSS.
<body>
    <h1>My Web Page</h1>

def max_in_array(arr):
    max = 0
    for i in range(len(arr)):
        if arr[i] > max :
            max = arr[i]
    return max

maxValue = max_in_array(arr)
print(maxValue) # 9
Design an algorithm to find the largest number in a given array.
arr = [2,4,6,9,3,7]

import os

path = os.path.abspath("../images/example.png")
print(path) # \user\path\to\images\example.png
Change the following directory path to absolute path.
path = "../images/example.png"

import string
import random

alphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
print(alphanumeric_string) # GH485TV6
Generate an 8-digit alphanumeric string.


myList = [1, 2, 3]
Fix the following syntax error.
myList = [1, 2, 3

SELECT AVG(age)
FROM customers;
Write a SQL query to retrieve the mean age of all customers.


console.log('Welcome!');
Write a JavaScript code snippet to display a welcome message to the user.


<table>
  <tr><th>Column 1</th><th>Column 2</th><th>Column 3</th></tr>
  <tr><td></td><td></td><td></td></tr>
  <tr><td></td><td></td><td></td></tr>
  <tr><td></td><td></td><td></td></tr>
</table>
Using HTML, create a table with 3 columns and 4 rows.


SELECT age, COUNT(*)
FROM customers
GROUP BY age;
Write an SQL query to group all customers with the same age.


The function will not work when x and y are equal as there is no else if statement to handle that condition. The code should be modified to either return x or y randomly or return a value that is not related to x or y like 'null' or '-1' when x and y are the same.
Analyze the following code and explain what is wrong with it.
function max_value(x, y){
if (x > y){
return x;
}
else{
return y;
}
}

SELECT * 
FROM customers 
WHERE age > 18;
Write a SQL query to list all the customers whose age is over 18.


<input type="checkbox" id="terms" name="terms" value="agree" />
<label for="terms">Terms of Service</label>
Write an HTML code snippet to create a checkbox with the label “Terms of Service”


def multiply_matrices(matrixA, matrixB): 
    """
    Matrix multiplication
    :param matrixA: 2D array
    :param matrixB: 2D array
    :return: product of matrixA and matrixB
    """
    
    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB
    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]

    for i in range(len(matrixA)): 
        for j in range(len(matrixB[0])): 
            for k in range(len(matrixB)): 
                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] 
  
    return result_matrix
Using Python, write a function to multiply two matrices.


document.getElementById('inputField').maxLength = "20";
Write a JavaScript code snippet to limit the maximum length a user can enter in an input field.


def sort_by_public_id(data):
    return sorted(data, key=lambda x: x['public_id'], reverse=True)
Create a method to sort the data by the public_id in descending order?
data = [{"name": "John Smith", "public_id": 4}, 
        {"name": "Michael Jordan", "public_id": 3}, 
        {"name": "LeBron James", "public_id": 5}]

def get_values_greater_than_n(data, n):
  return [val for val in data if len(val) > n]
Given an array of strings and an integer n, implement a function to return the values with length greater than n as a new array.
data = ["abc", "abcde", "abcdef", "abcdefgh"]
n = 3

for i in range(10, 0, -1):
    print(i)
Change the following loop so that it prints out the numbers from 10 to 1 in descending order.
for i in range(1, 11):
    print(i)

def replace_b_tag_with_strong_tag(html_string):
    return html_string.replace("<b>", "<strong>").replace("</b>", "</strong>")
Write a function to parse a string of HTML and replace all occurrences of <b> with <strong>.
html_string = "<h1> This is a heading </h1> <b> This is a bold text </b>"

def count_letter_e(my_string):
    count = 0
    for char in my_string:
        if char == 'e':
            count += 1
    return count
Write an algorithm to count the number of times the letter 'e' appears in a given string.
my_string = "Hello World"

def avg_price(data):
    sum = 0
    for item in data: 
        sum += item["price"] 
    return sum / len(data)
For the following JSON object, write a function to get the average of all prices.
data = [
  { "name": "apple", "price": 2},
  { "name": "banana", "price": 4},
  { "name": "cucumber", "price": 6},
]

Recursion is a programming concept in which a function calls itself until a certain condition is met. It can be used to solve problems that lend themselves to divide and conquer, such as computing the Nth element of a Fibonacci sequence. For example, the code to compute the 5th element of the Fibonacci sequence can be written using recursion in Python as follows:

def fibonacci(n): 
    if n <= 1: 
        return n 
    else: 
        return(fibonacci(n-1) + fibonacci(n-2)) 
  
print(fibonacci(5))  

The output of this code is 5.
Describe what is recursion in programming and provide a simple example.


arr = [1, 2, 3, 4]

for i in arr:
    print(i)
else:
    break
Rewrite the following code to use for-else statement.
arr = [1, 2, 3, 4]

i = 0
while True:
    if i >= len(arr):
        break
    print(arr[i])
    i += 1

def rearrange_string(my_str):
    arr = list(my_str)
    i, j = 0, 1
    while i < len(arr):
        if i+1 < len(arr) and arr[i] == arr[i+1]:
            while j < len(arr):
                if arr[j] != arr[i]:
                    arr[i+1], arr[j] = arr[j], arr[i+1]
                    break
                j += 1
        i += 1
    return "".join(arr)
Given a string, rearrange the characters in the string such that no two consecutive characters are the same.
my_str = "ababab"

from datetime import datetime

def get_date_and_time():
    current_date_and_time = datetime.now()
    friendly_format = current_date_and_time.strftime('%c')
    return friendly_format

if __name__ == "__main__":
    print(get_date_and_time())
Create a program that can output the current date and time in a user-friendly format.


def calculate_sum(arr):
    total = 0
    for num in arr:
        total += num
    return total

if __name__ == "__main__":
    arr = [2, 3, 5, 10, 16]
    print(calculate_sum(arr))
Design a function to sum up an array of numbers.
Sum up [2, 3, 5, 10, 16].

def get_char_freq_histogram(string):
    char_freq_dict = {}
    for char in string:
        if char in char_freq_dict:
            char_freq_dict[char] += 1
        else:
            char_freq_dict[char] = 1
    return char_freq_dict

if __name__ == "__main__":
    sentence = "The quick brown fox jumps over the lazy dog."
    char_freq_histogram = get_char_freq_histogram(sentence)
    print(char_freq_histogram)
Generate a character frequency histogram of a sentence.
Distribution of characters in “The quick brown fox jumps over the lazy dog.”

def convert_to_binary(n):
    binary_num = ''
    while n > 0:
        binary_num = str(n%2) + binary_num
        n = n//2
    return binary_num
    
if __name__ == "__main__":
    print(convert_to_binary(33))
Create a program that can convert a given number (integer) to binary.
Convert 33 to binary numerals.

def print_nums(n):
    for i in range(n):
        print(i)

if __name__ == "__main__":
    print_nums(10)
Rewrite existing code to make it more efficient.
Improve the following code.
```
for i in range(10):
    print(i)
```

def reverse_string(sentence):
    return ' '.join(sentence.split(' ')[::-1])

if __name__ == "__main__":
    sentence = "Where the wild things are"
    print(reverse_string(sentence))
Output a string that is the reversed version of a given sentence.
Reverse “Where the wild things are”

def count_pattern(sentence, pattern):
    count = 0
    words = sentence.split(' ')
    for word in words:
        if word == pattern:
            count += 1
    return count

if __name__ == "__main__":
    sentence = "The quick brown fox jumps over the lazy dog."
    pattern = "quick"
    print(count_pattern(sentence, pattern))
Design a program to find out how many times a pattern occurs in a given string.
Find the number of times “quick” occurs in “The quick brown fox jumps over the lazy dog.”

def get_next_number(arr):
    return arr[-1] + (arr[-1] - arr[-2])

if __name__ == "__main__":
    arr = [3, 7, 11, 15]
    print(get_next_number(arr))
Create a program that can identify the next number in a sequence.
Find the next number in 3, 7, 11, 15.

def permutation(str):
    if len(str) == 0:
        return []
    if len(str) == 1:
        return [str]
    lst = [] 
    for i in range(len(str)):
       m = str[i] 
       remLst = permutation(str[:i] + str[i+1:])
       for p in remLst:
           lst.append([m] + p)
    return lst

if __name__ == "__main__":
    str = "ABC"
    print(permutation(str))
Create a program that can output the permutation of a given string.
Find the permutation of “ABC”

class Vehicle : public Object {
    public:
    // constructor & destructor
    Vehicle() { }
    ~Vehicle() { }
};
Create a class in C++ called "Vehicle", and make it inherit from the class "Object".


from sklearn.linear_model import LogisticRegression
model = LogisticRegression(solver='liblinear')
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
Write a machine learning model to classify whether a given email is spam or not using logistic regression.


[5, 10, 15, 20, 0, 3, 8, 1, 9, 11]
Create an array of 10 numbers between 0 and 20, both included.


from sklearn import tree
model = tree.DecisionTreeClassifier()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
Build a decision tree model using Scikit-Learn to predict the type of iris plant based on petal length, petal width, sepal length and sepal width.


button {
  -webkit-box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);
  -moz-box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);
  box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);
}
Write a CSS code snippet to add a shadow effect to all buttons on the page.


aero.org, asia.org, biz.org, com.org, coop.org, info.org, jobs.org, mobi.org, museum.org, name.org, net.org, pro.org, tel.org, travel.org and org.org.
Find all top-level domains for the TLD ".org".


import random
random.sample(range(0, 10), 5)
Generate five random numbers between 0 and 10 in Python.


We can use the "int.TryParse" method to check if a number is an integer in C#. We pass the number as a string to this method and it returns true if it is an integer or false if it is not. For example:

bool result = int.TryParse("2", out _);
// result is true
How can you check if a number is an integer in C#?


public static void classifyNumber(int[] numbers) {
  for (int num : numbers) {
      if (num % 2 == 0) {
          System.out.println(num + " is even");
      } else {
          System.out.println(num + " is odd");
      }
  }
}
Write a Java function to classify a given set of numbers into even and odd.


SELECT SUM(price * quantity) AS total_cost
FROM products
WHERE product_id = 123;
Write a SQL query to calculate the total cost of a given product.
product_id: 123
price: 100.50
quantity: 10

We can use the sort() method from the algorithm library to sort a list of strings lexicographically in C++. The syntax for this method is as follows: 

sort(listOfStrings.begin(), listOfStrings.end());
How can you sort a list of strings lexicographically in C++?


var mystring = mystring.replace(/\s/g,'');
Modify the following JavaScript code to remove all whitespaces from a given string.
var mystring = " This is a  string  with  extra spaces ";

We can use the join() method to convert a given list of integers into a comma-separated string in Python. The syntax for this method is as follows:

listOfIntegers = [1, 2, 3, 4] 
s = ','.join(str(e) for e in listOfIntegers)
print(s)
How can you convert a given list of integers into a comma-separated string in Python?


SELECT AVG(age) AS average_age
FROM students
WHERE class = 'X';
Write a SQL query to calculate the average age of all students in a given class.


const http = require('http');

const hostname = '127.0.0.1';
const port = 8080;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World\n');
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});
Create a Node.js server that can listen on port 8080.


We can use the slice() method to copy the contents of an array in JavaScript. The syntax for this method is as follows:

var arrayCopy = array.slice();
How can you copy the contents of an array in JavaScript?


<?php

$array = [1, 2, 3, 4];
$index = 2;
$value = 5;

array_splice($array, $index, 0, $value);

echo "<pre>";
print_r($array);
echo "</pre>";
?>
Write a PHP script that inserts a given value into an array at a given index.
array: [1, 2, 3, 4] 
index: 2 
value: 5

The correct way to find the length of an array in Java is to use the length field of the array.
For example:

int[] arr = new int[10]; 
int len = arr.length; 
// len is now 10
What is the correct way to find the length of an array in Java?


We can use the JSON.stringify() method to convert a given object to a JSON string in JavaScript. The syntax for this method is as follows:

var jsonString = JSON.stringify(object);
How can you convert a given object to a JSON string in JavaScript?


A unidirectional recurrent neural network (RNN) accepts a single input and produces a single output. The input sequence is processed one step at a time and the output of each step depends only on the current input and the weights of the network. This type of network is often used in language models and other sequence-based predictions. 

In contrast, a bidirectional recurrent neural network (BRNN) processes the input sequence in both the forward and backward directions. This allows the network to make use of both past and future context when making predictions. Additionally, it has the potential to learn longer-term dependencies since the state of the network is shared between both directions. This type of network is commonly used in areas like speech recognition and natural language understanding.
Explain the difference between unidirectional and bidirectional recurrent neural networks.


Parameter estimation is the process of determining the optimal values for the parameters of a machine learning algorithm. The values that produce the best performance on the training data are typically used as the parameters for the model. By optimizing the parameters, the model can fit the data more accurately and lead to improved generalization performance. Parameter estimation can involve manual tuning, or the use of automated techniques such as grid search or stochastic optimization.
Explain the concept of parameter estimation in machine learning.


def convertTernaryTreeToDoublyLinkedList(root):
    # Edge case
    if (root == None):
        return 
    
    # Create two empty lists to hold left and right list of root
    left = []
    right = []
    # Add root to left list that will hold left subtree
    left.append(root.val)
    # Store the value of the root for later use
    val = root.val
    # Recur to get the left and right lists of the left
    # and right subtree
    getLeft(root.left, left)
    getRight(root.right, right)

    # To see the linked list join the left and right lists
    left.extend(right)

    # Get the length of the list
    length = len(left)

    # Join the left and right list with the middle element
    # of the root.
    for i in range(length):
        if i<length-1:
            left[i].next = left[i+1]
        else:
            left[i].next = None
        if i>0:
            left[i].prev = left[i-1]
        else:
            left[i].prev = None
    
    # Return the list
    return left

def getLeft(root, left):
    # Iterative way to traverse and get all left subtree elements
    if root:
        left.append(root) 
        root = root.left
        getLeft(root, left)

def getRight(root, right):
    # Iterative way to traverse and get all right subtree elements
    if root:
        right.append(root)
        root = root.right
        getRight(root, right)
Design a function to convert a ternary tree to a doubly linked list.


There are several ways to improve the performance of a machine learning algorithm, such as:

1. Increasing the quality/quantity of training data: Using more data can increase the accuracy of the model and better handle outliers and edge cases. 

2. Tuning the model hyperparameters: Adjusting parameters like learning rate, regularization strength can often improve the performance of the algorithm.

3. Feature engineering: You can add or modify features which can not only improve the performance of the model but also allow it to capture different types of relationships among data points.

4. Using better algorithms: Experimenting with different algorithms and techniques can often improve the performance of the model.
How can one improve the performance of a machine learning algorithm?


SELECT title FROM books
ORDER BY pages ASC
LIMIT 1;
Write a MySQL query to find the title of the books with the least number of pages.


def traverse_preorder(root):
    if (root == None):
        return
    else:
        print(root.val)
        traverse_preorder(root.left)
        traverse_preorder(root.right)
Implement a function to traverse a binary tree in pre-order.


Reinforcement learning is a type of machine learning algorithm that allows an agent to learn from its environment through trial and error. The agent takes an action within a given environment and receives a reward or punishment based on its performance. The agent uses this feedback to adjust its actions over time in order to maximize its future reward. Reinforcement learning works by interacting with the environment in a loop, taking actions, observing the results, updating the agent's estimates of its values and adjusting its behavior.
Describe how reinforcement learning works.


Transfer learning is a machine learning method where a model is trained on a task, then the learned knowledge is transferred to a new task. This process of knowledge transfer is enabled by the use of pre-trained models that have already been trained on large datasets, which can then be adapted to a given task using only a few additional training examples. This is especially useful for tasks that do not have enough labeled data available, as the pre-trained model can act as a regularizer and help the model learn better.
Explain the concept of transfer learning.


def sortArray(arr):
    for i in range(len(arr)):
        for j in range(1, len(arr)):
            if arr[j] < arr[j-1]:
                arr[j], arr[j-1] = arr[j-1], arr[j]
    return arr

sortArray([7, 19, 5, 4, 16]) # [4, 5, 7, 16, 19]
Implement a function to sort an array in ascending order.
Array: [7, 19, 5, 4, 16]

The parameter of a Python function is the variable name listed after the function name in the function definition.
Name the parameter of a Python function?


Data serialization is the process of transforming data structures into a format that can be stored, transmitted, or parsed. It is commonly used to send and receive data between different types of systems. The application programming interface of a system can determine which data is serialized and deserialized.
What is data serialization?


class MyClass:
    def __init__(self):
        pass

    def my_method(self, arg):
        # method code
        pass
Create a class in Python with two methods, one of which accepts an argument.


The purpose of a loop in a programming language is to repeatedly execute a set of instructions until a predetermined condition is met. Loops are used to iterate over a set of elements or a certain number of steps, and are often used to traverse data structures such as arrays and linked lists.
What is the purpose of a loop in a programming language?


Recursion is a programming technique where a function calls itself, either directly or indirectly. It is used to solve problems that involve repetition or breaking down a problem into simpler sub-problems. Recursion can be used to solve a wide range of problems, from sorting algorithms to defining recursive data structures. It can also reduce the amount of code needed to solve a problem, as the same code can be used to solve different sub-problems.
Explain recursion in programming.


In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary).
How do you convert a string to an integer in Python?


def get_min_max(lst):
    return min(lst), max(lst)
Generate a program to get the min and max values from a list in one line.


The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements.
What is the difference between a list and a tuple in Python?


Polymorphism in Python is the ability of an object to take on multiple forms. It is an object-oriented programming concept that allows for different implementations of a function or method to be used depending on the object type being used. In Python, this is done through sub-classing, the use of special methods such as the __init__ method, and by using type hints.
Explain polymorphism in Python.


The main advantage of using dictionary comprehension in Python is that it offers an efficient and concise way to create dictionaries. It can be used to create dictionaries from existing sequences or iterables, or to create new dictionaries from scratch. It also eliminates the need for writing multiple lines of code to create dictionaries.
What is the advantage of using dictionary comprehension in Python?


class Student {
   private:
      string firstName;
      string lastName;
      int age;

   public:
      Student(string firstName, string lastName, int age) {
         this->firstName = firstName;
         this->lastName = lastName;
         this->age = age;
      }

      string getFirstName() {
         return firstName;
      }

      string getLastName() {
         return lastName;
      }

      int getAge() {
         return age;
      }
};
Construct the following C++ class.
Class: Student
Attributes: firstName(String), lastName(String), age(int)

SELECT * FROM myTable WHERE A IS NOT NULL AND B = 2;
Construct a SQL query to return all rows in the table where the value of column A is not null and column B is 2.
Table Name: myTable; Columns: A,B

for x in list:
    print(x)
Create a for loop to iterate over the following list and print each element.
list = [1, 2, 3, 4, 5]

delete person.age;
Write a JavaScript statement to delete the key-value pair of age in the following object.
let person = {
    name: "John",
    age: 30
}

SELECT * FROM students WHERE age >= 20 AND age <= 22;
Create an SQL query to find all the students with an age between 20 and 22.
Table Name: students; Columns: age

str.length
Write a JavaScript expression to get the length of the following string.
let str = "Hello World!"

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224, 224, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
Construct a Tensorflow model to classify the following inputs.
Images with labels “cat” and “dog”.

for x in arr:
    print(x)
Create a loop to print the following array values.
arr = [3, 6, 9, 12]

Lambda functions are anonymous short functions that have no name. They are used when a user needs to define a function in just a single expression, usually a function that takes an argument and performs an action on it. Lambda functions can also be used in Python as an alternative to traditional functions when they’re used within a code block, making the code more concise and easier to understand. Lambda functions can also be used to pass a function as an argument to another function. Finally, lambda functions can also be used to create smaller, simpler anonymous functions when the full power of Python’s functions is not required.
Explain the purpose of lambda functions in Python.


<a href="http://example.com" target="_blank">Link</a>
Write an HTML link tag to open a link in a new tab.


from datetime import datetime

now = datetime.now()
print(now.strftime("%d-%m-%Y %H:%M:%S"))
Write a Python script that prints the current date and time.


Binary search is an algorithm used to find an element in a sorted array. It works by repeatedly dividing in half the array until the element being searched is found. Binary search starts by comparing the middle element of the array with the target value. If the target value matches the middle element, its position in the array is returned. If the target value is less than the middle element, the search continues in the lower half of the array. If the target value is greater than the middle element, the search continues in the upper half of the array. This process is repeated until the target element is found or until the entire array has been searched.
Explain the concept of binary search in an array.


function sortArray(arr) {
    let sortedArray = arr.sort();
    return sortedArray;
}
Write a JavaScript function that sorts an array of strings alphabetically.
myArray = ["cat","apple","dog"]

SELECT name, email, phone_number FROM employees WHERE salary > 1000;
Write a SQL query to find the name, email address and phone number of all employees with a salary of more than 1000.


A stack is a linear data structure that works on the principle of last-in, first-out (LIFO). It is a collection of objects or elements which can be added or removed from the top of the stack. It is commonly used as a way to store temporary data, and allows for fast retrieval of the data, as it is only necessary to access the item at the top of the stack. In computer science, the stack is used for a wide range of applications, including memory and runtime storage management, expression evaluation, and more.
Explain what is a stack data structure in programming.


function endsWith(mainStr, subStr) {
    let startIndex = mainStr.length - subStr.length;
    let checkStr = mainStr.substring(startIndex);
    return checkStr === subStr;
}
Write a JavaScript function to check if a string ends with the given substring.
mainStr = “Hello World”
subStr = “orld”

Pointers are variables that store the address of another variable in memory. They can be used to dynamically allocate memory, access a particular piece of data, or pass arguments to functions. In C++, pointers are used to extend the notion of an array by allowing to access memory outside of its bounds and to have a dynamic size. Pointers are also used to create data structures like linked lists and binary trees.
Explain what are pointers in C++.


void print_reverse (string arr[], int size) { 
  if (size > 0) { 
    print_reverse (arr, size - 1); 
    cout<<arr[size-1]<<" "; 
  }
}
Write a C++ function that takes an array of strings and prints them out in reverse order.
myArray = ["cat","apple","dog"]

<form>
  <label>Name:</label>
  <input type="text" name="name" />
  <label>Email:</label>
  <input type="text" name="email" />
  <label>Password:</label>
  <input type="password" name="passwd" />
  <input type="submit" value="Submit" />
</form>
Write an HTML form to collect a user's name, email address, and password.


def binary_search(arr, target): 
	start = 0
	end = len(arr) - 1

	while start <= end: 
		mid = start + (end-start)//2
		if arr[mid] == target: 
			return mid 
		elif arr[mid] < target: 
			start = mid + 1
		else: 
			end = mid - 1
          
	return -1
Write a code snippet to implement a binary search algorithm.


Given the equation r=2sin(θ), 
the Cartesian equation can be determined to be

x=2sin(θ)cos(θ) and y= 2sin²(θ).
Translate the following polar equation into a Cartesian equation.
r = 2 sin(θ)

def find_gcd(x,y):
   
    # If x is greater than y
    # Swapping the x and y
    if x > y:
        tmp = x
        x = y
        y = tmp

    while y > 0:
        tmp = y
        y = x % y
        x = tmp
    return x

gcd = find_gcd(20,12)
print("The greatest common divisor of 20 and 12 is: ", gcd)
Create an algorithm that finds the greatest common divisor of two integers.
x = 20 
y = 12

def findSumPairs(arr, target): 

    # X stores elements and its 
    # frequencies in a dictionary 
    X = dict() 
    n = len(arr) 
    output = [] 
  
    # Store counts of all elements 
    # of array in a hash 
    for i in range(0, n): 
        if arr[i] in X.keys(): 
            X[arr[i]] += 1
        else: 
            X[arr[i]] = 1

    # Loop over each element 
    for i in range(0, n): 
        # finding the compliment 
        k = target - arr[i] 

        # If compliment exists in X 
        # and it is not the same element 
        if (k in X.keys() and X[k] != 0
            and k != arr[i]): 
            output.append([arr[i], k]) 
            X[k] = X[k] - 1
  
    # return content of output 
    return output 

# calling the findSumPairs function 
print(findSumPairs(array, target)) 

# Output: [[1, 4], [2, 3]]
Create an algorithm to find all pairs of elements in a given array that sum up to a given target.
array = [1, 6, 4, 5, 3, 2]
target = 5

#!/bin/bash

for i in {1..10}
do
  echo $i
done
Create a Bash script that prints the first ten numbers.


<h1 style="color: blue;">Heading</h1>
Edit the following HTML code snippet to change the color of the heading to blue.
<h1>Heading</h1>

SELECT name, country 
FROM customers 
WHERE orderDate > DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY);
Write a SQL query to display the name and country of the customers who have purchased products in the last 24 hours.


function convertTemp(temp, unit) {
    let newTemp;
    if (unit === "C") {
        newTemp = temp * 9/5 + 32;
    } else {
        newTemp = (temp - 32) * 5/9;
    }
    return newTemp;
}
Create a JavaScript program to convert temperatures between Celsius and Fahrenheit.


SELECT COUNT(*) FROM orders
WHERE DATE(order_date) = CURDATE()
Write a SQL query to find out how many orders have been placed today?


function isEven(number) {
  return number % 2 === 0;
}
Change the following JavaScript function so that it returns true if the number passed as a parameter is even, and false if it is odd.
function isEven(number) {
  return number % 2;
}

for i in range(1, 6):
    for j in range(1, 6):
        print(i * j, end="\t")
    print()
Write a Python script to print out a 5x5 multiplication table.


<html>
  <head>
    <title>My Page</title> 
  </head>
  <body>
    <h1 style="text-align: center;">Page Title</h1>
  </body>
</html>
Edit this HTML document so the <h1> tag at the top of the page is aligned to the center.
<html>
  <head>
    <title>My Page</title> 
  </head>
  <body>
    <h1>Page Title</h1>
  </body>
</html>

SELECT product_name, SUM(quantity)
FROM orders 
WHERE DATE(order_date) = CURDATE()
GROUP BY product_name 
ORDER BY SUM(quantity) DESC
LIMIT 1
Write an SQL query that finds the most popular product sold today (in terms of quantity), along with the quantity sold.


public int getDaysDifference(LocalDate startDate, LocalDate endDate) {
    return (int) ChronoUnit.DAYS.between(startDate, endDate);
}
Create a function in Java that returns the number of days between two given dates.


import requests

url = 'https://www.example.com'
response = requests.get(url)

print(response.text)
Create a HTTP GET request using Python.


body {
  font-family: sans-serif;
}
Write a CSS rule that changes the font-family of the body element to sans-serif.


int[] mergeArrays(int[] array1, int[] array2) {
    int[] mergedArray = new int[array1.length + array2.length];
    int index1 = 0, index2 = 0;
    for (int i = 0; i < mergedArray.length; i++) {
        if (index1 < array1.length 
            && (index2 >= array2.length || array1[index1] < array2[index2])) {
            mergedArray[i] = array1[index1];
            index1++;
        } else {
            mergedArray[i] = array2[index2];
            index2++;
        } 
    } 
    return mergedArray;
}
Merge the following two sorted arrays into a single sorted array in Java.
[1, 5, 8]
[2, 3, 6]

Array is a data structure that stores elements of the same data type. It is a fixed length structure and once declared, the length of the array cannot be modified. A list is a data structure that stores elements of different types. The size of a list can be modified by adding or removing elements. Lists are more powerful than arrays as they are more flexible when it comes to inserting, deleting, and searching elements.
What is the difference between an array and a list in Java?


# Python program to print first n prime numbers
  
num = 100
# prime numbers are greater than 1
if num > 1:
   # check for factors
   for i in range(2,num):
       if (num % i) == 0:
           print(num,"is not a prime number")
           break
   else:
       print(num,"is a prime number")
  
else:
   print(num,"is not a prime number")

# Program to print the first N prime numbers

# Taking input from the user
N = 100

# Initializing a list to store prime numbers
prime_list = []

# Initializing a variable to store each prime number
num = 2

# Iterating over the range of numbers
while len(prime_list) < N:
    # Initializing a flag to determine if the number is prime or not
    flag = True
    # Iterating over the already identified prime numbers and dividing the number by each
    for prime_num in prime_list:
        # Checking the remainder
        if num % prime_num == 0:
            flag = False
            break
    # Checking if the number is prime
    if flag:
        prime_list.append(num)
    # Incrementing the number
    num += 1

# Printing the first N prime numbers
print("First", N , "prime numbers are:")
for prime_num in prime_list:
    print(prime_num, end=" ")
Write a script that prints out the first 100 prime numbers.


d = {
  "a": 1,
  "b": 2,
  "c": 3
}
Create a Python dictionary that contains the following key-value pairs: "a":1, "b":2, "c": 3.


The difference between let and const is that variables declared with let can be reassigned a different value or reassigned a different value type. On the other hand, variables declared with const are fixed, and cannot be reassigned or reassigned a different value type.
What is the difference between variables declared with let and const in JavaScript?


int add_numbers(int x, int y) {
  return x + y;
}
Convert the following function from Python to C++.
def add_numbers(x, y):
    return x + y

